
ButtonManager.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1f4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002618  0800b3c4  0800b3c4  0001b3c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00000b5e  0800d9dc  0800d9dc  0001d9dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000020  0800e53c  0800e53c  0001e53c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  0800e55c  0800e55c  0001e55c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   0000001c  0800e564  0800e564  0001e564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  0800e580  0800e580  0001e580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  0800e590  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001484  200000ac  0800e63c  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00002000  20001530  0800e63c  00021530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   000741de  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000f173  00000000  00000000  000942ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001ce5b  00000000  00000000  000a342d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001df8  00000000  00000000  000c0288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000021c0  00000000  00000000  000c2080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000d33c  00000000  00000000  000c4240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000413e2  00000000  00000000  000d157c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011f828  00000000  00000000  0011295e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000cf  00000000  00000000  00232186  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005bb4  00000000  00000000  00232258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  00237e0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  00237ed8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000ac 	.word	0x200000ac
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b3ac 	.word	0x0800b3ac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b0 	.word	0x200000b0
 800020c:	0800b3ac 	.word	0x0800b3ac

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005b8:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	2400      	movs	r4, #0
 80005bc:	940b      	str	r4, [sp, #44]	; 0x2c
 80005be:	940c      	str	r4, [sp, #48]	; 0x30
 80005c0:	940d      	str	r4, [sp, #52]	; 0x34
 80005c2:	940e      	str	r4, [sp, #56]	; 0x38
 80005c4:	940f      	str	r4, [sp, #60]	; 0x3c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005c6:	4baa      	ldr	r3, [pc, #680]	; (8000870 <MX_GPIO_Init+0x2bc>)
 80005c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005ca:	f042 0210 	orr.w	r2, r2, #16
 80005ce:	631a      	str	r2, [r3, #48]	; 0x30
 80005d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005d2:	f002 0210 	and.w	r2, r2, #16
 80005d6:	9200      	str	r2, [sp, #0]
 80005d8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80005e0:	631a      	str	r2, [r3, #48]	; 0x30
 80005e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005e4:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80005e8:	9201      	str	r2, [sp, #4]
 80005ea:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005ee:	f042 0202 	orr.w	r2, r2, #2
 80005f2:	631a      	str	r2, [r3, #48]	; 0x30
 80005f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005f6:	f002 0202 	and.w	r2, r2, #2
 80005fa:	9202      	str	r2, [sp, #8]
 80005fc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000600:	f042 0208 	orr.w	r2, r2, #8
 8000604:	631a      	str	r2, [r3, #48]	; 0x30
 8000606:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000608:	f002 0208 	and.w	r2, r2, #8
 800060c:	9203      	str	r2, [sp, #12]
 800060e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000610:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000612:	f042 0204 	orr.w	r2, r2, #4
 8000616:	631a      	str	r2, [r3, #48]	; 0x30
 8000618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800061a:	f002 0204 	and.w	r2, r2, #4
 800061e:	9204      	str	r2, [sp, #16]
 8000620:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000624:	f042 0201 	orr.w	r2, r2, #1
 8000628:	631a      	str	r2, [r3, #48]	; 0x30
 800062a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800062c:	f002 0201 	and.w	r2, r2, #1
 8000630:	9205      	str	r2, [sp, #20]
 8000632:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000634:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000636:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800063a:	631a      	str	r2, [r3, #48]	; 0x30
 800063c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800063e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000642:	9206      	str	r2, [sp, #24]
 8000644:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000646:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000648:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800064c:	631a      	str	r2, [r3, #48]	; 0x30
 800064e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000650:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000654:	9207      	str	r2, [sp, #28]
 8000656:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800065a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800065e:	631a      	str	r2, [r3, #48]	; 0x30
 8000660:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000662:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8000666:	9208      	str	r2, [sp, #32]
 8000668:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800066a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800066c:	f042 0220 	orr.w	r2, r2, #32
 8000670:	631a      	str	r2, [r3, #48]	; 0x30
 8000672:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000674:	f002 0220 	and.w	r2, r2, #32
 8000678:	9209      	str	r2, [sp, #36]	; 0x24
 800067a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800067c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800067e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000682:	631a      	str	r2, [r3, #48]	; 0x30
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800068a:	930a      	str	r3, [sp, #40]	; 0x28
 800068c:	9b0a      	ldr	r3, [sp, #40]	; 0x28

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800068e:	4622      	mov	r2, r4
 8000690:	2110      	movs	r1, #16
 8000692:	4878      	ldr	r0, [pc, #480]	; (8000874 <MX_GPIO_Init+0x2c0>)
 8000694:	f000 ff64 	bl	8001560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED0_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000698:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 8000894 <MX_GPIO_Init+0x2e0>
 800069c:	4622      	mov	r2, r4
 800069e:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 80006a2:	4648      	mov	r0, r9
 80006a4:	f000 ff5c 	bl	8001560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80006a8:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 8000898 <MX_GPIO_Init+0x2e4>
 80006ac:	2201      	movs	r2, #1
 80006ae:	2120      	movs	r1, #32
 80006b0:	4650      	mov	r0, sl
 80006b2:	f000 ff55 	bl	8001560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80006b6:	2201      	movs	r2, #1
 80006b8:	2108      	movs	r1, #8
 80006ba:	486f      	ldr	r0, [pc, #444]	; (8000878 <MX_GPIO_Init+0x2c4>)
 80006bc:	f000 ff50 	bl	8001560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006c6:	486d      	ldr	r0, [pc, #436]	; (800087c <MX_GPIO_Init+0x2c8>)
 80006c8:	f000 ff4a 	bl	8001560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, DCMI_PWR_EN_Pin|LED1_Pin, GPIO_PIN_RESET);
 80006cc:	4622      	mov	r2, r4
 80006ce:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 80006d2:	486b      	ldr	r0, [pc, #428]	; (8000880 <MX_GPIO_Init+0x2cc>)
 80006d4:	f000 ff44 	bl	8001560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_RST_GPIO_Port, EXT_RST_Pin, GPIO_PIN_RESET);
 80006d8:	4622      	mov	r2, r4
 80006da:	2108      	movs	r1, #8
 80006dc:	4869      	ldr	r0, [pc, #420]	; (8000884 <MX_GPIO_Init+0x2d0>)
 80006de:	f000 ff3f 	bl	8001560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80006e2:	f04f 0b08 	mov.w	fp, #8
 80006e6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ea:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006ee:	a90b      	add	r1, sp, #44	; 0x2c
 80006f0:	4865      	ldr	r0, [pc, #404]	; (8000888 <MX_GPIO_Init+0x2d4>)
 80006f2:	f000 fd93 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80006f6:	2304      	movs	r3, #4
 80006f8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006fa:	2502      	movs	r5, #2
 80006fc:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000700:	2603      	movs	r6, #3
 8000702:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000704:	2309      	movs	r3, #9
 8000706:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000708:	a90b      	add	r1, sp, #44	; 0x2c
 800070a:	485f      	ldr	r0, [pc, #380]	; (8000888 <MX_GPIO_Init+0x2d4>)
 800070c:	f000 fd86 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000710:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000714:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000716:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071a:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800071c:	230b      	movs	r3, #11
 800071e:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000720:	a90b      	add	r1, sp, #44	; 0x2c
 8000722:	4858      	ldr	r0, [pc, #352]	; (8000884 <MX_GPIO_Init+0x2d0>)
 8000724:	f000 fd7a 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000728:	f44f 7340 	mov.w	r3, #768	; 0x300
 800072c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800072e:	2312      	movs	r3, #18
 8000730:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000734:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000736:	2304      	movs	r3, #4
 8000738:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073a:	a90b      	add	r1, sp, #44	; 0x2c
 800073c:	484d      	ldr	r0, [pc, #308]	; (8000874 <MX_GPIO_Init+0x2c0>)
 800073e:	f000 fd6d 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000742:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000746:	930b      	str	r3, [sp, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000748:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074c:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800074e:	270a      	movs	r7, #10
 8000750:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000752:	a90b      	add	r1, sp, #44	; 0x2c
 8000754:	4847      	ldr	r0, [pc, #284]	; (8000874 <MX_GPIO_Init+0x2c0>)
 8000756:	f000 fd61 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 800075a:	2310      	movs	r3, #16
 800075c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075e:	f04f 0801 	mov.w	r8, #1
 8000762:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000768:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 800076a:	a90b      	add	r1, sp, #44	; 0x2c
 800076c:	4841      	ldr	r0, [pc, #260]	; (8000874 <MX_GPIO_Init+0x2c0>)
 800076e:	f000 fd55 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000772:	2380      	movs	r3, #128	; 0x80
 8000774:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000776:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800077c:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000780:	a90b      	add	r1, sp, #44	; 0x2c
 8000782:	4650      	mov	r0, sl
 8000784:	f000 fd4a 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8000788:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800078c:	930b      	str	r3, [sp, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000792:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000794:	230c      	movs	r3, #12
 8000796:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000798:	a90b      	add	r1, sp, #44	; 0x2c
 800079a:	483c      	ldr	r0, [pc, #240]	; (800088c <MX_GPIO_Init+0x2d8>)
 800079c:	f000 fd3e 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED2_Pin;
 80007a0:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80007a4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a6:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ae:	a90b      	add	r1, sp, #44	; 0x2c
 80007b0:	4648      	mov	r0, r9
 80007b2:	f000 fd33 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80007b6:	2360      	movs	r3, #96	; 0x60
 80007b8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ba:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007be:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007c0:	230d      	movs	r3, #13
 80007c2:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007c4:	a90b      	add	r1, sp, #44	; 0x2c
 80007c6:	4830      	ldr	r0, [pc, #192]	; (8000888 <MX_GPIO_Init+0x2d4>)
 80007c8:	f000 fd28 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80007cc:	2340      	movs	r3, #64	; 0x40
 80007ce:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d0:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d4:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80007d6:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80007d8:	a90b      	add	r1, sp, #44	; 0x2c
 80007da:	4826      	ldr	r0, [pc, #152]	; (8000874 <MX_GPIO_Init+0x2c0>)
 80007dc:	f000 fd1e 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80007e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e6:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80007ea:	a90b      	add	r1, sp, #44	; 0x2c
 80007ec:	4828      	ldr	r0, [pc, #160]	; (8000890 <MX_GPIO_Init+0x2dc>)
 80007ee:	f000 fd15 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80007f2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80007f6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f8:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fc:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80007fe:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000800:	a90b      	add	r1, sp, #44	; 0x2c
 8000802:	4648      	mov	r0, r9
 8000804:	f000 fd0a 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000808:	23f0      	movs	r3, #240	; 0xf0
 800080a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000810:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000812:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000814:	a90b      	add	r1, sp, #44	; 0x2c
 8000816:	4819      	ldr	r0, [pc, #100]	; (800087c <MX_GPIO_Init+0x2c8>)
 8000818:	f000 fd00 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800081c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000820:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000822:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000828:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800082a:	a90b      	add	r1, sp, #44	; 0x2c
 800082c:	4815      	ldr	r0, [pc, #84]	; (8000884 <MX_GPIO_Init+0x2d0>)
 800082e:	f000 fcf5 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000832:	2320      	movs	r3, #32
 8000834:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000836:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083c:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800083e:	a90b      	add	r1, sp, #44	; 0x2c
 8000840:	4650      	mov	r0, sl
 8000842:	f000 fceb 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000846:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000850:	230d      	movs	r3, #13
 8000852:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000854:	a90b      	add	r1, sp, #44	; 0x2c
 8000856:	4650      	mov	r0, sl
 8000858:	f000 fce0 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800085c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000860:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000862:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000866:	a90b      	add	r1, sp, #44	; 0x2c
 8000868:	4808      	ldr	r0, [pc, #32]	; (800088c <MX_GPIO_Init+0x2d8>)
 800086a:	f000 fcd7 	bl	800121c <HAL_GPIO_Init>
 800086e:	e015      	b.n	800089c <MX_GPIO_Init+0x2e8>
 8000870:	40023800 	.word	0x40023800
 8000874:	40020400 	.word	0x40020400
 8000878:	40022800 	.word	0x40022800
 800087c:	40022000 	.word	0x40022000
 8000880:	40021c00 	.word	0x40021c00
 8000884:	40021800 	.word	0x40021800
 8000888:	40021000 	.word	0x40021000
 800088c:	40020800 	.word	0x40020800
 8000890:	40022400 	.word	0x40022400
 8000894:	40020000 	.word	0x40020000
 8000898:	40020c00 	.word	0x40020c00

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800089c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a0:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80008a8:	a90b      	add	r1, sp, #44	; 0x2c
 80008aa:	486f      	ldr	r0, [pc, #444]	; (8000a68 <MX_GPIO_Init+0x4b4>)
 80008ac:	f000 fcb6 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80008b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008b4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008bc:	230d      	movs	r3, #13
 80008be:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80008c0:	a90b      	add	r1, sp, #44	; 0x2c
 80008c2:	486a      	ldr	r0, [pc, #424]	; (8000a6c <MX_GPIO_Init+0x4b8>)
 80008c4:	f000 fcaa 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008c8:	2310      	movs	r3, #16
 80008ca:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008cc:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008d0:	a90b      	add	r1, sp, #44	; 0x2c
 80008d2:	4650      	mov	r0, sl
 80008d4:	f000 fca2 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 80008d8:	2304      	movs	r3, #4
 80008da:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008dc:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e0:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80008e2:	230c      	movs	r3, #12
 80008e4:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 80008e6:	a90b      	add	r1, sp, #44	; 0x2c
 80008e8:	4650      	mov	r0, sl
 80008ea:	f000 fc97 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80008ee:	f248 0304 	movw	r3, #32772	; 0x8004
 80008f2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f4:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80008f8:	a90b      	add	r1, sp, #44	; 0x2c
 80008fa:	485d      	ldr	r0, [pc, #372]	; (8000a70 <MX_GPIO_Init+0x4bc>)
 80008fc:	f000 fc8e 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8000900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000904:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 800090e:	a90b      	add	r1, sp, #44	; 0x2c
 8000910:	4858      	ldr	r0, [pc, #352]	; (8000a74 <MX_GPIO_Init+0x4c0>)
 8000912:	f000 fc83 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_PWR_EN_Pin LED1_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin|LED1_Pin;
 8000916:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 800091a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000924:	a90b      	add	r1, sp, #44	; 0x2c
 8000926:	4852      	ldr	r0, [pc, #328]	; (8000a70 <MX_GPIO_Init+0x4bc>)
 8000928:	f000 fc78 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 800092c:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000930:	930b      	str	r3, [sp, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000938:	230d      	movs	r3, #13
 800093a:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800093c:	a90b      	add	r1, sp, #44	; 0x2c
 800093e:	484c      	ldr	r0, [pc, #304]	; (8000a70 <MX_GPIO_Init+0x4bc>)
 8000940:	f000 fc6c 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000944:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000948:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800094a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800094e:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000952:	a90b      	add	r1, sp, #44	; 0x2c
 8000954:	4847      	ldr	r0, [pc, #284]	; (8000a74 <MX_GPIO_Init+0x4c0>)
 8000956:	f000 fc61 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800095a:	23c0      	movs	r3, #192	; 0xc0
 800095c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000962:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000964:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000968:	a90b      	add	r1, sp, #44	; 0x2c
 800096a:	4843      	ldr	r0, [pc, #268]	; (8000a78 <MX_GPIO_Init+0x4c4>)
 800096c:	f000 fc56 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000970:	2310      	movs	r3, #16
 8000972:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000978:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800097a:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800097c:	a90b      	add	r1, sp, #44	; 0x2c
 800097e:	483c      	ldr	r0, [pc, #240]	; (8000a70 <MX_GPIO_Init+0x4bc>)
 8000980:	f000 fc4c 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000984:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000988:	930b      	str	r3, [sp, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800098a:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800098e:	a90b      	add	r1, sp, #44	; 0x2c
 8000990:	483a      	ldr	r0, [pc, #232]	; (8000a7c <MX_GPIO_Init+0x4c8>)
 8000992:	f000 fc43 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000996:	2305      	movs	r3, #5
 8000998:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099e:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80009a0:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a2:	a90b      	add	r1, sp, #44	; 0x2c
 80009a4:	4834      	ldr	r0, [pc, #208]	; (8000a78 <MX_GPIO_Init+0x4c4>)
 80009a6:	f000 fc39 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80009aa:	2332      	movs	r3, #50	; 0x32
 80009ac:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b2:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009b4:	230b      	movs	r3, #11
 80009b6:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b8:	a90b      	add	r1, sp, #44	; 0x2c
 80009ba:	482f      	ldr	r0, [pc, #188]	; (8000a78 <MX_GPIO_Init+0x4c4>)
 80009bc:	f000 fc2e 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009c0:	2304      	movs	r3, #4
 80009c2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c4:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c8:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80009ca:	2309      	movs	r3, #9
 80009cc:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ce:	a90b      	add	r1, sp, #44	; 0x2c
 80009d0:	482b      	ldr	r0, [pc, #172]	; (8000a80 <MX_GPIO_Init+0x4cc>)
 80009d2:	f000 fc23 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80009d6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80009da:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009dc:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e0:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80009e2:	2309      	movs	r3, #9
 80009e4:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009e6:	a90b      	add	r1, sp, #44	; 0x2c
 80009e8:	4650      	mov	r0, sl
 80009ea:	f000 fc17 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 80009ee:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f2:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 80009fa:	a90b      	add	r1, sp, #44	; 0x2c
 80009fc:	481b      	ldr	r0, [pc, #108]	; (8000a6c <MX_GPIO_Init+0x4b8>)
 80009fe:	f000 fc0d 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000a02:	2304      	movs	r3, #4
 8000a04:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a06:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	a90b      	add	r1, sp, #44	; 0x2c
 8000a0c:	4817      	ldr	r0, [pc, #92]	; (8000a6c <MX_GPIO_Init+0x4b8>)
 8000a0e:	f000 fc05 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a12:	2386      	movs	r3, #134	; 0x86
 8000a14:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a16:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1a:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a1c:	230b      	movs	r3, #11
 8000a1e:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a20:	a90b      	add	r1, sp, #44	; 0x2c
 8000a22:	4648      	mov	r0, r9
 8000a24:	f000 fbfa 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000a28:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a2c:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000a30:	a90b      	add	r1, sp, #44	; 0x2c
 8000a32:	4648      	mov	r0, r9
 8000a34:	f000 fbf2 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000a38:	2350      	movs	r3, #80	; 0x50
 8000a3a:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a40:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000a42:	230d      	movs	r3, #13
 8000a44:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a46:	a90b      	add	r1, sp, #44	; 0x2c
 8000a48:	4648      	mov	r0, r9
 8000a4a:	f000 fbe7 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000a4e:	2328      	movs	r3, #40	; 0x28
 8000a50:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a56:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000a58:	970f      	str	r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5a:	a90b      	add	r1, sp, #44	; 0x2c
 8000a5c:	4648      	mov	r0, r9
 8000a5e:	f000 fbdd 	bl	800121c <HAL_GPIO_Init>

}
 8000a62:	b011      	add	sp, #68	; 0x44
 8000a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a68:	40022800 	.word	0x40022800
 8000a6c:	40021800 	.word	0x40021800
 8000a70:	40021c00 	.word	0x40021c00
 8000a74:	40022000 	.word	0x40022000
 8000a78:	40020800 	.word	0x40020800
 8000a7c:	40021400 	.word	0x40021400
 8000a80:	40020400 	.word	0x40020400

08000a84 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a84:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <Error_Handler+0x2>

08000a88 <MX_USART1_UART_Init>:
{
 8000a88:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8000a8a:	480b      	ldr	r0, [pc, #44]	; (8000ab8 <MX_USART1_UART_Init+0x30>)
 8000a8c:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <MX_USART1_UART_Init+0x34>)
 8000a8e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000a90:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000a94:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a96:	2300      	movs	r3, #0
 8000a98:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a9a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a9c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a9e:	220c      	movs	r2, #12
 8000aa0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa4:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aa6:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aa8:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000aaa:	f002 fb50 	bl	800314e <HAL_UART_Init>
 8000aae:	b900      	cbnz	r0, 8000ab2 <MX_USART1_UART_Init+0x2a>
}
 8000ab0:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000ab2:	f7ff ffe7 	bl	8000a84 <Error_Handler>
 8000ab6:	bf00      	nop
 8000ab8:	200000c8 	.word	0x200000c8
 8000abc:	40011000 	.word	0x40011000

08000ac0 <MX_SPI2_Init>:
{
 8000ac0:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 8000ac2:	4817      	ldr	r0, [pc, #92]	; (8000b20 <MX_SPI2_Init+0x60>)
 8000ac4:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <MX_SPI2_Init+0x64>)
 8000ac6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000aca:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000ace:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ad8:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000adc:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ae0:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ae4:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ae8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aec:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000af0:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000af4:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000af8:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000afc:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
  hspi2.Init.CRCPolynomial = 7;
 8000b00:	2207      	movs	r2, #7
 8000b02:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b06:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b0a:	2308      	movs	r3, #8
 8000b0c:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b10:	3084      	adds	r0, #132	; 0x84
 8000b12:	f002 f81d 	bl	8002b50 <HAL_SPI_Init>
 8000b16:	b900      	cbnz	r0, 8000b1a <MX_SPI2_Init+0x5a>
}
 8000b18:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000b1a:	f7ff ffb3 	bl	8000a84 <Error_Handler>
 8000b1e:	bf00      	nop
 8000b20:	200000c8 	.word	0x200000c8
 8000b24:	40003800 	.word	0x40003800

08000b28 <MX_I2C3_Init>:
{
 8000b28:	b508      	push	{r3, lr}
  hi2c3.Instance = I2C3;
 8000b2a:	4816      	ldr	r0, [pc, #88]	; (8000b84 <MX_I2C3_Init+0x5c>)
 8000b2c:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <MX_I2C3_Init+0x60>)
 8000b2e:	f8c0 30e8 	str.w	r3, [r0, #232]	; 0xe8
  hi2c3.Init.Timing = 0x00A0A3F7;
 8000b32:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <MX_I2C3_Init+0x64>)
 8000b34:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
  hi2c3.Init.OwnAddress1 = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b3e:	2201      	movs	r2, #1
 8000b40:	f8c0 20f4 	str.w	r2, [r0, #244]	; 0xf4
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b44:	f8c0 30f8 	str.w	r3, [r0, #248]	; 0xf8
  hi2c3.Init.OwnAddress2 = 0;
 8000b48:	f8c0 30fc 	str.w	r3, [r0, #252]	; 0xfc
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b4c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b50:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b54:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b58:	30e8      	adds	r0, #232	; 0xe8
 8000b5a:	f000 fec9 	bl	80018f0 <HAL_I2C_Init>
 8000b5e:	b950      	cbnz	r0, 8000b76 <MX_I2C3_Init+0x4e>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b60:	2100      	movs	r1, #0
 8000b62:	480b      	ldr	r0, [pc, #44]	; (8000b90 <MX_I2C3_Init+0x68>)
 8000b64:	f001 f8e8 	bl	8001d38 <HAL_I2CEx_ConfigAnalogFilter>
 8000b68:	b938      	cbnz	r0, 8000b7a <MX_I2C3_Init+0x52>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4808      	ldr	r0, [pc, #32]	; (8000b90 <MX_I2C3_Init+0x68>)
 8000b6e:	f001 f911 	bl	8001d94 <HAL_I2CEx_ConfigDigitalFilter>
 8000b72:	b920      	cbnz	r0, 8000b7e <MX_I2C3_Init+0x56>
}
 8000b74:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000b76:	f7ff ff85 	bl	8000a84 <Error_Handler>
    Error_Handler();
 8000b7a:	f7ff ff83 	bl	8000a84 <Error_Handler>
    Error_Handler();
 8000b7e:	f7ff ff81 	bl	8000a84 <Error_Handler>
 8000b82:	bf00      	nop
 8000b84:	200000c8 	.word	0x200000c8
 8000b88:	40005c00 	.word	0x40005c00
 8000b8c:	00a0a3f7 	.word	0x00a0a3f7
 8000b90:	200001b0 	.word	0x200001b0

08000b94 <SystemClock_Config>:
{
 8000b94:	b500      	push	{lr}
 8000b96:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b98:	2230      	movs	r2, #48	; 0x30
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	a808      	add	r0, sp, #32
 8000b9e:	f009 fb91 	bl	800a2c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	9303      	str	r3, [sp, #12]
 8000ba6:	9304      	str	r3, [sp, #16]
 8000ba8:	9305      	str	r3, [sp, #20]
 8000baa:	9306      	str	r3, [sp, #24]
 8000bac:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bae:	4a20      	ldr	r2, [pc, #128]	; (8000c30 <SystemClock_Config+0x9c>)
 8000bb0:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000bb2:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000bb6:	6411      	str	r1, [r2, #64]	; 0x40
 8000bb8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000bba:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000bbe:	9201      	str	r2, [sp, #4]
 8000bc0:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000bc2:	491c      	ldr	r1, [pc, #112]	; (8000c34 <SystemClock_Config+0xa0>)
 8000bc4:	680a      	ldr	r2, [r1, #0]
 8000bc6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8000bca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000bce:	600a      	str	r2, [r1, #0]
 8000bd0:	680a      	ldr	r2, [r1, #0]
 8000bd2:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8000bd6:	9202      	str	r2, [sp, #8]
 8000bd8:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bda:	2202      	movs	r2, #2
 8000bdc:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bde:	2101      	movs	r1, #1
 8000be0:	910b      	str	r1, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000be2:	2110      	movs	r1, #16
 8000be4:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be6:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000be8:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 10;
 8000bea:	230a      	movs	r3, #10
 8000bec:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 8000bee:	23d2      	movs	r3, #210	; 0xd2
 8000bf0:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bf2:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000bf4:	9213      	str	r2, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf6:	a808      	add	r0, sp, #32
 8000bf8:	f001 f98c 	bl	8001f14 <HAL_RCC_OscConfig>
 8000bfc:	b998      	cbnz	r0, 8000c26 <SystemClock_Config+0x92>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bfe:	230f      	movs	r3, #15
 8000c00:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c02:	2302      	movs	r3, #2
 8000c04:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c06:	2300      	movs	r3, #0
 8000c08:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c0a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c0e:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c14:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c16:	2105      	movs	r1, #5
 8000c18:	a803      	add	r0, sp, #12
 8000c1a:	f001 fbe7 	bl	80023ec <HAL_RCC_ClockConfig>
 8000c1e:	b920      	cbnz	r0, 8000c2a <SystemClock_Config+0x96>
}
 8000c20:	b015      	add	sp, #84	; 0x54
 8000c22:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000c26:	f7ff ff2d 	bl	8000a84 <Error_Handler>
    Error_Handler();
 8000c2a:	f7ff ff2b 	bl	8000a84 <Error_Handler>
 8000c2e:	bf00      	nop
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40007000 	.word	0x40007000

08000c38 <main>:
{
 8000c38:	b508      	push	{r3, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c3a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c3e:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000c42:	4b27      	ldr	r3, [pc, #156]	; (8000ce0 <main+0xa8>)
 8000c44:	2100      	movs	r1, #0
 8000c46:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000c4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c4e:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000c52:	695a      	ldr	r2, [r3, #20]
 8000c54:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000c58:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c5e:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000c62:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000c66:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000c6a:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000c6e:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8000c72:	e000      	b.n	8000c76 <main+0x3e>
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 8000c74:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000c76:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c7a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000c7e:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8000c82:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8000c86:	4916      	ldr	r1, [pc, #88]	; (8000ce0 <main+0xa8>)
 8000c88:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	3a01      	subs	r2, #1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d1f2      	bne.n	8000c7a <main+0x42>
    } while(sets-- != 0U);
 8000c94:	1e43      	subs	r3, r0, #1
 8000c96:	2800      	cmp	r0, #0
 8000c98:	d1ec      	bne.n	8000c74 <main+0x3c>
 8000c9a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000c9e:	694b      	ldr	r3, [r1, #20]
 8000ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ca4:	614b      	str	r3, [r1, #20]
 8000ca6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000caa:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8000cae:	f000 f995 	bl	8000fdc <HAL_Init>
  SystemClock_Config();
 8000cb2:	f7ff ff6f 	bl	8000b94 <SystemClock_Config>
  MX_GPIO_Init();
 8000cb6:	f7ff fc7d 	bl	80005b4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000cba:	f7ff fee5 	bl	8000a88 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8000cbe:	f7ff feff 	bl	8000ac0 <MX_SPI2_Init>
  MX_I2C3_Init();
 8000cc2:	f7ff ff31 	bl	8000b28 <MX_I2C3_Init>
  MX_TouchGFX_Init();
 8000cc6:	f002 fbe7 	bl	8003498 <MX_TouchGFX_Init>
  XF_initialize(10);
 8000cca:	200a      	movs	r0, #10
 8000ccc:	f004 f92c 	bl	8004f28 <XF_initialize>
  Factory_initialize();
 8000cd0:	f002 fa72 	bl	80031b8 <Factory_initialize>
  Factory_build();
 8000cd4:	f002 fa74 	bl	80031c0 <Factory_build>
  XF_exec();
 8000cd8:	f004 f954 	bl	8004f84 <XF_exec>
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <main+0xa4>
 8000cde:	bf00      	nop
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <HAL_MspInit+0x2c>)
 8000ce8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000cee:	641a      	str	r2, [r3, #64]	; 0x40
 8000cf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cf2:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000cf6:	9200      	str	r2, [sp, #0]
 8000cf8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000cfc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000d00:	645a      	str	r2, [r3, #68]	; 0x44
 8000d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d08:	9301      	str	r3, [sp, #4]
 8000d0a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0c:	b002      	add	sp, #8
 8000d0e:	4770      	bx	lr
 8000d10:	40023800 	.word	0x40023800

08000d14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d14:	b510      	push	{r4, lr}
 8000d16:	b0a8      	sub	sp, #160	; 0xa0
 8000d18:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	9123      	str	r1, [sp, #140]	; 0x8c
 8000d1e:	9124      	str	r1, [sp, #144]	; 0x90
 8000d20:	9125      	str	r1, [sp, #148]	; 0x94
 8000d22:	9126      	str	r1, [sp, #152]	; 0x98
 8000d24:	9127      	str	r1, [sp, #156]	; 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d26:	2284      	movs	r2, #132	; 0x84
 8000d28:	a802      	add	r0, sp, #8
 8000d2a:	f009 facb 	bl	800a2c4 <memset>
  if(hi2c->Instance==I2C3)
 8000d2e:	6822      	ldr	r2, [r4, #0]
 8000d30:	4b18      	ldr	r3, [pc, #96]	; (8000d94 <HAL_I2C_MspInit+0x80>)
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d001      	beq.n	8000d3a <HAL_I2C_MspInit+0x26>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000d36:	b028      	add	sp, #160	; 0xa0
 8000d38:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000d3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d3e:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d40:	a802      	add	r0, sp, #8
 8000d42:	f001 fc2f 	bl	80025a4 <HAL_RCCEx_PeriphCLKConfig>
 8000d46:	bb10      	cbnz	r0, 8000d8e <HAL_I2C_MspInit+0x7a>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d48:	4c13      	ldr	r4, [pc, #76]	; (8000d98 <HAL_I2C_MspInit+0x84>)
 8000d4a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d50:	6323      	str	r3, [r4, #48]	; 0x30
 8000d52:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d58:	9300      	str	r3, [sp, #0]
 8000d5a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000d5c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d60:	9323      	str	r3, [sp, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d62:	2312      	movs	r3, #18
 8000d64:	9324      	str	r3, [sp, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d66:	2301      	movs	r3, #1
 8000d68:	9325      	str	r3, [sp, #148]	; 0x94
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	9326      	str	r3, [sp, #152]	; 0x98
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d6e:	2304      	movs	r3, #4
 8000d70:	9327      	str	r3, [sp, #156]	; 0x9c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d72:	a923      	add	r1, sp, #140	; 0x8c
 8000d74:	4809      	ldr	r0, [pc, #36]	; (8000d9c <HAL_I2C_MspInit+0x88>)
 8000d76:	f000 fa51 	bl	800121c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000d7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d80:	6423      	str	r3, [r4, #64]	; 0x40
 8000d82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d88:	9301      	str	r3, [sp, #4]
 8000d8a:	9b01      	ldr	r3, [sp, #4]
}
 8000d8c:	e7d3      	b.n	8000d36 <HAL_I2C_MspInit+0x22>
      Error_Handler();
 8000d8e:	f7ff fe79 	bl	8000a84 <Error_Handler>
 8000d92:	e7d9      	b.n	8000d48 <HAL_I2C_MspInit+0x34>
 8000d94:	40005c00 	.word	0x40005c00
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40021c00 	.word	0x40021c00

08000da0 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C3)
 8000da0:	6802      	ldr	r2, [r0, #0]
 8000da2:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <HAL_I2C_MspDeInit+0x2c>)
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d000      	beq.n	8000daa <HAL_I2C_MspDeInit+0xa>
 8000da8:	4770      	bx	lr
{
 8000daa:	b510      	push	{r4, lr}
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8000dac:	4a08      	ldr	r2, [pc, #32]	; (8000dd0 <HAL_I2C_MspDeInit+0x30>)
 8000dae:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000db0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000db4:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8000db6:	4c07      	ldr	r4, [pc, #28]	; (8000dd4 <HAL_I2C_MspDeInit+0x34>)
 8000db8:	2180      	movs	r1, #128	; 0x80
 8000dba:	4620      	mov	r0, r4
 8000dbc:	f000 fb2a 	bl	8001414 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8000dc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dc4:	4620      	mov	r0, r4
 8000dc6:	f000 fb25 	bl	8001414 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8000dca:	bd10      	pop	{r4, pc}
 8000dcc:	40005c00 	.word	0x40005c00
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40021c00 	.word	0x40021c00

08000dd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dd8:	b530      	push	{r4, r5, lr}
 8000dda:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	2300      	movs	r3, #0
 8000dde:	9303      	str	r3, [sp, #12]
 8000de0:	9304      	str	r3, [sp, #16]
 8000de2:	9305      	str	r3, [sp, #20]
 8000de4:	9306      	str	r3, [sp, #24]
 8000de6:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI2)
 8000de8:	6802      	ldr	r2, [r0, #0]
 8000dea:	4b1c      	ldr	r3, [pc, #112]	; (8000e5c <HAL_SPI_MspInit+0x84>)
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d001      	beq.n	8000df4 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000df0:	b009      	add	sp, #36	; 0x24
 8000df2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000df4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000df8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000dfe:	641a      	str	r2, [r3, #64]	; 0x40
 8000e00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e02:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000e06:	9200      	str	r2, [sp, #0]
 8000e08:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e10:	631a      	str	r2, [r3, #48]	; 0x30
 8000e12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e14:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000e18:	9201      	str	r2, [sp, #4]
 8000e1a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e1e:	f042 0202 	orr.w	r2, r2, #2
 8000e22:	631a      	str	r2, [r3, #48]	; 0x30
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	9302      	str	r3, [sp, #8]
 8000e2c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8000e2e:	2402      	movs	r4, #2
 8000e30:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e34:	2505      	movs	r5, #5
 8000e36:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8000e38:	a903      	add	r1, sp, #12
 8000e3a:	4809      	ldr	r0, [pc, #36]	; (8000e60 <HAL_SPI_MspInit+0x88>)
 8000e3c:	f000 f9ee 	bl	800121c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000e40:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000e44:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e4e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e50:	a903      	add	r1, sp, #12
 8000e52:	4804      	ldr	r0, [pc, #16]	; (8000e64 <HAL_SPI_MspInit+0x8c>)
 8000e54:	f000 f9e2 	bl	800121c <HAL_GPIO_Init>
}
 8000e58:	e7ca      	b.n	8000df0 <HAL_SPI_MspInit+0x18>
 8000e5a:	bf00      	nop
 8000e5c:	40003800 	.word	0x40003800
 8000e60:	40022000 	.word	0x40022000
 8000e64:	40020400 	.word	0x40020400

08000e68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e68:	b570      	push	{r4, r5, r6, lr}
 8000e6a:	b0aa      	sub	sp, #168	; 0xa8
 8000e6c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6e:	2100      	movs	r1, #0
 8000e70:	9125      	str	r1, [sp, #148]	; 0x94
 8000e72:	9126      	str	r1, [sp, #152]	; 0x98
 8000e74:	9127      	str	r1, [sp, #156]	; 0x9c
 8000e76:	9128      	str	r1, [sp, #160]	; 0xa0
 8000e78:	9129      	str	r1, [sp, #164]	; 0xa4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e7a:	2284      	movs	r2, #132	; 0x84
 8000e7c:	a804      	add	r0, sp, #16
 8000e7e:	f009 fa21 	bl	800a2c4 <memset>
  if(huart->Instance==USART1)
 8000e82:	6822      	ldr	r2, [r4, #0]
 8000e84:	4b21      	ldr	r3, [pc, #132]	; (8000f0c <HAL_UART_MspInit+0xa4>)
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d001      	beq.n	8000e8e <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e8a:	b02a      	add	sp, #168	; 0xa8
 8000e8c:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e8e:	2340      	movs	r3, #64	; 0x40
 8000e90:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e92:	a804      	add	r0, sp, #16
 8000e94:	f001 fb86 	bl	80025a4 <HAL_RCCEx_PeriphCLKConfig>
 8000e98:	2800      	cmp	r0, #0
 8000e9a:	d134      	bne.n	8000f06 <HAL_UART_MspInit+0x9e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e9c:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <HAL_UART_MspInit+0xa8>)
 8000e9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ea0:	f042 0210 	orr.w	r2, r2, #16
 8000ea4:	645a      	str	r2, [r3, #68]	; 0x44
 8000ea6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ea8:	f002 0210 	and.w	r2, r2, #16
 8000eac:	9201      	str	r2, [sp, #4]
 8000eae:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000eb2:	f042 0202 	orr.w	r2, r2, #2
 8000eb6:	631a      	str	r2, [r3, #48]	; 0x30
 8000eb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000eba:	f002 0202 	and.w	r2, r2, #2
 8000ebe:	9202      	str	r2, [sp, #8]
 8000ec0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ec4:	f042 0201 	orr.w	r2, r2, #1
 8000ec8:	631a      	str	r2, [r3, #48]	; 0x30
 8000eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	9303      	str	r3, [sp, #12]
 8000ed2:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000ed4:	2380      	movs	r3, #128	; 0x80
 8000ed6:	9325      	str	r3, [sp, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed8:	2602      	movs	r6, #2
 8000eda:	9626      	str	r6, [sp, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2400      	movs	r4, #0
 8000ede:	9427      	str	r4, [sp, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	9428      	str	r4, [sp, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ee2:	2507      	movs	r5, #7
 8000ee4:	9529      	str	r5, [sp, #164]	; 0xa4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000ee6:	a925      	add	r1, sp, #148	; 0x94
 8000ee8:	480a      	ldr	r0, [pc, #40]	; (8000f14 <HAL_UART_MspInit+0xac>)
 8000eea:	f000 f997 	bl	800121c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000eee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ef2:	9325      	str	r3, [sp, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef4:	9626      	str	r6, [sp, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	9427      	str	r4, [sp, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef8:	9428      	str	r4, [sp, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000efa:	9529      	str	r5, [sp, #164]	; 0xa4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000efc:	a925      	add	r1, sp, #148	; 0x94
 8000efe:	4806      	ldr	r0, [pc, #24]	; (8000f18 <HAL_UART_MspInit+0xb0>)
 8000f00:	f000 f98c 	bl	800121c <HAL_GPIO_Init>
}
 8000f04:	e7c1      	b.n	8000e8a <HAL_UART_MspInit+0x22>
      Error_Handler();
 8000f06:	f7ff fdbd 	bl	8000a84 <Error_Handler>
 8000f0a:	e7c7      	b.n	8000e9c <HAL_UART_MspInit+0x34>
 8000f0c:	40011000 	.word	0x40011000
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40020400 	.word	0x40020400
 8000f18:	40020000 	.word	0x40020000

08000f1c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <NMI_Handler>

08000f1e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f1e:	e7fe      	b.n	8000f1e <HardFault_Handler>

08000f20 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <MemManage_Handler>

08000f22 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f22:	e7fe      	b.n	8000f22 <BusFault_Handler>

08000f24 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <UsageFault_Handler>

08000f26 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f26:	4770      	bx	lr

08000f28 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f28:	4770      	bx	lr

08000f2a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f2a:	4770      	bx	lr

08000f2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f2c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
  // SysTick handler gets called every millisecond (is given by code
  // generated by STM32CubeMX). Check which interval is needed by the
  // XF (typically slower) and call XF_tick() accordingly.
  if (XF_isRunning() &&
 8000f2e:	f004 fa53 	bl	80053d8 <XF_isRunning>
 8000f32:	b910      	cbnz	r0, 8000f3a <SysTick_Handler+0xe>
      (HAL_GetTick() % XF_tickIntervalInMilliseconds()) == 0)
  {
	XF_tick();
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f34:	f000 f864 	bl	8001000 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f38:	bd10      	pop	{r4, pc}
      (HAL_GetTick() % XF_tickIntervalInMilliseconds()) == 0)
 8000f3a:	f000 f86d 	bl	8001018 <HAL_GetTick>
 8000f3e:	4604      	mov	r4, r0
 8000f40:	f004 fa43 	bl	80053ca <XF_tickIntervalInMilliseconds>
 8000f44:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f48:	fb00 4413 	mls	r4, r0, r3, r4
  if (XF_isRunning() &&
 8000f4c:	2c00      	cmp	r4, #0
 8000f4e:	d1f1      	bne.n	8000f34 <SysTick_Handler+0x8>
	XF_tick();
 8000f50:	f004 fa2a 	bl	80053a8 <XF_tick>
 8000f54:	e7ee      	b.n	8000f34 <SysTick_Handler+0x8>
	...

08000f58 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8000f58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8000f5a:	4802      	ldr	r0, [pc, #8]	; (8000f64 <LTDC_IRQHandler+0xc>)
 8000f5c:	f000 ff48 	bl	8001df0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8000f60:	bd08      	pop	{r3, pc}
 8000f62:	bf00      	nop
 8000f64:	20000230 	.word	0x20000230

08000f68 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8000f68:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8000f6a:	4802      	ldr	r0, [pc, #8]	; (8000f74 <DMA2D_IRQHandler+0xc>)
 8000f6c:	f000 f8b8 	bl	80010e0 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8000f70:	bd08      	pop	{r3, pc}
 8000f72:	bf00      	nop
 8000f74:	200002d8 	.word	0x200002d8

08000f78 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <SystemInit+0x18>)
 8000f7a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000f7e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000f82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f8a:	609a      	str	r2, [r3, #8]
#endif
}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f94:	b510      	push	{r4, lr}
 8000f96:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f98:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <HAL_InitTick+0x40>)
 8000f9a:	7818      	ldrb	r0, [r3, #0]
 8000f9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa0:	fbb3 f3f0 	udiv	r3, r3, r0
 8000fa4:	4a0c      	ldr	r2, [pc, #48]	; (8000fd8 <HAL_InitTick+0x44>)
 8000fa6:	6810      	ldr	r0, [r2, #0]
 8000fa8:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fac:	f000 f882 	bl	80010b4 <HAL_SYSTICK_Config>
 8000fb0:	b968      	cbnz	r0, 8000fce <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb2:	2c0f      	cmp	r4, #15
 8000fb4:	d901      	bls.n	8000fba <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	e00a      	b.n	8000fd0 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	4621      	mov	r1, r4
 8000fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc2:	f000 f841 	bl	8001048 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc6:	4b03      	ldr	r3, [pc, #12]	; (8000fd4 <HAL_InitTick+0x40>)
 8000fc8:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000fca:	2000      	movs	r0, #0
 8000fcc:	e000      	b.n	8000fd0 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000fce:	2001      	movs	r0, #1
}
 8000fd0:	bd10      	pop	{r4, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000004 	.word	0x20000004
 8000fd8:	20000000 	.word	0x20000000

08000fdc <HAL_Init>:
{
 8000fdc:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fde:	4a07      	ldr	r2, [pc, #28]	; (8000ffc <HAL_Init+0x20>)
 8000fe0:	6813      	ldr	r3, [r2, #0]
 8000fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe6:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe8:	2003      	movs	r0, #3
 8000fea:	f000 f81b 	bl	8001024 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f7ff ffd0 	bl	8000f94 <HAL_InitTick>
  HAL_MspInit();
 8000ff4:	f7ff fe76 	bl	8000ce4 <HAL_MspInit>
}
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	bd08      	pop	{r3, pc}
 8000ffc:	40023c00 	.word	0x40023c00

08001000 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001000:	4a03      	ldr	r2, [pc, #12]	; (8001010 <HAL_IncTick+0x10>)
 8001002:	6811      	ldr	r1, [r2, #0]
 8001004:	4b03      	ldr	r3, [pc, #12]	; (8001014 <HAL_IncTick+0x14>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	440b      	add	r3, r1
 800100a:	6013      	str	r3, [r2, #0]
}
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	2000033c 	.word	0x2000033c
 8001014:	20000004 	.word	0x20000004

08001018 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001018:	4b01      	ldr	r3, [pc, #4]	; (8001020 <HAL_GetTick+0x8>)
 800101a:	6818      	ldr	r0, [r3, #0]
}
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	2000033c 	.word	0x2000033c

08001024 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001024:	4906      	ldr	r1, [pc, #24]	; (8001040 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8001026:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001028:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800102c:	041b      	lsls	r3, r3, #16
 800102e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001030:	0200      	lsls	r0, r0, #8
 8001032:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001036:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001038:	4a02      	ldr	r2, [pc, #8]	; (8001044 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800103a:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 800103c:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800103e:	4770      	bx	lr
 8001040:	e000ed00 	.word	0xe000ed00
 8001044:	05fa0000 	.word	0x05fa0000

08001048 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001048:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800104a:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <HAL_NVIC_SetPriority+0x60>)
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001052:	f1c3 0c07 	rsb	ip, r3, #7
 8001056:	f1bc 0f04 	cmp.w	ip, #4
 800105a:	bf28      	it	cs
 800105c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001060:	f103 0e04 	add.w	lr, r3, #4
 8001064:	f1be 0f06 	cmp.w	lr, #6
 8001068:	d914      	bls.n	8001094 <HAL_NVIC_SetPriority+0x4c>
 800106a:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800106c:	f04f 3eff 	mov.w	lr, #4294967295
 8001070:	fa0e fc0c 	lsl.w	ip, lr, ip
 8001074:	ea21 010c 	bic.w	r1, r1, ip
 8001078:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800107a:	fa0e f303 	lsl.w	r3, lr, r3
 800107e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001082:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001084:	2800      	cmp	r0, #0
 8001086:	db07      	blt.n	8001098 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001088:	0109      	lsls	r1, r1, #4
 800108a:	b2c9      	uxtb	r1, r1
 800108c:	4b07      	ldr	r3, [pc, #28]	; (80010ac <HAL_NVIC_SetPriority+0x64>)
 800108e:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001090:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001094:	2300      	movs	r3, #0
 8001096:	e7e9      	b.n	800106c <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001098:	f000 000f 	and.w	r0, r0, #15
 800109c:	0109      	lsls	r1, r1, #4
 800109e:	b2c9      	uxtb	r1, r1
 80010a0:	4b03      	ldr	r3, [pc, #12]	; (80010b0 <HAL_NVIC_SetPriority+0x68>)
 80010a2:	5419      	strb	r1, [r3, r0]
 80010a4:	e7f4      	b.n	8001090 <HAL_NVIC_SetPriority+0x48>
 80010a6:	bf00      	nop
 80010a8:	e000ed00 	.word	0xe000ed00
 80010ac:	e000e400 	.word	0xe000e400
 80010b0:	e000ed14 	.word	0xe000ed14

080010b4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b4:	3801      	subs	r0, #1
 80010b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80010ba:	d20b      	bcs.n	80010d4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010bc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80010c0:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c2:	4a05      	ldr	r2, [pc, #20]	; (80010d8 <HAL_SYSTICK_Config+0x24>)
 80010c4:	21f0      	movs	r1, #240	; 0xf0
 80010c6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ca:	2000      	movs	r0, #0
 80010cc:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ce:	2207      	movs	r2, #7
 80010d0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80010d4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <HAL_DMA2D_LineEventCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80010dc:	4770      	bx	lr

080010de <HAL_DMA2D_CLUTLoadingCpltCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80010de:	4770      	bx	lr

080010e0 <HAL_DMA2D_IRQHandler>:
{
 80010e0:	b570      	push	{r4, r5, r6, lr}
 80010e2:	4604      	mov	r4, r0
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80010e4:	6803      	ldr	r3, [r0, #0]
 80010e6:	685d      	ldr	r5, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80010e8:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80010ea:	f015 0f01 	tst.w	r5, #1
 80010ee:	d016      	beq.n	800111e <HAL_DMA2D_IRQHandler+0x3e>
    if ((crflags & DMA2D_IT_TE) != 0U)
 80010f0:	f416 7f80 	tst.w	r6, #256	; 0x100
 80010f4:	d013      	beq.n	800111e <HAL_DMA2D_IRQHandler+0x3e>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010fc:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80010fe:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	63c3      	str	r3, [r0, #60]	; 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001106:	6803      	ldr	r3, [r0, #0]
 8001108:	2201      	movs	r2, #1
 800110a:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800110c:	2304      	movs	r3, #4
 800110e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8001112:	2300      	movs	r3, #0
 8001114:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8001118:	6943      	ldr	r3, [r0, #20]
 800111a:	b103      	cbz	r3, 800111e <HAL_DMA2D_IRQHandler+0x3e>
        hdma2d->XferErrorCallback(hdma2d);
 800111c:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800111e:	f015 0f20 	tst.w	r5, #32
 8001122:	d018      	beq.n	8001156 <HAL_DMA2D_IRQHandler+0x76>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001124:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8001128:	d015      	beq.n	8001156 <HAL_DMA2D_IRQHandler+0x76>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800112a:	6822      	ldr	r2, [r4, #0]
 800112c:	6813      	ldr	r3, [r2, #0]
 800112e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001132:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001134:	6823      	ldr	r3, [r4, #0]
 8001136:	2220      	movs	r2, #32
 8001138:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800113a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800113c:	f043 0302 	orr.w	r3, r3, #2
 8001140:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001142:	2304      	movs	r3, #4
 8001144:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8001148:	2300      	movs	r3, #0
 800114a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 800114e:	6963      	ldr	r3, [r4, #20]
 8001150:	b10b      	cbz	r3, 8001156 <HAL_DMA2D_IRQHandler+0x76>
        hdma2d->XferErrorCallback(hdma2d);
 8001152:	4620      	mov	r0, r4
 8001154:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001156:	f015 0f08 	tst.w	r5, #8
 800115a:	d018      	beq.n	800118e <HAL_DMA2D_IRQHandler+0xae>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800115c:	f416 6f00 	tst.w	r6, #2048	; 0x800
 8001160:	d015      	beq.n	800118e <HAL_DMA2D_IRQHandler+0xae>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001162:	6822      	ldr	r2, [r4, #0]
 8001164:	6813      	ldr	r3, [r2, #0]
 8001166:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800116a:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800116c:	6823      	ldr	r3, [r4, #0]
 800116e:	2208      	movs	r2, #8
 8001170:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001172:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800117a:	2304      	movs	r3, #4
 800117c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8001180:	2300      	movs	r3, #0
 8001182:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8001186:	6963      	ldr	r3, [r4, #20]
 8001188:	b10b      	cbz	r3, 800118e <HAL_DMA2D_IRQHandler+0xae>
        hdma2d->XferErrorCallback(hdma2d);
 800118a:	4620      	mov	r0, r4
 800118c:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800118e:	f015 0f04 	tst.w	r5, #4
 8001192:	d002      	beq.n	800119a <HAL_DMA2D_IRQHandler+0xba>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001194:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8001198:	d120      	bne.n	80011dc <HAL_DMA2D_IRQHandler+0xfc>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800119a:	f015 0f02 	tst.w	r5, #2
 800119e:	d016      	beq.n	80011ce <HAL_DMA2D_IRQHandler+0xee>
    if ((crflags & DMA2D_IT_TC) != 0U)
 80011a0:	f416 7f00 	tst.w	r6, #512	; 0x200
 80011a4:	d013      	beq.n	80011ce <HAL_DMA2D_IRQHandler+0xee>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80011a6:	6822      	ldr	r2, [r4, #0]
 80011a8:	6813      	ldr	r3, [r2, #0]
 80011aa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80011ae:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80011b0:	6823      	ldr	r3, [r4, #0]
 80011b2:	2202      	movs	r2, #2
 80011b4:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80011b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80011b8:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80011ba:	2301      	movs	r3, #1
 80011bc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 80011c0:	2300      	movs	r3, #0
 80011c2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if (hdma2d->XferCpltCallback != NULL)
 80011c6:	6923      	ldr	r3, [r4, #16]
 80011c8:	b10b      	cbz	r3, 80011ce <HAL_DMA2D_IRQHandler+0xee>
        hdma2d->XferCpltCallback(hdma2d);
 80011ca:	4620      	mov	r0, r4
 80011cc:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80011ce:	f015 0f10 	tst.w	r5, #16
 80011d2:	d002      	beq.n	80011da <HAL_DMA2D_IRQHandler+0xfa>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80011d4:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 80011d8:	d10c      	bne.n	80011f4 <HAL_DMA2D_IRQHandler+0x114>
}
 80011da:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80011dc:	6822      	ldr	r2, [r4, #0]
 80011de:	6813      	ldr	r3, [r2, #0]
 80011e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80011e4:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80011e6:	6823      	ldr	r3, [r4, #0]
 80011e8:	2204      	movs	r2, #4
 80011ea:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80011ec:	4620      	mov	r0, r4
 80011ee:	f7ff ff75 	bl	80010dc <HAL_DMA2D_LineEventCallback>
 80011f2:	e7d2      	b.n	800119a <HAL_DMA2D_IRQHandler+0xba>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80011f4:	6822      	ldr	r2, [r4, #0]
 80011f6:	6813      	ldr	r3, [r2, #0]
 80011f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80011fc:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80011fe:	6823      	ldr	r3, [r4, #0]
 8001200:	2210      	movs	r2, #16
 8001202:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001204:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001206:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001208:	2301      	movs	r3, #1
 800120a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 800120e:	2300      	movs	r3, #0
 8001210:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001214:	4620      	mov	r0, r4
 8001216:	f7ff ff62 	bl	80010de <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 800121a:	e7de      	b.n	80011da <HAL_DMA2D_IRQHandler+0xfa>

0800121c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800121c:	2300      	movs	r3, #0
 800121e:	2b0f      	cmp	r3, #15
 8001220:	f200 80ef 	bhi.w	8001402 <HAL_GPIO_Init+0x1e6>
{
 8001224:	b570      	push	{r4, r5, r6, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	e061      	b.n	80012ee <HAL_GPIO_Init+0xd2>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800122a:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800122c:	005e      	lsls	r6, r3, #1
 800122e:	2403      	movs	r4, #3
 8001230:	40b4      	lsls	r4, r6
 8001232:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8001236:	68cc      	ldr	r4, [r1, #12]
 8001238:	40b4      	lsls	r4, r6
 800123a:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800123c:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800123e:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001240:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001244:	684c      	ldr	r4, [r1, #4]
 8001246:	f3c4 1200 	ubfx	r2, r4, #4, #1
 800124a:	409a      	lsls	r2, r3
 800124c:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 800124e:	6042      	str	r2, [r0, #4]
 8001250:	e05b      	b.n	800130a <HAL_GPIO_Init+0xee>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001252:	08dc      	lsrs	r4, r3, #3
 8001254:	3408      	adds	r4, #8
 8001256:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800125a:	f003 0207 	and.w	r2, r3, #7
 800125e:	0095      	lsls	r5, r2, #2
 8001260:	220f      	movs	r2, #15
 8001262:	40aa      	lsls	r2, r5
 8001264:	ea26 0e02 	bic.w	lr, r6, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001268:	690a      	ldr	r2, [r1, #16]
 800126a:	40aa      	lsls	r2, r5
 800126c:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3] = temp;
 8001270:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001274:	e05d      	b.n	8001332 <HAL_GPIO_Init+0x116>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001276:	2209      	movs	r2, #9
 8001278:	e000      	b.n	800127c <HAL_GPIO_Init+0x60>
 800127a:	2200      	movs	r2, #0
 800127c:	fa02 f20e 	lsl.w	r2, r2, lr
 8001280:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2] = temp;
 8001282:	3402      	adds	r4, #2
 8001284:	4d5f      	ldr	r5, [pc, #380]	; (8001404 <HAL_GPIO_Init+0x1e8>)
 8001286:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800128a:	4a5f      	ldr	r2, [pc, #380]	; (8001408 <HAL_GPIO_Init+0x1ec>)
 800128c:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800128e:	ea6f 020c 	mvn.w	r2, ip
 8001292:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001296:	684e      	ldr	r6, [r1, #4]
 8001298:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 800129c:	d001      	beq.n	80012a2 <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 800129e:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 80012a2:	4c59      	ldr	r4, [pc, #356]	; (8001408 <HAL_GPIO_Init+0x1ec>)
 80012a4:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80012a6:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80012a8:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012ac:	684e      	ldr	r6, [r1, #4]
 80012ae:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80012b2:	d001      	beq.n	80012b8 <HAL_GPIO_Init+0x9c>
        {
          temp |= iocurrent;
 80012b4:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 80012b8:	4c53      	ldr	r4, [pc, #332]	; (8001408 <HAL_GPIO_Init+0x1ec>)
 80012ba:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 80012bc:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80012be:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012c2:	684e      	ldr	r6, [r1, #4]
 80012c4:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 80012c8:	d001      	beq.n	80012ce <HAL_GPIO_Init+0xb2>
        {
          temp |= iocurrent;
 80012ca:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 80012ce:	4c4e      	ldr	r4, [pc, #312]	; (8001408 <HAL_GPIO_Init+0x1ec>)
 80012d0:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012d2:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 80012d4:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012d6:	684d      	ldr	r5, [r1, #4]
 80012d8:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 80012dc:	d001      	beq.n	80012e2 <HAL_GPIO_Init+0xc6>
        {
          temp |= iocurrent;
 80012de:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 80012e2:	4c49      	ldr	r4, [pc, #292]	; (8001408 <HAL_GPIO_Init+0x1ec>)
 80012e4:	6022      	str	r2, [r4, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80012e6:	3301      	adds	r3, #1
 80012e8:	2b0f      	cmp	r3, #15
 80012ea:	f200 8088 	bhi.w	80013fe <HAL_GPIO_Init+0x1e2>
    ioposition = ((uint32_t)0x01) << position;
 80012ee:	2201      	movs	r2, #1
 80012f0:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012f2:	680c      	ldr	r4, [r1, #0]
 80012f4:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 80012f8:	ea32 0404 	bics.w	r4, r2, r4
 80012fc:	d1f3      	bne.n	80012e6 <HAL_GPIO_Init+0xca>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012fe:	684c      	ldr	r4, [r1, #4]
 8001300:	f004 0403 	and.w	r4, r4, #3
 8001304:	3c01      	subs	r4, #1
 8001306:	2c01      	cmp	r4, #1
 8001308:	d98f      	bls.n	800122a <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800130a:	684a      	ldr	r2, [r1, #4]
 800130c:	f002 0203 	and.w	r2, r2, #3
 8001310:	2a03      	cmp	r2, #3
 8001312:	d009      	beq.n	8001328 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->PUPDR;
 8001314:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001316:	005d      	lsls	r5, r3, #1
 8001318:	2203      	movs	r2, #3
 800131a:	40aa      	lsls	r2, r5
 800131c:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001320:	688a      	ldr	r2, [r1, #8]
 8001322:	40aa      	lsls	r2, r5
 8001324:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001326:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001328:	684a      	ldr	r2, [r1, #4]
 800132a:	f002 0203 	and.w	r2, r2, #3
 800132e:	2a02      	cmp	r2, #2
 8001330:	d08f      	beq.n	8001252 <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 8001332:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001334:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001338:	2203      	movs	r2, #3
 800133a:	fa02 f20e 	lsl.w	r2, r2, lr
 800133e:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001342:	684a      	ldr	r2, [r1, #4]
 8001344:	f002 0203 	and.w	r2, r2, #3
 8001348:	fa02 f20e 	lsl.w	r2, r2, lr
 800134c:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800134e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001350:	684a      	ldr	r2, [r1, #4]
 8001352:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8001356:	d0c6      	beq.n	80012e6 <HAL_GPIO_Init+0xca>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001358:	4a2c      	ldr	r2, [pc, #176]	; (800140c <HAL_GPIO_Init+0x1f0>)
 800135a:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800135c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001360:	6454      	str	r4, [r2, #68]	; 0x44
 8001362:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001364:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001368:	9201      	str	r2, [sp, #4]
 800136a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 800136c:	089c      	lsrs	r4, r3, #2
 800136e:	1ca5      	adds	r5, r4, #2
 8001370:	4a24      	ldr	r2, [pc, #144]	; (8001404 <HAL_GPIO_Init+0x1e8>)
 8001372:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001376:	f003 0203 	and.w	r2, r3, #3
 800137a:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 800137e:	220f      	movs	r2, #15
 8001380:	fa02 f20e 	lsl.w	r2, r2, lr
 8001384:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001388:	4a21      	ldr	r2, [pc, #132]	; (8001410 <HAL_GPIO_Init+0x1f4>)
 800138a:	4290      	cmp	r0, r2
 800138c:	f43f af75 	beq.w	800127a <HAL_GPIO_Init+0x5e>
 8001390:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001394:	4290      	cmp	r0, r2
 8001396:	d022      	beq.n	80013de <HAL_GPIO_Init+0x1c2>
 8001398:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800139c:	4290      	cmp	r0, r2
 800139e:	d020      	beq.n	80013e2 <HAL_GPIO_Init+0x1c6>
 80013a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013a4:	4290      	cmp	r0, r2
 80013a6:	d01e      	beq.n	80013e6 <HAL_GPIO_Init+0x1ca>
 80013a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013ac:	4290      	cmp	r0, r2
 80013ae:	d01c      	beq.n	80013ea <HAL_GPIO_Init+0x1ce>
 80013b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013b4:	4290      	cmp	r0, r2
 80013b6:	d01a      	beq.n	80013ee <HAL_GPIO_Init+0x1d2>
 80013b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013bc:	4290      	cmp	r0, r2
 80013be:	d018      	beq.n	80013f2 <HAL_GPIO_Init+0x1d6>
 80013c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013c4:	4290      	cmp	r0, r2
 80013c6:	d016      	beq.n	80013f6 <HAL_GPIO_Init+0x1da>
 80013c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013cc:	4290      	cmp	r0, r2
 80013ce:	d014      	beq.n	80013fa <HAL_GPIO_Init+0x1de>
 80013d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013d4:	4290      	cmp	r0, r2
 80013d6:	f43f af4e 	beq.w	8001276 <HAL_GPIO_Init+0x5a>
 80013da:	220a      	movs	r2, #10
 80013dc:	e74e      	b.n	800127c <HAL_GPIO_Init+0x60>
 80013de:	2201      	movs	r2, #1
 80013e0:	e74c      	b.n	800127c <HAL_GPIO_Init+0x60>
 80013e2:	2202      	movs	r2, #2
 80013e4:	e74a      	b.n	800127c <HAL_GPIO_Init+0x60>
 80013e6:	2203      	movs	r2, #3
 80013e8:	e748      	b.n	800127c <HAL_GPIO_Init+0x60>
 80013ea:	2204      	movs	r2, #4
 80013ec:	e746      	b.n	800127c <HAL_GPIO_Init+0x60>
 80013ee:	2205      	movs	r2, #5
 80013f0:	e744      	b.n	800127c <HAL_GPIO_Init+0x60>
 80013f2:	2206      	movs	r2, #6
 80013f4:	e742      	b.n	800127c <HAL_GPIO_Init+0x60>
 80013f6:	2207      	movs	r2, #7
 80013f8:	e740      	b.n	800127c <HAL_GPIO_Init+0x60>
 80013fa:	2208      	movs	r2, #8
 80013fc:	e73e      	b.n	800127c <HAL_GPIO_Init+0x60>
      }
    }
  }
}
 80013fe:	b002      	add	sp, #8
 8001400:	bd70      	pop	{r4, r5, r6, pc}
 8001402:	4770      	bx	lr
 8001404:	40013800 	.word	0x40013800
 8001408:	40013c00 	.word	0x40013c00
 800140c:	40023800 	.word	0x40023800
 8001410:	40020000 	.word	0x40020000

08001414 <HAL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001414:	2300      	movs	r3, #0
 8001416:	2b0f      	cmp	r3, #15
 8001418:	f200 809b 	bhi.w	8001552 <HAL_GPIO_DeInit+0x13e>
{
 800141c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800141e:	e02d      	b.n	800147c <HAL_GPIO_DeInit+0x68>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8001420:	2509      	movs	r5, #9
 8001422:	e000      	b.n	8001426 <HAL_GPIO_DeInit+0x12>
 8001424:	2500      	movs	r5, #0
 8001426:	fa05 fc0c 	lsl.w	ip, r5, ip
 800142a:	45a4      	cmp	ip, r4
 800142c:	d075      	beq.n	800151a <HAL_GPIO_DeInit+0x106>
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800142e:	6804      	ldr	r4, [r0, #0]
 8001430:	005d      	lsls	r5, r3, #1
 8001432:	f04f 0c03 	mov.w	ip, #3
 8001436:	fa0c fc05 	lsl.w	ip, ip, r5
 800143a:	ea24 040c 	bic.w	r4, r4, ip
 800143e:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001440:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8001444:	f10e 0e08 	add.w	lr, lr, #8
 8001448:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 800144c:	f003 0507 	and.w	r5, r3, #7
 8001450:	00ae      	lsls	r6, r5, #2
 8001452:	250f      	movs	r5, #15
 8001454:	40b5      	lsls	r5, r6
 8001456:	ea24 0405 	bic.w	r4, r4, r5
 800145a:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800145e:	68c4      	ldr	r4, [r0, #12]
 8001460:	ea24 040c 	bic.w	r4, r4, ip
 8001464:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001466:	6844      	ldr	r4, [r0, #4]
 8001468:	ea24 0202 	bic.w	r2, r4, r2
 800146c:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800146e:	6882      	ldr	r2, [r0, #8]
 8001470:	ea22 020c 	bic.w	r2, r2, ip
 8001474:	6082      	str	r2, [r0, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001476:	3301      	adds	r3, #1
 8001478:	2b0f      	cmp	r3, #15
 800147a:	d869      	bhi.n	8001550 <HAL_GPIO_DeInit+0x13c>
    ioposition = ((uint32_t)0x01) << position;
 800147c:	2201      	movs	r2, #1
 800147e:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
 8001480:	ea02 0601 	and.w	r6, r2, r1
    if(iocurrent == ioposition)
 8001484:	ea32 0401 	bics.w	r4, r2, r1
 8001488:	d1f5      	bne.n	8001476 <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2];
 800148a:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 800148e:	f10e 0502 	add.w	r5, lr, #2
 8001492:	4c30      	ldr	r4, [pc, #192]	; (8001554 <HAL_GPIO_DeInit+0x140>)
 8001494:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001498:	f003 0c03 	and.w	ip, r3, #3
 800149c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80014a0:	250f      	movs	r5, #15
 80014a2:	fa05 f70c 	lsl.w	r7, r5, ip
 80014a6:	403c      	ands	r4, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80014a8:	4d2b      	ldr	r5, [pc, #172]	; (8001558 <HAL_GPIO_DeInit+0x144>)
 80014aa:	42a8      	cmp	r0, r5
 80014ac:	d0ba      	beq.n	8001424 <HAL_GPIO_DeInit+0x10>
 80014ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80014b2:	42a8      	cmp	r0, r5
 80014b4:	d021      	beq.n	80014fa <HAL_GPIO_DeInit+0xe6>
 80014b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80014ba:	42a8      	cmp	r0, r5
 80014bc:	d01f      	beq.n	80014fe <HAL_GPIO_DeInit+0xea>
 80014be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80014c2:	42a8      	cmp	r0, r5
 80014c4:	d01d      	beq.n	8001502 <HAL_GPIO_DeInit+0xee>
 80014c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80014ca:	42a8      	cmp	r0, r5
 80014cc:	d01b      	beq.n	8001506 <HAL_GPIO_DeInit+0xf2>
 80014ce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80014d2:	42a8      	cmp	r0, r5
 80014d4:	d019      	beq.n	800150a <HAL_GPIO_DeInit+0xf6>
 80014d6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80014da:	42a8      	cmp	r0, r5
 80014dc:	d017      	beq.n	800150e <HAL_GPIO_DeInit+0xfa>
 80014de:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80014e2:	42a8      	cmp	r0, r5
 80014e4:	d015      	beq.n	8001512 <HAL_GPIO_DeInit+0xfe>
 80014e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80014ea:	42a8      	cmp	r0, r5
 80014ec:	d013      	beq.n	8001516 <HAL_GPIO_DeInit+0x102>
 80014ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80014f2:	42a8      	cmp	r0, r5
 80014f4:	d094      	beq.n	8001420 <HAL_GPIO_DeInit+0xc>
 80014f6:	250a      	movs	r5, #10
 80014f8:	e795      	b.n	8001426 <HAL_GPIO_DeInit+0x12>
 80014fa:	2501      	movs	r5, #1
 80014fc:	e793      	b.n	8001426 <HAL_GPIO_DeInit+0x12>
 80014fe:	2502      	movs	r5, #2
 8001500:	e791      	b.n	8001426 <HAL_GPIO_DeInit+0x12>
 8001502:	2503      	movs	r5, #3
 8001504:	e78f      	b.n	8001426 <HAL_GPIO_DeInit+0x12>
 8001506:	2504      	movs	r5, #4
 8001508:	e78d      	b.n	8001426 <HAL_GPIO_DeInit+0x12>
 800150a:	2505      	movs	r5, #5
 800150c:	e78b      	b.n	8001426 <HAL_GPIO_DeInit+0x12>
 800150e:	2506      	movs	r5, #6
 8001510:	e789      	b.n	8001426 <HAL_GPIO_DeInit+0x12>
 8001512:	2507      	movs	r5, #7
 8001514:	e787      	b.n	8001426 <HAL_GPIO_DeInit+0x12>
 8001516:	2508      	movs	r5, #8
 8001518:	e785      	b.n	8001426 <HAL_GPIO_DeInit+0x12>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800151a:	4c10      	ldr	r4, [pc, #64]	; (800155c <HAL_GPIO_DeInit+0x148>)
 800151c:	6825      	ldr	r5, [r4, #0]
 800151e:	ea25 0506 	bic.w	r5, r5, r6
 8001522:	6025      	str	r5, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001524:	6865      	ldr	r5, [r4, #4]
 8001526:	ea25 0506 	bic.w	r5, r5, r6
 800152a:	6065      	str	r5, [r4, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800152c:	68e5      	ldr	r5, [r4, #12]
 800152e:	ea25 0506 	bic.w	r5, r5, r6
 8001532:	60e5      	str	r5, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001534:	68a5      	ldr	r5, [r4, #8]
 8001536:	ea25 0606 	bic.w	r6, r5, r6
 800153a:	60a6      	str	r6, [r4, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800153c:	4e05      	ldr	r6, [pc, #20]	; (8001554 <HAL_GPIO_DeInit+0x140>)
 800153e:	f10e 0402 	add.w	r4, lr, #2
 8001542:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 8001546:	ea25 0507 	bic.w	r5, r5, r7
 800154a:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
 800154e:	e76e      	b.n	800142e <HAL_GPIO_DeInit+0x1a>
    }
  }
}
 8001550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001552:	4770      	bx	lr
 8001554:	40013800 	.word	0x40013800
 8001558:	40020000 	.word	0x40020000
 800155c:	40013c00 	.word	0x40013c00

08001560 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001560:	b10a      	cbz	r2, 8001566 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001562:	6181      	str	r1, [r0, #24]
 8001564:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001566:	0409      	lsls	r1, r1, #16
 8001568:	6181      	str	r1, [r0, #24]
  }
}
 800156a:	4770      	bx	lr

0800156c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800156c:	6803      	ldr	r3, [r0, #0]
 800156e:	699a      	ldr	r2, [r3, #24]
 8001570:	f012 0f02 	tst.w	r2, #2
 8001574:	d001      	beq.n	800157a <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001576:	2200      	movs	r2, #0
 8001578:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800157a:	6803      	ldr	r3, [r0, #0]
 800157c:	699a      	ldr	r2, [r3, #24]
 800157e:	f012 0f01 	tst.w	r2, #1
 8001582:	d103      	bne.n	800158c <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001584:	699a      	ldr	r2, [r3, #24]
 8001586:	f042 0201 	orr.w	r2, r2, #1
 800158a:	619a      	str	r2, [r3, #24]
  }
}
 800158c:	4770      	bx	lr

0800158e <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800158e:	b410      	push	{r4}
 8001590:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001592:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001596:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800159a:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800159c:	4321      	orrs	r1, r4
 800159e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80015a2:	6802      	ldr	r2, [r0, #0]
 80015a4:	6853      	ldr	r3, [r2, #4]
 80015a6:	0d64      	lsrs	r4, r4, #21
 80015a8:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 80015ac:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 80015b0:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 80015b4:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 80015b8:	f044 0403 	orr.w	r4, r4, #3
 80015bc:	ea23 0404 	bic.w	r4, r3, r4
 80015c0:	4321      	orrs	r1, r4
 80015c2:	6051      	str	r1, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80015c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <I2C_IsErrorOccurred>:
{
 80015ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015ce:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 80015d0:	6803      	ldr	r3, [r0, #0]
 80015d2:	699f      	ldr	r7, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80015d4:	f017 0710 	ands.w	r7, r7, #16
 80015d8:	d04e      	beq.n	8001678 <I2C_IsErrorOccurred+0xae>
 80015da:	460e      	mov	r6, r1
 80015dc:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015de:	2210      	movs	r2, #16
 80015e0:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80015e2:	2500      	movs	r5, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80015e4:	6823      	ldr	r3, [r4, #0]
 80015e6:	6998      	ldr	r0, [r3, #24]
 80015e8:	f010 0f20 	tst.w	r0, #32
 80015ec:	d13d      	bne.n	800166a <I2C_IsErrorOccurred+0xa0>
 80015ee:	2d00      	cmp	r5, #0
 80015f0:	d13b      	bne.n	800166a <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 80015f2:	f1b6 3fff 	cmp.w	r6, #4294967295
 80015f6:	d0f5      	beq.n	80015e4 <I2C_IsErrorOccurred+0x1a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80015f8:	f7ff fd0e 	bl	8001018 <HAL_GetTick>
 80015fc:	eba0 0008 	sub.w	r0, r0, r8
 8001600:	42b0      	cmp	r0, r6
 8001602:	d801      	bhi.n	8001608 <I2C_IsErrorOccurred+0x3e>
 8001604:	2e00      	cmp	r6, #0
 8001606:	d1ed      	bne.n	80015e4 <I2C_IsErrorOccurred+0x1a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001608:	6821      	ldr	r1, [r4, #0]
 800160a:	684a      	ldr	r2, [r1, #4]
 800160c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 8001610:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8001614:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001616:	6988      	ldr	r0, [r1, #24]
 8001618:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800161c:	d004      	beq.n	8001628 <I2C_IsErrorOccurred+0x5e>
              (tmp2 != HAL_I2C_MODE_SLAVE))
 800161e:	3b20      	subs	r3, #32
 8001620:	bf18      	it	ne
 8001622:	2301      	movne	r3, #1
              (tmp1 != I2C_CR2_STOP) && \
 8001624:	b902      	cbnz	r2, 8001628 <I2C_IsErrorOccurred+0x5e>
 8001626:	b9c3      	cbnz	r3, 800165a <I2C_IsErrorOccurred+0x90>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001628:	6823      	ldr	r3, [r4, #0]
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	f013 0f20 	tst.w	r3, #32
 8001630:	d1d8      	bne.n	80015e4 <I2C_IsErrorOccurred+0x1a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001632:	f7ff fcf1 	bl	8001018 <HAL_GetTick>
 8001636:	eba0 0008 	sub.w	r0, r0, r8
 800163a:	2819      	cmp	r0, #25
 800163c:	d9f4      	bls.n	8001628 <I2C_IsErrorOccurred+0x5e>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800163e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001640:	f043 0320 	orr.w	r3, r3, #32
 8001644:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001646:	2320      	movs	r3, #32
 8001648:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800164c:	2300      	movs	r3, #0
 800164e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
              __HAL_UNLOCK(hi2c);
 8001652:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
              status = HAL_ERROR;
 8001656:	2501      	movs	r5, #1
 8001658:	e7e6      	b.n	8001628 <I2C_IsErrorOccurred+0x5e>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800165a:	684b      	ldr	r3, [r1, #4]
 800165c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001660:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 8001662:	f7ff fcd9 	bl	8001018 <HAL_GetTick>
 8001666:	4680      	mov	r8, r0
 8001668:	e7de      	b.n	8001628 <I2C_IsErrorOccurred+0x5e>
    if (status == HAL_OK)
 800166a:	2d00      	cmp	r5, #0
 800166c:	d140      	bne.n	80016f0 <I2C_IsErrorOccurred+0x126>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800166e:	2220      	movs	r2, #32
 8001670:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8001672:	2704      	movs	r7, #4
    status = HAL_ERROR;
 8001674:	2501      	movs	r5, #1
 8001676:	e000      	b.n	800167a <I2C_IsErrorOccurred+0xb0>
  HAL_StatusTypeDef status = HAL_OK;
 8001678:	2500      	movs	r5, #0
  itflag = hi2c->Instance->ISR;
 800167a:	6822      	ldr	r2, [r4, #0]
 800167c:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800167e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001682:	d005      	beq.n	8001690 <I2C_IsErrorOccurred+0xc6>
    error_code |= HAL_I2C_ERROR_BERR;
 8001684:	f047 0701 	orr.w	r7, r7, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001688:	f44f 7180 	mov.w	r1, #256	; 0x100
 800168c:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 800168e:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001690:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001694:	d006      	beq.n	80016a4 <I2C_IsErrorOccurred+0xda>
    error_code |= HAL_I2C_ERROR_OVR;
 8001696:	f047 0708 	orr.w	r7, r7, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800169a:	6822      	ldr	r2, [r4, #0]
 800169c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016a0:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80016a2:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80016a4:	f413 7f00 	tst.w	r3, #512	; 0x200
 80016a8:	d024      	beq.n	80016f4 <I2C_IsErrorOccurred+0x12a>
    error_code |= HAL_I2C_ERROR_ARLO;
 80016aa:	f047 0702 	orr.w	r7, r7, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80016ae:	6823      	ldr	r3, [r4, #0]
 80016b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016b4:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 80016b6:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 80016b8:	4620      	mov	r0, r4
 80016ba:	f7ff ff57 	bl	800156c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80016be:	6822      	ldr	r2, [r4, #0]
 80016c0:	6853      	ldr	r3, [r2, #4]
 80016c2:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80016c6:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80016ca:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80016ce:	f023 0301 	bic.w	r3, r3, #1
 80016d2:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 80016d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80016d6:	431f      	orrs	r7, r3
 80016d8:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80016da:	2320      	movs	r3, #32
 80016dc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80016e6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80016ea:	4628      	mov	r0, r5
 80016ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    error_code |= HAL_I2C_ERROR_AF;
 80016f0:	2704      	movs	r7, #4
 80016f2:	e7c2      	b.n	800167a <I2C_IsErrorOccurred+0xb0>
  if (status != HAL_OK)
 80016f4:	2d00      	cmp	r5, #0
 80016f6:	d0f8      	beq.n	80016ea <I2C_IsErrorOccurred+0x120>
 80016f8:	e7de      	b.n	80016b8 <I2C_IsErrorOccurred+0xee>

080016fa <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80016fa:	b570      	push	{r4, r5, r6, lr}
 80016fc:	4604      	mov	r4, r0
 80016fe:	460d      	mov	r5, r1
 8001700:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001702:	6823      	ldr	r3, [r4, #0]
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	f013 0f02 	tst.w	r3, #2
 800170a:	d11d      	bne.n	8001748 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800170c:	4632      	mov	r2, r6
 800170e:	4629      	mov	r1, r5
 8001710:	4620      	mov	r0, r4
 8001712:	f7ff ff5a 	bl	80015ca <I2C_IsErrorOccurred>
 8001716:	b9c8      	cbnz	r0, 800174c <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8001718:	f1b5 3fff 	cmp.w	r5, #4294967295
 800171c:	d0f1      	beq.n	8001702 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800171e:	f7ff fc7b 	bl	8001018 <HAL_GetTick>
 8001722:	1b80      	subs	r0, r0, r6
 8001724:	42a8      	cmp	r0, r5
 8001726:	d801      	bhi.n	800172c <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8001728:	2d00      	cmp	r5, #0
 800172a:	d1ea      	bne.n	8001702 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800172c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800172e:	f043 0320 	orr.w	r3, r3, #32
 8001732:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001734:	2320      	movs	r3, #32
 8001736:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800173a:	2300      	movs	r3, #0
 800173c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001740:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8001744:	2001      	movs	r0, #1
 8001746:	e000      	b.n	800174a <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8001748:	2000      	movs	r0, #0
}
 800174a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800174c:	2001      	movs	r0, #1
 800174e:	e7fc      	b.n	800174a <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08001750 <I2C_WaitOnFlagUntilTimeout>:
{
 8001750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001754:	4606      	mov	r6, r0
 8001756:	4688      	mov	r8, r1
 8001758:	4617      	mov	r7, r2
 800175a:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800175c:	6834      	ldr	r4, [r6, #0]
 800175e:	69a4      	ldr	r4, [r4, #24]
 8001760:	ea38 0304 	bics.w	r3, r8, r4
 8001764:	bf0c      	ite	eq
 8001766:	f04f 0c01 	moveq.w	ip, #1
 800176a:	f04f 0c00 	movne.w	ip, #0
 800176e:	45bc      	cmp	ip, r7
 8001770:	d118      	bne.n	80017a4 <I2C_WaitOnFlagUntilTimeout+0x54>
    if (Timeout != HAL_MAX_DELAY)
 8001772:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001776:	d0f1      	beq.n	800175c <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001778:	f7ff fc4e 	bl	8001018 <HAL_GetTick>
 800177c:	9b06      	ldr	r3, [sp, #24]
 800177e:	1ac0      	subs	r0, r0, r3
 8001780:	42a8      	cmp	r0, r5
 8001782:	d801      	bhi.n	8001788 <I2C_WaitOnFlagUntilTimeout+0x38>
 8001784:	2d00      	cmp	r5, #0
 8001786:	d1e9      	bne.n	800175c <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001788:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800178a:	f043 0320 	orr.w	r3, r3, #32
 800178e:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001790:	2320      	movs	r3, #32
 8001792:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001796:	2300      	movs	r3, #0
 8001798:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800179c:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 80017a0:	2001      	movs	r0, #1
 80017a2:	e000      	b.n	80017a6 <I2C_WaitOnFlagUntilTimeout+0x56>
  return HAL_OK;
 80017a4:	2000      	movs	r0, #0
}
 80017a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080017ac <I2C_RequestMemoryWrite>:
{
 80017ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	4604      	mov	r4, r0
 80017b4:	4690      	mov	r8, r2
 80017b6:	461d      	mov	r5, r3
 80017b8:	9e08      	ldr	r6, [sp, #32]
 80017ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80017bc:	4b19      	ldr	r3, [pc, #100]	; (8001824 <I2C_RequestMemoryWrite+0x78>)
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017c4:	b2ea      	uxtb	r2, r5
 80017c6:	f7ff fee2 	bl	800158e <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80017ca:	463a      	mov	r2, r7
 80017cc:	4631      	mov	r1, r6
 80017ce:	4620      	mov	r0, r4
 80017d0:	f7ff ff93 	bl	80016fa <I2C_WaitOnTXISFlagUntilTimeout>
 80017d4:	b9f8      	cbnz	r0, 8001816 <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80017d6:	2d01      	cmp	r5, #1
 80017d8:	d10e      	bne.n	80017f8 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80017da:	6823      	ldr	r3, [r4, #0]
 80017dc:	fa5f f288 	uxtb.w	r2, r8
 80017e0:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80017e2:	9700      	str	r7, [sp, #0]
 80017e4:	4633      	mov	r3, r6
 80017e6:	2200      	movs	r2, #0
 80017e8:	2180      	movs	r1, #128	; 0x80
 80017ea:	4620      	mov	r0, r4
 80017ec:	f7ff ffb0 	bl	8001750 <I2C_WaitOnFlagUntilTimeout>
 80017f0:	b9a8      	cbnz	r0, 800181e <I2C_RequestMemoryWrite+0x72>
}
 80017f2:	b002      	add	sp, #8
 80017f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80017f8:	6823      	ldr	r3, [r4, #0]
 80017fa:	ea4f 2218 	mov.w	r2, r8, lsr #8
 80017fe:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001800:	463a      	mov	r2, r7
 8001802:	4631      	mov	r1, r6
 8001804:	4620      	mov	r0, r4
 8001806:	f7ff ff78 	bl	80016fa <I2C_WaitOnTXISFlagUntilTimeout>
 800180a:	b930      	cbnz	r0, 800181a <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800180c:	6823      	ldr	r3, [r4, #0]
 800180e:	fa5f f288 	uxtb.w	r2, r8
 8001812:	629a      	str	r2, [r3, #40]	; 0x28
 8001814:	e7e5      	b.n	80017e2 <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 8001816:	2001      	movs	r0, #1
 8001818:	e7eb      	b.n	80017f2 <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 800181a:	2001      	movs	r0, #1
 800181c:	e7e9      	b.n	80017f2 <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 800181e:	2001      	movs	r0, #1
 8001820:	e7e7      	b.n	80017f2 <I2C_RequestMemoryWrite+0x46>
 8001822:	bf00      	nop
 8001824:	80002000 	.word	0x80002000

08001828 <I2C_RequestMemoryRead>:
{
 8001828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	4604      	mov	r4, r0
 8001830:	4690      	mov	r8, r2
 8001832:	461d      	mov	r5, r3
 8001834:	9e08      	ldr	r6, [sp, #32]
 8001836:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001838:	4b18      	ldr	r3, [pc, #96]	; (800189c <I2C_RequestMemoryRead+0x74>)
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	2300      	movs	r3, #0
 800183e:	b2ea      	uxtb	r2, r5
 8001840:	f7ff fea5 	bl	800158e <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001844:	463a      	mov	r2, r7
 8001846:	4631      	mov	r1, r6
 8001848:	4620      	mov	r0, r4
 800184a:	f7ff ff56 	bl	80016fa <I2C_WaitOnTXISFlagUntilTimeout>
 800184e:	b9f8      	cbnz	r0, 8001890 <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001850:	2d01      	cmp	r5, #1
 8001852:	d10e      	bne.n	8001872 <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001854:	6823      	ldr	r3, [r4, #0]
 8001856:	fa5f f288 	uxtb.w	r2, r8
 800185a:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800185c:	9700      	str	r7, [sp, #0]
 800185e:	4633      	mov	r3, r6
 8001860:	2200      	movs	r2, #0
 8001862:	2140      	movs	r1, #64	; 0x40
 8001864:	4620      	mov	r0, r4
 8001866:	f7ff ff73 	bl	8001750 <I2C_WaitOnFlagUntilTimeout>
 800186a:	b9a8      	cbnz	r0, 8001898 <I2C_RequestMemoryRead+0x70>
}
 800186c:	b002      	add	sp, #8
 800186e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001872:	6823      	ldr	r3, [r4, #0]
 8001874:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8001878:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800187a:	463a      	mov	r2, r7
 800187c:	4631      	mov	r1, r6
 800187e:	4620      	mov	r0, r4
 8001880:	f7ff ff3b 	bl	80016fa <I2C_WaitOnTXISFlagUntilTimeout>
 8001884:	b930      	cbnz	r0, 8001894 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001886:	6823      	ldr	r3, [r4, #0]
 8001888:	fa5f f288 	uxtb.w	r2, r8
 800188c:	629a      	str	r2, [r3, #40]	; 0x28
 800188e:	e7e5      	b.n	800185c <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 8001890:	2001      	movs	r0, #1
 8001892:	e7eb      	b.n	800186c <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 8001894:	2001      	movs	r0, #1
 8001896:	e7e9      	b.n	800186c <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 8001898:	2001      	movs	r0, #1
 800189a:	e7e7      	b.n	800186c <I2C_RequestMemoryRead+0x44>
 800189c:	80002000 	.word	0x80002000

080018a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80018a0:	b570      	push	{r4, r5, r6, lr}
 80018a2:	4605      	mov	r5, r0
 80018a4:	460c      	mov	r4, r1
 80018a6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018a8:	682b      	ldr	r3, [r5, #0]
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	f013 0f20 	tst.w	r3, #32
 80018b0:	d11a      	bne.n	80018e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80018b2:	4632      	mov	r2, r6
 80018b4:	4621      	mov	r1, r4
 80018b6:	4628      	mov	r0, r5
 80018b8:	f7ff fe87 	bl	80015ca <I2C_IsErrorOccurred>
 80018bc:	b9b0      	cbnz	r0, 80018ec <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018be:	f7ff fbab 	bl	8001018 <HAL_GetTick>
 80018c2:	1b80      	subs	r0, r0, r6
 80018c4:	42a0      	cmp	r0, r4
 80018c6:	d801      	bhi.n	80018cc <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 80018c8:	2c00      	cmp	r4, #0
 80018ca:	d1ed      	bne.n	80018a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018cc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80018ce:	f043 0320 	orr.w	r3, r3, #32
 80018d2:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80018d4:	2320      	movs	r3, #32
 80018d6:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80018da:	2300      	movs	r3, #0
 80018dc:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80018e0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 80018e4:	2001      	movs	r0, #1
}
 80018e6:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80018e8:	2000      	movs	r0, #0
 80018ea:	e7fc      	b.n	80018e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 80018ec:	2001      	movs	r0, #1
 80018ee:	e7fa      	b.n	80018e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

080018f0 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80018f0:	2800      	cmp	r0, #0
 80018f2:	d057      	beq.n	80019a4 <HAL_I2C_Init+0xb4>
{
 80018f4:	b510      	push	{r4, lr}
 80018f6:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018f8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d041      	beq.n	8001984 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001900:	2324      	movs	r3, #36	; 0x24
 8001902:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001906:	6822      	ldr	r2, [r4, #0]
 8001908:	6813      	ldr	r3, [r2, #0]
 800190a:	f023 0301 	bic.w	r3, r3, #1
 800190e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001910:	6863      	ldr	r3, [r4, #4]
 8001912:	6822      	ldr	r2, [r4, #0]
 8001914:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001918:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800191a:	6822      	ldr	r2, [r4, #0]
 800191c:	6893      	ldr	r3, [r2, #8]
 800191e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001922:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001924:	68e3      	ldr	r3, [r4, #12]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d031      	beq.n	800198e <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800192a:	68a3      	ldr	r3, [r4, #8]
 800192c:	6822      	ldr	r2, [r4, #0]
 800192e:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8001932:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001934:	68e3      	ldr	r3, [r4, #12]
 8001936:	2b02      	cmp	r3, #2
 8001938:	d02f      	beq.n	800199a <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800193a:	6822      	ldr	r2, [r4, #0]
 800193c:	6851      	ldr	r1, [r2, #4]
 800193e:	4b1a      	ldr	r3, [pc, #104]	; (80019a8 <HAL_I2C_Init+0xb8>)
 8001940:	430b      	orrs	r3, r1
 8001942:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001944:	6822      	ldr	r2, [r4, #0]
 8001946:	68d3      	ldr	r3, [r2, #12]
 8001948:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800194c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800194e:	6923      	ldr	r3, [r4, #16]
 8001950:	6962      	ldr	r2, [r4, #20]
 8001952:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001954:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001956:	6822      	ldr	r2, [r4, #0]
 8001958:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800195c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800195e:	69e3      	ldr	r3, [r4, #28]
 8001960:	6a21      	ldr	r1, [r4, #32]
 8001962:	6822      	ldr	r2, [r4, #0]
 8001964:	430b      	orrs	r3, r1
 8001966:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001968:	6822      	ldr	r2, [r4, #0]
 800196a:	6813      	ldr	r3, [r2, #0]
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001972:	2000      	movs	r0, #0
 8001974:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001976:	2320      	movs	r3, #32
 8001978:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800197c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800197e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8001982:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001984:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001988:	f7ff f9c4 	bl	8000d14 <HAL_I2C_MspInit>
 800198c:	e7b8      	b.n	8001900 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800198e:	68a3      	ldr	r3, [r4, #8]
 8001990:	6822      	ldr	r2, [r4, #0]
 8001992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001996:	6093      	str	r3, [r2, #8]
 8001998:	e7cc      	b.n	8001934 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800199a:	6823      	ldr	r3, [r4, #0]
 800199c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	e7ca      	b.n	800193a <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80019a4:	2001      	movs	r0, #1
}
 80019a6:	4770      	bx	lr
 80019a8:	02008000 	.word	0x02008000

080019ac <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 80019ac:	b1a8      	cbz	r0, 80019da <HAL_I2C_DeInit+0x2e>
{
 80019ae:	b510      	push	{r4, lr}
 80019b0:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 80019b2:	2324      	movs	r3, #36	; 0x24
 80019b4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80019b8:	6802      	ldr	r2, [r0, #0]
 80019ba:	6813      	ldr	r3, [r2, #0]
 80019bc:	f023 0301 	bic.w	r3, r3, #1
 80019c0:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80019c2:	f7ff f9ed 	bl	8000da0 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019c6:	2000      	movs	r0, #0
 80019c8:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80019ca:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80019ce:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019d0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  __HAL_UNLOCK(hi2c);
 80019d4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80019d8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80019da:	2001      	movs	r0, #1
}
 80019dc:	4770      	bx	lr

080019de <HAL_I2C_Mem_Write>:
{
 80019de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019e2:	b083      	sub	sp, #12
 80019e4:	460d      	mov	r5, r1
 80019e6:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80019ea:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80019ec:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80019f0:	b2c9      	uxtb	r1, r1
 80019f2:	2920      	cmp	r1, #32
 80019f4:	f040 80bc 	bne.w	8001b70 <HAL_I2C_Mem_Write+0x192>
 80019f8:	4604      	mov	r4, r0
 80019fa:	4690      	mov	r8, r2
 80019fc:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 80019fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001a00:	f1ba 0f00 	cmp.w	sl, #0
 8001a04:	bf18      	it	ne
 8001a06:	2b00      	cmpne	r3, #0
 8001a08:	d016      	beq.n	8001a38 <HAL_I2C_Mem_Write+0x5a>
    __HAL_LOCK(hi2c);
 8001a0a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	f000 80b2 	beq.w	8001b78 <HAL_I2C_Mem_Write+0x19a>
 8001a14:	f04f 0b01 	mov.w	fp, #1
 8001a18:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001a1c:	f7ff fafc 	bl	8001018 <HAL_GetTick>
 8001a20:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a22:	9000      	str	r0, [sp, #0]
 8001a24:	2319      	movs	r3, #25
 8001a26:	465a      	mov	r2, fp
 8001a28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a2c:	4620      	mov	r0, r4
 8001a2e:	f7ff fe8f 	bl	8001750 <I2C_WaitOnFlagUntilTimeout>
 8001a32:	b130      	cbz	r0, 8001a42 <HAL_I2C_Mem_Write+0x64>
      return HAL_ERROR;
 8001a34:	2001      	movs	r0, #1
 8001a36:	e09c      	b.n	8001b72 <HAL_I2C_Mem_Write+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001a38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a3c:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8001a3e:	2001      	movs	r0, #1
 8001a40:	e097      	b.n	8001b72 <HAL_I2C_Mem_Write+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a42:	2321      	movs	r3, #33	; 0x21
 8001a44:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a48:	2340      	movs	r3, #64	; 0x40
 8001a4a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001a52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001a54:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a56:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a5a:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a5c:	9601      	str	r6, [sp, #4]
 8001a5e:	9700      	str	r7, [sp, #0]
 8001a60:	464b      	mov	r3, r9
 8001a62:	4642      	mov	r2, r8
 8001a64:	4629      	mov	r1, r5
 8001a66:	4620      	mov	r0, r4
 8001a68:	f7ff fea0 	bl	80017ac <I2C_RequestMemoryWrite>
 8001a6c:	b970      	cbnz	r0, 8001a8c <HAL_I2C_Mem_Write+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a6e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	2bff      	cmp	r3, #255	; 0xff
 8001a74:	d90f      	bls.n	8001a96 <HAL_I2C_Mem_Write+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a76:	22ff      	movs	r2, #255	; 0xff
 8001a78:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a82:	4629      	mov	r1, r5
 8001a84:	4620      	mov	r0, r4
 8001a86:	f7ff fd82 	bl	800158e <I2C_TransferConfig>
 8001a8a:	e021      	b.n	8001ad0 <HAL_I2C_Mem_Write+0xf2>
      __HAL_UNLOCK(hi2c);
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001a92:	4658      	mov	r0, fp
 8001a94:	e06d      	b.n	8001b72 <HAL_I2C_Mem_Write+0x194>
      hi2c->XferSize = hi2c->XferCount;
 8001a96:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001a98:	b292      	uxth	r2, r2
 8001a9a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	4629      	mov	r1, r5
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	f7ff fd70 	bl	800158e <I2C_TransferConfig>
 8001aae:	e00f      	b.n	8001ad0 <HAL_I2C_Mem_Write+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 8001ab0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001ab2:	b292      	uxth	r2, r2
 8001ab4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	4629      	mov	r1, r5
 8001ac2:	4620      	mov	r0, r4
 8001ac4:	f7ff fd63 	bl	800158e <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8001ac8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d033      	beq.n	8001b38 <HAL_I2C_Mem_Write+0x15a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ad0:	4632      	mov	r2, r6
 8001ad2:	4639      	mov	r1, r7
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	f7ff fe10 	bl	80016fa <I2C_WaitOnTXISFlagUntilTimeout>
 8001ada:	2800      	cmp	r0, #0
 8001adc:	d14e      	bne.n	8001b7c <HAL_I2C_Mem_Write+0x19e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ade:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001ae0:	6823      	ldr	r3, [r4, #0]
 8001ae2:	7812      	ldrb	r2, [r2, #0]
 8001ae4:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001ae6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ae8:	3301      	adds	r3, #1
 8001aea:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001aec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	3b01      	subs	r3, #1
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001af6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001af8:	3b01      	subs	r3, #1
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001afe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001b00:	b292      	uxth	r2, r2
 8001b02:	2a00      	cmp	r2, #0
 8001b04:	d0e0      	beq.n	8001ac8 <HAL_I2C_Mem_Write+0xea>
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1de      	bne.n	8001ac8 <HAL_I2C_Mem_Write+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b0a:	9600      	str	r6, [sp, #0]
 8001b0c:	463b      	mov	r3, r7
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2180      	movs	r1, #128	; 0x80
 8001b12:	4620      	mov	r0, r4
 8001b14:	f7ff fe1c 	bl	8001750 <I2C_WaitOnFlagUntilTimeout>
 8001b18:	bb90      	cbnz	r0, 8001b80 <HAL_I2C_Mem_Write+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b1a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	2bff      	cmp	r3, #255	; 0xff
 8001b20:	d9c6      	bls.n	8001ab0 <HAL_I2C_Mem_Write+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b22:	22ff      	movs	r2, #255	; 0xff
 8001b24:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b26:	2300      	movs	r3, #0
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b2e:	4629      	mov	r1, r5
 8001b30:	4620      	mov	r0, r4
 8001b32:	f7ff fd2c 	bl	800158e <I2C_TransferConfig>
 8001b36:	e7c7      	b.n	8001ac8 <HAL_I2C_Mem_Write+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b38:	4632      	mov	r2, r6
 8001b3a:	4639      	mov	r1, r7
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	f7ff feaf 	bl	80018a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b42:	b9f8      	cbnz	r0, 8001b84 <HAL_I2C_Mem_Write+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b44:	6823      	ldr	r3, [r4, #0]
 8001b46:	2220      	movs	r2, #32
 8001b48:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001b4a:	6821      	ldr	r1, [r4, #0]
 8001b4c:	684b      	ldr	r3, [r1, #4]
 8001b4e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001b52:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001b56:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001b5a:	f023 0301 	bic.w	r3, r3, #1
 8001b5e:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001b60:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b64:	2300      	movs	r3, #0
 8001b66:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001b6a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8001b6e:	e000      	b.n	8001b72 <HAL_I2C_Mem_Write+0x194>
    return HAL_BUSY;
 8001b70:	2002      	movs	r0, #2
}
 8001b72:	b003      	add	sp, #12
 8001b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8001b78:	2002      	movs	r0, #2
 8001b7a:	e7fa      	b.n	8001b72 <HAL_I2C_Mem_Write+0x194>
        return HAL_ERROR;
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	e7f8      	b.n	8001b72 <HAL_I2C_Mem_Write+0x194>
          return HAL_ERROR;
 8001b80:	2001      	movs	r0, #1
 8001b82:	e7f6      	b.n	8001b72 <HAL_I2C_Mem_Write+0x194>
      return HAL_ERROR;
 8001b84:	2001      	movs	r0, #1
 8001b86:	e7f4      	b.n	8001b72 <HAL_I2C_Mem_Write+0x194>

08001b88 <HAL_I2C_Mem_Read>:
{
 8001b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	460d      	mov	r5, r1
 8001b90:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8001b94:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b96:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8001b9a:	b2c9      	uxtb	r1, r1
 8001b9c:	2920      	cmp	r1, #32
 8001b9e:	f040 80bd 	bne.w	8001d1c <HAL_I2C_Mem_Read+0x194>
 8001ba2:	4604      	mov	r4, r0
 8001ba4:	4690      	mov	r8, r2
 8001ba6:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8001ba8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001baa:	f1ba 0f00 	cmp.w	sl, #0
 8001bae:	bf18      	it	ne
 8001bb0:	2b00      	cmpne	r3, #0
 8001bb2:	d016      	beq.n	8001be2 <HAL_I2C_Mem_Read+0x5a>
    __HAL_LOCK(hi2c);
 8001bb4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	f000 80b3 	beq.w	8001d24 <HAL_I2C_Mem_Read+0x19c>
 8001bbe:	f04f 0b01 	mov.w	fp, #1
 8001bc2:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001bc6:	f7ff fa27 	bl	8001018 <HAL_GetTick>
 8001bca:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001bcc:	9000      	str	r0, [sp, #0]
 8001bce:	2319      	movs	r3, #25
 8001bd0:	465a      	mov	r2, fp
 8001bd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bd6:	4620      	mov	r0, r4
 8001bd8:	f7ff fdba 	bl	8001750 <I2C_WaitOnFlagUntilTimeout>
 8001bdc:	b130      	cbz	r0, 8001bec <HAL_I2C_Mem_Read+0x64>
      return HAL_ERROR;
 8001bde:	2001      	movs	r0, #1
 8001be0:	e09d      	b.n	8001d1e <HAL_I2C_Mem_Read+0x196>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001be2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001be6:	6443      	str	r3, [r0, #68]	; 0x44
      return  HAL_ERROR;
 8001be8:	2001      	movs	r0, #1
 8001bea:	e098      	b.n	8001d1e <HAL_I2C_Mem_Read+0x196>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001bec:	2322      	movs	r3, #34	; 0x22
 8001bee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001bf2:	2340      	movs	r3, #64	; 0x40
 8001bf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8001bfc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001bfe:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c00:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c04:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c06:	9601      	str	r6, [sp, #4]
 8001c08:	9700      	str	r7, [sp, #0]
 8001c0a:	464b      	mov	r3, r9
 8001c0c:	4642      	mov	r2, r8
 8001c0e:	4629      	mov	r1, r5
 8001c10:	4620      	mov	r0, r4
 8001c12:	f7ff fe09 	bl	8001828 <I2C_RequestMemoryRead>
 8001c16:	b970      	cbnz	r0, 8001c36 <HAL_I2C_Mem_Read+0xae>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c18:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	2bff      	cmp	r3, #255	; 0xff
 8001c1e:	d90f      	bls.n	8001c40 <HAL_I2C_Mem_Read+0xb8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c20:	22ff      	movs	r2, #255	; 0xff
 8001c22:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c24:	4b43      	ldr	r3, [pc, #268]	; (8001d34 <HAL_I2C_Mem_Read+0x1ac>)
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c2c:	4629      	mov	r1, r5
 8001c2e:	4620      	mov	r0, r4
 8001c30:	f7ff fcad 	bl	800158e <I2C_TransferConfig>
 8001c34:	e021      	b.n	8001c7a <HAL_I2C_Mem_Read+0xf2>
      __HAL_UNLOCK(hi2c);
 8001c36:	2300      	movs	r3, #0
 8001c38:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001c3c:	4658      	mov	r0, fp
 8001c3e:	e06e      	b.n	8001d1e <HAL_I2C_Mem_Read+0x196>
      hi2c->XferSize = hi2c->XferCount;
 8001c40:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001c42:	b292      	uxth	r2, r2
 8001c44:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c46:	4b3b      	ldr	r3, [pc, #236]	; (8001d34 <HAL_I2C_Mem_Read+0x1ac>)
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c4e:	b2d2      	uxtb	r2, r2
 8001c50:	4629      	mov	r1, r5
 8001c52:	4620      	mov	r0, r4
 8001c54:	f7ff fc9b 	bl	800158e <I2C_TransferConfig>
 8001c58:	e00f      	b.n	8001c7a <HAL_I2C_Mem_Read+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 8001c5a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001c5c:	b292      	uxth	r2, r2
 8001c5e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c60:	2300      	movs	r3, #0
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	4629      	mov	r1, r5
 8001c6c:	4620      	mov	r0, r4
 8001c6e:	f7ff fc8e 	bl	800158e <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8001c72:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d034      	beq.n	8001ce4 <HAL_I2C_Mem_Read+0x15c>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001c7a:	9600      	str	r6, [sp, #0]
 8001c7c:	463b      	mov	r3, r7
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2104      	movs	r1, #4
 8001c82:	4620      	mov	r0, r4
 8001c84:	f7ff fd64 	bl	8001750 <I2C_WaitOnFlagUntilTimeout>
 8001c88:	2800      	cmp	r0, #0
 8001c8a:	d14d      	bne.n	8001d28 <HAL_I2C_Mem_Read+0x1a0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c8c:	6823      	ldr	r3, [r4, #0]
 8001c8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c92:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001c94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c96:	3301      	adds	r3, #1
 8001c98:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001c9a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001c9c:	3a01      	subs	r2, #1
 8001c9e:	b292      	uxth	r2, r2
 8001ca0:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001ca2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001cac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0de      	beq.n	8001c72 <HAL_I2C_Mem_Read+0xea>
 8001cb4:	2a00      	cmp	r2, #0
 8001cb6:	d1dc      	bne.n	8001c72 <HAL_I2C_Mem_Read+0xea>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001cb8:	9600      	str	r6, [sp, #0]
 8001cba:	463b      	mov	r3, r7
 8001cbc:	2180      	movs	r1, #128	; 0x80
 8001cbe:	4620      	mov	r0, r4
 8001cc0:	f7ff fd46 	bl	8001750 <I2C_WaitOnFlagUntilTimeout>
 8001cc4:	bb90      	cbnz	r0, 8001d2c <HAL_I2C_Mem_Read+0x1a4>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cc6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	2bff      	cmp	r3, #255	; 0xff
 8001ccc:	d9c5      	bls.n	8001c5a <HAL_I2C_Mem_Read+0xd2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cce:	22ff      	movs	r2, #255	; 0xff
 8001cd0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cda:	4629      	mov	r1, r5
 8001cdc:	4620      	mov	r0, r4
 8001cde:	f7ff fc56 	bl	800158e <I2C_TransferConfig>
 8001ce2:	e7c6      	b.n	8001c72 <HAL_I2C_Mem_Read+0xea>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ce4:	4632      	mov	r2, r6
 8001ce6:	4639      	mov	r1, r7
 8001ce8:	4620      	mov	r0, r4
 8001cea:	f7ff fdd9 	bl	80018a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001cee:	b9f8      	cbnz	r0, 8001d30 <HAL_I2C_Mem_Read+0x1a8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cf0:	6823      	ldr	r3, [r4, #0]
 8001cf2:	2220      	movs	r2, #32
 8001cf4:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001cf6:	6821      	ldr	r1, [r4, #0]
 8001cf8:	684b      	ldr	r3, [r1, #4]
 8001cfa:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001cfe:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001d02:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001d06:	f023 0301 	bic.w	r3, r3, #1
 8001d0a:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001d0c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d10:	2300      	movs	r3, #0
 8001d12:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001d16:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8001d1a:	e000      	b.n	8001d1e <HAL_I2C_Mem_Read+0x196>
    return HAL_BUSY;
 8001d1c:	2002      	movs	r0, #2
}
 8001d1e:	b003      	add	sp, #12
 8001d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8001d24:	2002      	movs	r0, #2
 8001d26:	e7fa      	b.n	8001d1e <HAL_I2C_Mem_Read+0x196>
        return HAL_ERROR;
 8001d28:	2001      	movs	r0, #1
 8001d2a:	e7f8      	b.n	8001d1e <HAL_I2C_Mem_Read+0x196>
          return HAL_ERROR;
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	e7f6      	b.n	8001d1e <HAL_I2C_Mem_Read+0x196>
      return HAL_ERROR;
 8001d30:	2001      	movs	r0, #1
 8001d32:	e7f4      	b.n	8001d1e <HAL_I2C_Mem_Read+0x196>
 8001d34:	80002400 	.word	0x80002400

08001d38 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d38:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b20      	cmp	r3, #32
 8001d40:	d124      	bne.n	8001d8c <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d42:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d022      	beq.n	8001d90 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d50:	2324      	movs	r3, #36	; 0x24
 8001d52:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d56:	6802      	ldr	r2, [r0, #0]
 8001d58:	6813      	ldr	r3, [r2, #0]
 8001d5a:	f023 0301 	bic.w	r3, r3, #1
 8001d5e:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d60:	6802      	ldr	r2, [r0, #0]
 8001d62:	6813      	ldr	r3, [r2, #0]
 8001d64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d68:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d6a:	6802      	ldr	r2, [r0, #0]
 8001d6c:	6813      	ldr	r3, [r2, #0]
 8001d6e:	4319      	orrs	r1, r3
 8001d70:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d72:	6802      	ldr	r2, [r0, #0]
 8001d74:	6813      	ldr	r3, [r2, #0]
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d7c:	2320      	movs	r3, #32
 8001d7e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d82:	2300      	movs	r3, #0
 8001d84:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001d88:	4618      	mov	r0, r3
 8001d8a:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001d8c:	2002      	movs	r0, #2
 8001d8e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001d90:	2002      	movs	r0, #2
  }
}
 8001d92:	4770      	bx	lr

08001d94 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d94:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b20      	cmp	r3, #32
 8001d9c:	d122      	bne.n	8001de4 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d9e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d020      	beq.n	8001de8 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8001da6:	2301      	movs	r3, #1
 8001da8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dac:	2324      	movs	r3, #36	; 0x24
 8001dae:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001db2:	6802      	ldr	r2, [r0, #0]
 8001db4:	6813      	ldr	r3, [r2, #0]
 8001db6:	f023 0301 	bic.w	r3, r3, #1
 8001dba:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001dbc:	6802      	ldr	r2, [r0, #0]
 8001dbe:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001dc0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001dc4:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001dc8:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001dca:	6802      	ldr	r2, [r0, #0]
 8001dcc:	6813      	ldr	r3, [r2, #0]
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dd4:	2320      	movs	r3, #32
 8001dd6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dda:	2300      	movs	r3, #0
 8001ddc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001de0:	4618      	mov	r0, r3
 8001de2:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001de4:	2002      	movs	r0, #2
 8001de6:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001de8:	2002      	movs	r0, #2
  }
}
 8001dea:	4770      	bx	lr

08001dec <HAL_LTDC_ErrorCallback>:
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8001dec:	4770      	bx	lr

08001dee <HAL_LTDC_ReloadEventCallback>:
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8001dee:	4770      	bx	lr

08001df0 <HAL_LTDC_IRQHandler>:
{
 8001df0:	b570      	push	{r4, r5, r6, lr}
 8001df2:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8001df4:	6803      	ldr	r3, [r0, #0]
 8001df6:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8001df8:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8001dfa:	f015 0f04 	tst.w	r5, #4
 8001dfe:	d002      	beq.n	8001e06 <HAL_LTDC_IRQHandler+0x16>
 8001e00:	f016 0f04 	tst.w	r6, #4
 8001e04:	d112      	bne.n	8001e2c <HAL_LTDC_IRQHandler+0x3c>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8001e06:	f015 0f02 	tst.w	r5, #2
 8001e0a:	d002      	beq.n	8001e12 <HAL_LTDC_IRQHandler+0x22>
 8001e0c:	f016 0f02 	tst.w	r6, #2
 8001e10:	d121      	bne.n	8001e56 <HAL_LTDC_IRQHandler+0x66>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8001e12:	f015 0f01 	tst.w	r5, #1
 8001e16:	d002      	beq.n	8001e1e <HAL_LTDC_IRQHandler+0x2e>
 8001e18:	f016 0f01 	tst.w	r6, #1
 8001e1c:	d132      	bne.n	8001e84 <HAL_LTDC_IRQHandler+0x94>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8001e1e:	f015 0f08 	tst.w	r5, #8
 8001e22:	d002      	beq.n	8001e2a <HAL_LTDC_IRQHandler+0x3a>
 8001e24:	f016 0f08 	tst.w	r6, #8
 8001e28:	d13d      	bne.n	8001ea6 <HAL_LTDC_IRQHandler+0xb6>
}
 8001e2a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8001e2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e2e:	f022 0204 	bic.w	r2, r2, #4
 8001e32:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8001e34:	6803      	ldr	r3, [r0, #0]
 8001e36:	2204      	movs	r2, #4
 8001e38:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8001e3a:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8001e3e:	f043 0301 	orr.w	r3, r3, #1
 8001e42:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8001e46:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8001e50:	f7ff ffcc 	bl	8001dec <HAL_LTDC_ErrorCallback>
 8001e54:	e7d7      	b.n	8001e06 <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8001e56:	6822      	ldr	r2, [r4, #0]
 8001e58:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001e5a:	f023 0302 	bic.w	r3, r3, #2
 8001e5e:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8001e60:	6823      	ldr	r3, [r4, #0]
 8001e62:	2202      	movs	r2, #2
 8001e64:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8001e66:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8001e70:	2304      	movs	r3, #4
 8001e72:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8001e76:	2300      	movs	r3, #0
 8001e78:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	f7ff ffb5 	bl	8001dec <HAL_LTDC_ErrorCallback>
 8001e82:	e7c6      	b.n	8001e12 <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8001e84:	6822      	ldr	r2, [r4, #0]
 8001e86:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001e88:	f023 0301 	bic.w	r3, r3, #1
 8001e8c:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8001e8e:	6822      	ldr	r2, [r4, #0]
 8001e90:	2301      	movs	r3, #1
 8001e92:	63d3      	str	r3, [r2, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8001e94:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8001e9e:	4620      	mov	r0, r4
 8001ea0:	f002 fbb4 	bl	800460c <HAL_LTDC_LineEventCallback>
 8001ea4:	e7bb      	b.n	8001e1e <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8001ea6:	6822      	ldr	r2, [r4, #0]
 8001ea8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001eaa:	f023 0308 	bic.w	r3, r3, #8
 8001eae:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8001eb0:	6823      	ldr	r3, [r4, #0]
 8001eb2:	2208      	movs	r2, #8
 8001eb4:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8001ec2:	4620      	mov	r0, r4
 8001ec4:	f7ff ff93 	bl	8001dee <HAL_LTDC_ReloadEventCallback>
}
 8001ec8:	e7af      	b.n	8001e2a <HAL_LTDC_IRQHandler+0x3a>
	...

08001ecc <HAL_LTDC_ProgramLineEvent>:
{
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8001ecc:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d01a      	beq.n	8001f0a <HAL_LTDC_ProgramLineEvent+0x3e>
{
 8001ed4:	b410      	push	{r4}
  __HAL_LOCK(hltdc);
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001edc:	2302      	movs	r3, #2
 8001ede:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8001ee2:	6804      	ldr	r4, [r0, #0]
 8001ee4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001ee6:	f023 0301 	bic.w	r3, r3, #1
 8001eea:	6363      	str	r3, [r4, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8001eec:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <HAL_LTDC_ProgramLineEvent+0x44>)
 8001eee:	6419      	str	r1, [r3, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8001ef0:	6801      	ldr	r1, [r0, #0]
 8001ef2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	634b      	str	r3, [r1, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8001ef8:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8001efc:	2300      	movs	r3, #0
 8001efe:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0

  return HAL_OK;
 8001f02:	4618      	mov	r0, r3
}
 8001f04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f08:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 8001f0a:	2002      	movs	r0, #2
}
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	40016800 	.word	0x40016800

08001f14 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f14:	2800      	cmp	r0, #0
 8001f16:	f000 81ff 	beq.w	8002318 <HAL_RCC_OscConfig+0x404>
{
 8001f1a:	b570      	push	{r4, r5, r6, lr}
 8001f1c:	b082      	sub	sp, #8
 8001f1e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f20:	6803      	ldr	r3, [r0, #0]
 8001f22:	f013 0f01 	tst.w	r3, #1
 8001f26:	d029      	beq.n	8001f7c <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f28:	4b95      	ldr	r3, [pc, #596]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f003 030c 	and.w	r3, r3, #12
 8001f30:	2b04      	cmp	r3, #4
 8001f32:	d01a      	beq.n	8001f6a <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f34:	4b92      	ldr	r3, [pc, #584]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f003 030c 	and.w	r3, r3, #12
 8001f3c:	2b08      	cmp	r3, #8
 8001f3e:	d00f      	beq.n	8001f60 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f40:	6863      	ldr	r3, [r4, #4]
 8001f42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f46:	d040      	beq.n	8001fca <HAL_RCC_OscConfig+0xb6>
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d154      	bne.n	8001ff6 <HAL_RCC_OscConfig+0xe2>
 8001f4c:	4b8c      	ldr	r3, [pc, #560]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	e039      	b.n	8001fd4 <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f60:	4b87      	ldr	r3, [pc, #540]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001f68:	d0ea      	beq.n	8001f40 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f6a:	4b85      	ldr	r3, [pc, #532]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001f72:	d003      	beq.n	8001f7c <HAL_RCC_OscConfig+0x68>
 8001f74:	6863      	ldr	r3, [r4, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 81d0 	beq.w	800231c <HAL_RCC_OscConfig+0x408>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f7c:	6823      	ldr	r3, [r4, #0]
 8001f7e:	f013 0f02 	tst.w	r3, #2
 8001f82:	d074      	beq.n	800206e <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f84:	4b7e      	ldr	r3, [pc, #504]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f013 0f0c 	tst.w	r3, #12
 8001f8c:	d05e      	beq.n	800204c <HAL_RCC_OscConfig+0x138>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f8e:	4b7c      	ldr	r3, [pc, #496]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 030c 	and.w	r3, r3, #12
 8001f96:	2b08      	cmp	r3, #8
 8001f98:	d053      	beq.n	8002042 <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f9a:	68e3      	ldr	r3, [r4, #12]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 8089 	beq.w	80020b4 <HAL_RCC_OscConfig+0x1a0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fa2:	4a77      	ldr	r2, [pc, #476]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	6813      	ldr	r3, [r2, #0]
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fac:	f7ff f834 	bl	8001018 <HAL_GetTick>
 8001fb0:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb2:	4b73      	ldr	r3, [pc, #460]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f013 0f02 	tst.w	r3, #2
 8001fba:	d172      	bne.n	80020a2 <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fbc:	f7ff f82c 	bl	8001018 <HAL_GetTick>
 8001fc0:	1b40      	subs	r0, r0, r5
 8001fc2:	2802      	cmp	r0, #2
 8001fc4:	d9f5      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8001fc6:	2003      	movs	r0, #3
 8001fc8:	e1ad      	b.n	8002326 <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fca:	4a6d      	ldr	r2, [pc, #436]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	6813      	ldr	r3, [r2, #0]
 8001fce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd2:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fd4:	6863      	ldr	r3, [r4, #4]
 8001fd6:	b32b      	cbz	r3, 8002024 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8001fd8:	f7ff f81e 	bl	8001018 <HAL_GetTick>
 8001fdc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fde:	4b68      	ldr	r3, [pc, #416]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001fe6:	d1c9      	bne.n	8001f7c <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fe8:	f7ff f816 	bl	8001018 <HAL_GetTick>
 8001fec:	1b40      	subs	r0, r0, r5
 8001fee:	2864      	cmp	r0, #100	; 0x64
 8001ff0:	d9f5      	bls.n	8001fde <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8001ff2:	2003      	movs	r0, #3
 8001ff4:	e197      	b.n	8002326 <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ff6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ffa:	d009      	beq.n	8002010 <HAL_RCC_OscConfig+0xfc>
 8001ffc:	4b60      	ldr	r3, [pc, #384]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	e7e1      	b.n	8001fd4 <HAL_RCC_OscConfig+0xc0>
 8002010:	4b5b      	ldr	r3, [pc, #364]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	e7d7      	b.n	8001fd4 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8002024:	f7fe fff8 	bl	8001018 <HAL_GetTick>
 8002028:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800202a:	4b55      	ldr	r3, [pc, #340]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002032:	d0a3      	beq.n	8001f7c <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002034:	f7fe fff0 	bl	8001018 <HAL_GetTick>
 8002038:	1b40      	subs	r0, r0, r5
 800203a:	2864      	cmp	r0, #100	; 0x64
 800203c:	d9f5      	bls.n	800202a <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 800203e:	2003      	movs	r0, #3
 8002040:	e171      	b.n	8002326 <HAL_RCC_OscConfig+0x412>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002042:	4b4f      	ldr	r3, [pc, #316]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800204a:	d1a6      	bne.n	8001f9a <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800204c:	4b4c      	ldr	r3, [pc, #304]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f013 0f02 	tst.w	r3, #2
 8002054:	d003      	beq.n	800205e <HAL_RCC_OscConfig+0x14a>
 8002056:	68e3      	ldr	r3, [r4, #12]
 8002058:	2b01      	cmp	r3, #1
 800205a:	f040 8161 	bne.w	8002320 <HAL_RCC_OscConfig+0x40c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205e:	4a48      	ldr	r2, [pc, #288]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 8002060:	6813      	ldr	r3, [r2, #0]
 8002062:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002066:	6921      	ldr	r1, [r4, #16]
 8002068:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800206c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800206e:	6823      	ldr	r3, [r4, #0]
 8002070:	f013 0f08 	tst.w	r3, #8
 8002074:	d046      	beq.n	8002104 <HAL_RCC_OscConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002076:	6963      	ldr	r3, [r4, #20]
 8002078:	b383      	cbz	r3, 80020dc <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800207a:	4a41      	ldr	r2, [pc, #260]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 800207c:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800207e:	f043 0301 	orr.w	r3, r3, #1
 8002082:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002084:	f7fe ffc8 	bl	8001018 <HAL_GetTick>
 8002088:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800208a:	4b3d      	ldr	r3, [pc, #244]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 800208c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800208e:	f013 0f02 	tst.w	r3, #2
 8002092:	d137      	bne.n	8002104 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002094:	f7fe ffc0 	bl	8001018 <HAL_GetTick>
 8002098:	1b40      	subs	r0, r0, r5
 800209a:	2802      	cmp	r0, #2
 800209c:	d9f5      	bls.n	800208a <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 800209e:	2003      	movs	r0, #3
 80020a0:	e141      	b.n	8002326 <HAL_RCC_OscConfig+0x412>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a2:	4a37      	ldr	r2, [pc, #220]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 80020a4:	6813      	ldr	r3, [r2, #0]
 80020a6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80020aa:	6921      	ldr	r1, [r4, #16]
 80020ac:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	e7dc      	b.n	800206e <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 80020b4:	4a32      	ldr	r2, [pc, #200]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 80020b6:	6813      	ldr	r3, [r2, #0]
 80020b8:	f023 0301 	bic.w	r3, r3, #1
 80020bc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80020be:	f7fe ffab 	bl	8001018 <HAL_GetTick>
 80020c2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020c4:	4b2e      	ldr	r3, [pc, #184]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f013 0f02 	tst.w	r3, #2
 80020cc:	d0cf      	beq.n	800206e <HAL_RCC_OscConfig+0x15a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ce:	f7fe ffa3 	bl	8001018 <HAL_GetTick>
 80020d2:	1b40      	subs	r0, r0, r5
 80020d4:	2802      	cmp	r0, #2
 80020d6:	d9f5      	bls.n	80020c4 <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 80020d8:	2003      	movs	r0, #3
 80020da:	e124      	b.n	8002326 <HAL_RCC_OscConfig+0x412>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020dc:	4a28      	ldr	r2, [pc, #160]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 80020de:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80020e0:	f023 0301 	bic.w	r3, r3, #1
 80020e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e6:	f7fe ff97 	bl	8001018 <HAL_GetTick>
 80020ea:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ec:	4b24      	ldr	r3, [pc, #144]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 80020ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020f0:	f013 0f02 	tst.w	r3, #2
 80020f4:	d006      	beq.n	8002104 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020f6:	f7fe ff8f 	bl	8001018 <HAL_GetTick>
 80020fa:	1b40      	subs	r0, r0, r5
 80020fc:	2802      	cmp	r0, #2
 80020fe:	d9f5      	bls.n	80020ec <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 8002100:	2003      	movs	r0, #3
 8002102:	e110      	b.n	8002326 <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002104:	6823      	ldr	r3, [r4, #0]
 8002106:	f013 0f04 	tst.w	r3, #4
 800210a:	d07d      	beq.n	8002208 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800210c:	4b1c      	ldr	r3, [pc, #112]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002114:	d11e      	bne.n	8002154 <HAL_RCC_OscConfig+0x240>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002116:	4b1a      	ldr	r3, [pc, #104]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 8002118:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800211a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800211e:	641a      	str	r2, [r3, #64]	; 0x40
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002126:	9301      	str	r3, [sp, #4]
 8002128:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800212a:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800212c:	4b15      	ldr	r3, [pc, #84]	; (8002184 <HAL_RCC_OscConfig+0x270>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002134:	d010      	beq.n	8002158 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002136:	68a3      	ldr	r3, [r4, #8]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d025      	beq.n	8002188 <HAL_RCC_OscConfig+0x274>
 800213c:	2b00      	cmp	r3, #0
 800213e:	d13b      	bne.n	80021b8 <HAL_RCC_OscConfig+0x2a4>
 8002140:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <HAL_RCC_OscConfig+0x26c>)
 8002142:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002144:	f022 0201 	bic.w	r2, r2, #1
 8002148:	671a      	str	r2, [r3, #112]	; 0x70
 800214a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800214c:	f022 0204 	bic.w	r2, r2, #4
 8002150:	671a      	str	r2, [r3, #112]	; 0x70
 8002152:	e01e      	b.n	8002192 <HAL_RCC_OscConfig+0x27e>
  FlagStatus pwrclkchanged = RESET;
 8002154:	2500      	movs	r5, #0
 8002156:	e7e9      	b.n	800212c <HAL_RCC_OscConfig+0x218>
      PWR->CR1 |= PWR_CR1_DBP;
 8002158:	4a0a      	ldr	r2, [pc, #40]	; (8002184 <HAL_RCC_OscConfig+0x270>)
 800215a:	6813      	ldr	r3, [r2, #0]
 800215c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002160:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002162:	f7fe ff59 	bl	8001018 <HAL_GetTick>
 8002166:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002168:	4b06      	ldr	r3, [pc, #24]	; (8002184 <HAL_RCC_OscConfig+0x270>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002170:	d1e1      	bne.n	8002136 <HAL_RCC_OscConfig+0x222>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002172:	f7fe ff51 	bl	8001018 <HAL_GetTick>
 8002176:	1b80      	subs	r0, r0, r6
 8002178:	2864      	cmp	r0, #100	; 0x64
 800217a:	d9f5      	bls.n	8002168 <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 800217c:	2003      	movs	r0, #3
 800217e:	e0d2      	b.n	8002326 <HAL_RCC_OscConfig+0x412>
 8002180:	40023800 	.word	0x40023800
 8002184:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002188:	4a6e      	ldr	r2, [pc, #440]	; (8002344 <HAL_RCC_OscConfig+0x430>)
 800218a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002192:	68a3      	ldr	r3, [r4, #8]
 8002194:	b333      	cbz	r3, 80021e4 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002196:	f7fe ff3f 	bl	8001018 <HAL_GetTick>
 800219a:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800219c:	4b69      	ldr	r3, [pc, #420]	; (8002344 <HAL_RCC_OscConfig+0x430>)
 800219e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a0:	f013 0f02 	tst.w	r3, #2
 80021a4:	d12f      	bne.n	8002206 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a6:	f7fe ff37 	bl	8001018 <HAL_GetTick>
 80021aa:	1b80      	subs	r0, r0, r6
 80021ac:	f241 3388 	movw	r3, #5000	; 0x1388
 80021b0:	4298      	cmp	r0, r3
 80021b2:	d9f3      	bls.n	800219c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80021b4:	2003      	movs	r0, #3
 80021b6:	e0b6      	b.n	8002326 <HAL_RCC_OscConfig+0x412>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021b8:	2b05      	cmp	r3, #5
 80021ba:	d009      	beq.n	80021d0 <HAL_RCC_OscConfig+0x2bc>
 80021bc:	4b61      	ldr	r3, [pc, #388]	; (8002344 <HAL_RCC_OscConfig+0x430>)
 80021be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80021c0:	f022 0201 	bic.w	r2, r2, #1
 80021c4:	671a      	str	r2, [r3, #112]	; 0x70
 80021c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80021c8:	f022 0204 	bic.w	r2, r2, #4
 80021cc:	671a      	str	r2, [r3, #112]	; 0x70
 80021ce:	e7e0      	b.n	8002192 <HAL_RCC_OscConfig+0x27e>
 80021d0:	4b5c      	ldr	r3, [pc, #368]	; (8002344 <HAL_RCC_OscConfig+0x430>)
 80021d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80021d4:	f042 0204 	orr.w	r2, r2, #4
 80021d8:	671a      	str	r2, [r3, #112]	; 0x70
 80021da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80021dc:	f042 0201 	orr.w	r2, r2, #1
 80021e0:	671a      	str	r2, [r3, #112]	; 0x70
 80021e2:	e7d6      	b.n	8002192 <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e4:	f7fe ff18 	bl	8001018 <HAL_GetTick>
 80021e8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ea:	4b56      	ldr	r3, [pc, #344]	; (8002344 <HAL_RCC_OscConfig+0x430>)
 80021ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ee:	f013 0f02 	tst.w	r3, #2
 80021f2:	d008      	beq.n	8002206 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f4:	f7fe ff10 	bl	8001018 <HAL_GetTick>
 80021f8:	1b80      	subs	r0, r0, r6
 80021fa:	f241 3388 	movw	r3, #5000	; 0x1388
 80021fe:	4298      	cmp	r0, r3
 8002200:	d9f3      	bls.n	80021ea <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 8002202:	2003      	movs	r0, #3
 8002204:	e08f      	b.n	8002326 <HAL_RCC_OscConfig+0x412>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002206:	b9fd      	cbnz	r5, 8002248 <HAL_RCC_OscConfig+0x334>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002208:	69a3      	ldr	r3, [r4, #24]
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 808a 	beq.w	8002324 <HAL_RCC_OscConfig+0x410>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002210:	4a4c      	ldr	r2, [pc, #304]	; (8002344 <HAL_RCC_OscConfig+0x430>)
 8002212:	6892      	ldr	r2, [r2, #8]
 8002214:	f002 020c 	and.w	r2, r2, #12
 8002218:	2a08      	cmp	r2, #8
 800221a:	d058      	beq.n	80022ce <HAL_RCC_OscConfig+0x3ba>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800221c:	2b02      	cmp	r3, #2
 800221e:	d019      	beq.n	8002254 <HAL_RCC_OscConfig+0x340>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002220:	4a48      	ldr	r2, [pc, #288]	; (8002344 <HAL_RCC_OscConfig+0x430>)
 8002222:	6813      	ldr	r3, [r2, #0]
 8002224:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002228:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222a:	f7fe fef5 	bl	8001018 <HAL_GetTick>
 800222e:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002230:	4b44      	ldr	r3, [pc, #272]	; (8002344 <HAL_RCC_OscConfig+0x430>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002238:	d047      	beq.n	80022ca <HAL_RCC_OscConfig+0x3b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800223a:	f7fe feed 	bl	8001018 <HAL_GetTick>
 800223e:	1b00      	subs	r0, r0, r4
 8002240:	2802      	cmp	r0, #2
 8002242:	d9f5      	bls.n	8002230 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8002244:	2003      	movs	r0, #3
 8002246:	e06e      	b.n	8002326 <HAL_RCC_OscConfig+0x412>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002248:	4a3e      	ldr	r2, [pc, #248]	; (8002344 <HAL_RCC_OscConfig+0x430>)
 800224a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800224c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002250:	6413      	str	r3, [r2, #64]	; 0x40
 8002252:	e7d9      	b.n	8002208 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 8002254:	4a3b      	ldr	r2, [pc, #236]	; (8002344 <HAL_RCC_OscConfig+0x430>)
 8002256:	6813      	ldr	r3, [r2, #0]
 8002258:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800225c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800225e:	f7fe fedb 	bl	8001018 <HAL_GetTick>
 8002262:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002264:	4b37      	ldr	r3, [pc, #220]	; (8002344 <HAL_RCC_OscConfig+0x430>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800226c:	d006      	beq.n	800227c <HAL_RCC_OscConfig+0x368>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800226e:	f7fe fed3 	bl	8001018 <HAL_GetTick>
 8002272:	1b40      	subs	r0, r0, r5
 8002274:	2802      	cmp	r0, #2
 8002276:	d9f5      	bls.n	8002264 <HAL_RCC_OscConfig+0x350>
            return HAL_TIMEOUT;
 8002278:	2003      	movs	r0, #3
 800227a:	e054      	b.n	8002326 <HAL_RCC_OscConfig+0x412>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800227c:	69e3      	ldr	r3, [r4, #28]
 800227e:	6a22      	ldr	r2, [r4, #32]
 8002280:	4313      	orrs	r3, r2
 8002282:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002284:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002288:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800228a:	0852      	lsrs	r2, r2, #1
 800228c:	3a01      	subs	r2, #1
 800228e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002292:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002294:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002298:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800229c:	4a29      	ldr	r2, [pc, #164]	; (8002344 <HAL_RCC_OscConfig+0x430>)
 800229e:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80022a0:	6813      	ldr	r3, [r2, #0]
 80022a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022a6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80022a8:	f7fe feb6 	bl	8001018 <HAL_GetTick>
 80022ac:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ae:	4b25      	ldr	r3, [pc, #148]	; (8002344 <HAL_RCC_OscConfig+0x430>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80022b6:	d106      	bne.n	80022c6 <HAL_RCC_OscConfig+0x3b2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b8:	f7fe feae 	bl	8001018 <HAL_GetTick>
 80022bc:	1b00      	subs	r0, r0, r4
 80022be:	2802      	cmp	r0, #2
 80022c0:	d9f5      	bls.n	80022ae <HAL_RCC_OscConfig+0x39a>
            return HAL_TIMEOUT;
 80022c2:	2003      	movs	r0, #3
 80022c4:	e02f      	b.n	8002326 <HAL_RCC_OscConfig+0x412>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80022c6:	2000      	movs	r0, #0
 80022c8:	e02d      	b.n	8002326 <HAL_RCC_OscConfig+0x412>
 80022ca:	2000      	movs	r0, #0
 80022cc:	e02b      	b.n	8002326 <HAL_RCC_OscConfig+0x412>
      pll_config = RCC->PLLCFGR;
 80022ce:	4a1d      	ldr	r2, [pc, #116]	; (8002344 <HAL_RCC_OscConfig+0x430>)
 80022d0:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d029      	beq.n	800232a <HAL_RCC_OscConfig+0x416>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022d6:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80022da:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022dc:	428b      	cmp	r3, r1
 80022de:	d126      	bne.n	800232e <HAL_RCC_OscConfig+0x41a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022e0:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 80022e4:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e6:	428b      	cmp	r3, r1
 80022e8:	d123      	bne.n	8002332 <HAL_RCC_OscConfig+0x41e>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022ea:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022f0:	4013      	ands	r3, r2
 80022f2:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 80022f6:	d11e      	bne.n	8002336 <HAL_RCC_OscConfig+0x422>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80022f8:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 80022fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80022fe:	085b      	lsrs	r3, r3, #1
 8002300:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002302:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8002306:	d118      	bne.n	800233a <HAL_RCC_OscConfig+0x426>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002308:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800230c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800230e:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
 8002312:	d114      	bne.n	800233e <HAL_RCC_OscConfig+0x42a>
  return HAL_OK;
 8002314:	2000      	movs	r0, #0
 8002316:	e006      	b.n	8002326 <HAL_RCC_OscConfig+0x412>
    return HAL_ERROR;
 8002318:	2001      	movs	r0, #1
}
 800231a:	4770      	bx	lr
        return HAL_ERROR;
 800231c:	2001      	movs	r0, #1
 800231e:	e002      	b.n	8002326 <HAL_RCC_OscConfig+0x412>
        return HAL_ERROR;
 8002320:	2001      	movs	r0, #1
 8002322:	e000      	b.n	8002326 <HAL_RCC_OscConfig+0x412>
  return HAL_OK;
 8002324:	2000      	movs	r0, #0
}
 8002326:	b002      	add	sp, #8
 8002328:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800232a:	2001      	movs	r0, #1
 800232c:	e7fb      	b.n	8002326 <HAL_RCC_OscConfig+0x412>
 800232e:	2001      	movs	r0, #1
 8002330:	e7f9      	b.n	8002326 <HAL_RCC_OscConfig+0x412>
 8002332:	2001      	movs	r0, #1
 8002334:	e7f7      	b.n	8002326 <HAL_RCC_OscConfig+0x412>
 8002336:	2001      	movs	r0, #1
 8002338:	e7f5      	b.n	8002326 <HAL_RCC_OscConfig+0x412>
 800233a:	2001      	movs	r0, #1
 800233c:	e7f3      	b.n	8002326 <HAL_RCC_OscConfig+0x412>
 800233e:	2001      	movs	r0, #1
 8002340:	e7f1      	b.n	8002326 <HAL_RCC_OscConfig+0x412>
 8002342:	bf00      	nop
 8002344:	40023800 	.word	0x40023800

08002348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002348:	b508      	push	{r3, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800234a:	4b25      	ldr	r3, [pc, #148]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 030c 	and.w	r3, r3, #12
 8002352:	2b04      	cmp	r3, #4
 8002354:	d03f      	beq.n	80023d6 <HAL_RCC_GetSysClockFreq+0x8e>
 8002356:	2b08      	cmp	r3, #8
 8002358:	d13f      	bne.n	80023da <HAL_RCC_GetSysClockFreq+0x92>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800235a:	4b21      	ldr	r3, [pc, #132]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002368:	d012      	beq.n	8002390 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800236a:	4b1d      	ldr	r3, [pc, #116]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800236c:	6859      	ldr	r1, [r3, #4]
 800236e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002372:	481c      	ldr	r0, [pc, #112]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002374:	2300      	movs	r3, #0
 8002376:	fba1 0100 	umull	r0, r1, r1, r0
 800237a:	f7fd ff99 	bl	80002b0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800237e:	4b18      	ldr	r3, [pc, #96]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002386:	3301      	adds	r3, #1
 8002388:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800238a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800238e:	e025      	b.n	80023dc <HAL_RCC_GetSysClockFreq+0x94>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002390:	4b13      	ldr	r3, [pc, #76]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002392:	6859      	ldr	r1, [r3, #4]
 8002394:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8002398:	ea4f 114c 	mov.w	r1, ip, lsl #5
 800239c:	ebb1 000c 	subs.w	r0, r1, ip
 80023a0:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80023a4:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80023a8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80023ac:	0181      	lsls	r1, r0, #6
 80023ae:	1a09      	subs	r1, r1, r0
 80023b0:	eb63 030e 	sbc.w	r3, r3, lr
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023ba:	00c9      	lsls	r1, r1, #3
 80023bc:	eb11 0c0c 	adds.w	ip, r1, ip
 80023c0:	f143 0300 	adc.w	r3, r3, #0
 80023c4:	0299      	lsls	r1, r3, #10
 80023c6:	2300      	movs	r3, #0
 80023c8:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80023cc:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80023d0:	f7fd ff6e 	bl	80002b0 <__aeabi_uldivmod>
 80023d4:	e7d3      	b.n	800237e <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 80023d6:	4803      	ldr	r0, [pc, #12]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023d8:	e000      	b.n	80023dc <HAL_RCC_GetSysClockFreq+0x94>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023da:	4803      	ldr	r0, [pc, #12]	; (80023e8 <HAL_RCC_GetSysClockFreq+0xa0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80023dc:	bd08      	pop	{r3, pc}
 80023de:	bf00      	nop
 80023e0:	40023800 	.word	0x40023800
 80023e4:	017d7840 	.word	0x017d7840
 80023e8:	00f42400 	.word	0x00f42400

080023ec <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80023ec:	2800      	cmp	r0, #0
 80023ee:	f000 80a0 	beq.w	8002532 <HAL_RCC_ClockConfig+0x146>
{
 80023f2:	b570      	push	{r4, r5, r6, lr}
 80023f4:	460d      	mov	r5, r1
 80023f6:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023f8:	4b52      	ldr	r3, [pc, #328]	; (8002544 <HAL_RCC_ClockConfig+0x158>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 030f 	and.w	r3, r3, #15
 8002400:	428b      	cmp	r3, r1
 8002402:	d20b      	bcs.n	800241c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002404:	4a4f      	ldr	r2, [pc, #316]	; (8002544 <HAL_RCC_ClockConfig+0x158>)
 8002406:	6813      	ldr	r3, [r2, #0]
 8002408:	f023 030f 	bic.w	r3, r3, #15
 800240c:	430b      	orrs	r3, r1
 800240e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002410:	6813      	ldr	r3, [r2, #0]
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	428b      	cmp	r3, r1
 8002418:	f040 808d 	bne.w	8002536 <HAL_RCC_ClockConfig+0x14a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800241c:	6823      	ldr	r3, [r4, #0]
 800241e:	f013 0f02 	tst.w	r3, #2
 8002422:	d017      	beq.n	8002454 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002424:	f013 0f04 	tst.w	r3, #4
 8002428:	d004      	beq.n	8002434 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800242a:	4a47      	ldr	r2, [pc, #284]	; (8002548 <HAL_RCC_ClockConfig+0x15c>)
 800242c:	6893      	ldr	r3, [r2, #8]
 800242e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002432:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002434:	6823      	ldr	r3, [r4, #0]
 8002436:	f013 0f08 	tst.w	r3, #8
 800243a:	d004      	beq.n	8002446 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800243c:	4a42      	ldr	r2, [pc, #264]	; (8002548 <HAL_RCC_ClockConfig+0x15c>)
 800243e:	6893      	ldr	r3, [r2, #8]
 8002440:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002444:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002446:	4a40      	ldr	r2, [pc, #256]	; (8002548 <HAL_RCC_ClockConfig+0x15c>)
 8002448:	6893      	ldr	r3, [r2, #8]
 800244a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800244e:	68a1      	ldr	r1, [r4, #8]
 8002450:	430b      	orrs	r3, r1
 8002452:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002454:	6823      	ldr	r3, [r4, #0]
 8002456:	f013 0f01 	tst.w	r3, #1
 800245a:	d031      	beq.n	80024c0 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800245c:	6863      	ldr	r3, [r4, #4]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d020      	beq.n	80024a4 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002462:	2b02      	cmp	r3, #2
 8002464:	d025      	beq.n	80024b2 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002466:	4a38      	ldr	r2, [pc, #224]	; (8002548 <HAL_RCC_ClockConfig+0x15c>)
 8002468:	6812      	ldr	r2, [r2, #0]
 800246a:	f012 0f02 	tst.w	r2, #2
 800246e:	d064      	beq.n	800253a <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002470:	4935      	ldr	r1, [pc, #212]	; (8002548 <HAL_RCC_ClockConfig+0x15c>)
 8002472:	688a      	ldr	r2, [r1, #8]
 8002474:	f022 0203 	bic.w	r2, r2, #3
 8002478:	4313      	orrs	r3, r2
 800247a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800247c:	f7fe fdcc 	bl	8001018 <HAL_GetTick>
 8002480:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002482:	4b31      	ldr	r3, [pc, #196]	; (8002548 <HAL_RCC_ClockConfig+0x15c>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 030c 	and.w	r3, r3, #12
 800248a:	6862      	ldr	r2, [r4, #4]
 800248c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002490:	d016      	beq.n	80024c0 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002492:	f7fe fdc1 	bl	8001018 <HAL_GetTick>
 8002496:	1b80      	subs	r0, r0, r6
 8002498:	f241 3388 	movw	r3, #5000	; 0x1388
 800249c:	4298      	cmp	r0, r3
 800249e:	d9f0      	bls.n	8002482 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 80024a0:	2003      	movs	r0, #3
 80024a2:	e045      	b.n	8002530 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a4:	4a28      	ldr	r2, [pc, #160]	; (8002548 <HAL_RCC_ClockConfig+0x15c>)
 80024a6:	6812      	ldr	r2, [r2, #0]
 80024a8:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80024ac:	d1e0      	bne.n	8002470 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80024ae:	2001      	movs	r0, #1
 80024b0:	e03e      	b.n	8002530 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024b2:	4a25      	ldr	r2, [pc, #148]	; (8002548 <HAL_RCC_ClockConfig+0x15c>)
 80024b4:	6812      	ldr	r2, [r2, #0]
 80024b6:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80024ba:	d1d9      	bne.n	8002470 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80024bc:	2001      	movs	r0, #1
 80024be:	e037      	b.n	8002530 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024c0:	4b20      	ldr	r3, [pc, #128]	; (8002544 <HAL_RCC_ClockConfig+0x158>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 030f 	and.w	r3, r3, #15
 80024c8:	42ab      	cmp	r3, r5
 80024ca:	d90a      	bls.n	80024e2 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024cc:	4a1d      	ldr	r2, [pc, #116]	; (8002544 <HAL_RCC_ClockConfig+0x158>)
 80024ce:	6813      	ldr	r3, [r2, #0]
 80024d0:	f023 030f 	bic.w	r3, r3, #15
 80024d4:	432b      	orrs	r3, r5
 80024d6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d8:	6813      	ldr	r3, [r2, #0]
 80024da:	f003 030f 	and.w	r3, r3, #15
 80024de:	42ab      	cmp	r3, r5
 80024e0:	d12d      	bne.n	800253e <HAL_RCC_ClockConfig+0x152>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e2:	6823      	ldr	r3, [r4, #0]
 80024e4:	f013 0f04 	tst.w	r3, #4
 80024e8:	d006      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ea:	4a17      	ldr	r2, [pc, #92]	; (8002548 <HAL_RCC_ClockConfig+0x15c>)
 80024ec:	6893      	ldr	r3, [r2, #8]
 80024ee:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80024f2:	68e1      	ldr	r1, [r4, #12]
 80024f4:	430b      	orrs	r3, r1
 80024f6:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f8:	6823      	ldr	r3, [r4, #0]
 80024fa:	f013 0f08 	tst.w	r3, #8
 80024fe:	d007      	beq.n	8002510 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002500:	4a11      	ldr	r2, [pc, #68]	; (8002548 <HAL_RCC_ClockConfig+0x15c>)
 8002502:	6893      	ldr	r3, [r2, #8]
 8002504:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002508:	6921      	ldr	r1, [r4, #16]
 800250a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800250e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002510:	f7ff ff1a 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 8002514:	4b0c      	ldr	r3, [pc, #48]	; (8002548 <HAL_RCC_ClockConfig+0x15c>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800251c:	4a0b      	ldr	r2, [pc, #44]	; (800254c <HAL_RCC_ClockConfig+0x160>)
 800251e:	5cd3      	ldrb	r3, [r2, r3]
 8002520:	40d8      	lsrs	r0, r3
 8002522:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <HAL_RCC_ClockConfig+0x164>)
 8002524:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002526:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <HAL_RCC_ClockConfig+0x168>)
 8002528:	6818      	ldr	r0, [r3, #0]
 800252a:	f7fe fd33 	bl	8000f94 <HAL_InitTick>
  return HAL_OK;
 800252e:	2000      	movs	r0, #0
}
 8002530:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002532:	2001      	movs	r0, #1
}
 8002534:	4770      	bx	lr
      return HAL_ERROR;
 8002536:	2001      	movs	r0, #1
 8002538:	e7fa      	b.n	8002530 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 800253a:	2001      	movs	r0, #1
 800253c:	e7f8      	b.n	8002530 <HAL_RCC_ClockConfig+0x144>
      return HAL_ERROR;
 800253e:	2001      	movs	r0, #1
 8002540:	e7f6      	b.n	8002530 <HAL_RCC_ClockConfig+0x144>
 8002542:	bf00      	nop
 8002544:	40023c00 	.word	0x40023c00
 8002548:	40023800 	.word	0x40023800
 800254c:	0800b3c4 	.word	0x0800b3c4
 8002550:	20000000 	.word	0x20000000
 8002554:	20000008 	.word	0x20000008

08002558 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002558:	4b01      	ldr	r3, [pc, #4]	; (8002560 <HAL_RCC_GetHCLKFreq+0x8>)
 800255a:	6818      	ldr	r0, [r3, #0]
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	20000000 	.word	0x20000000

08002564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002564:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002566:	f7ff fff7 	bl	8002558 <HAL_RCC_GetHCLKFreq>
 800256a:	4b04      	ldr	r3, [pc, #16]	; (800257c <HAL_RCC_GetPCLK1Freq+0x18>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002572:	4a03      	ldr	r2, [pc, #12]	; (8002580 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002574:	5cd3      	ldrb	r3, [r2, r3]
}
 8002576:	40d8      	lsrs	r0, r3
 8002578:	bd08      	pop	{r3, pc}
 800257a:	bf00      	nop
 800257c:	40023800 	.word	0x40023800
 8002580:	0800b3d4 	.word	0x0800b3d4

08002584 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002584:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002586:	f7ff ffe7 	bl	8002558 <HAL_RCC_GetHCLKFreq>
 800258a:	4b04      	ldr	r3, [pc, #16]	; (800259c <HAL_RCC_GetPCLK2Freq+0x18>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002592:	4a03      	ldr	r2, [pc, #12]	; (80025a0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002594:	5cd3      	ldrb	r3, [r2, r3]
}
 8002596:	40d8      	lsrs	r0, r3
 8002598:	bd08      	pop	{r3, pc}
 800259a:	bf00      	nop
 800259c:	40023800 	.word	0x40023800
 80025a0:	0800b3d4 	.word	0x0800b3d4

080025a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025a6:	b083      	sub	sp, #12
 80025a8:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80025aa:	6806      	ldr	r6, [r0, #0]
 80025ac:	f016 0601 	ands.w	r6, r6, #1
 80025b0:	d00d      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80025b2:	4ba7      	ldr	r3, [pc, #668]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80025b4:	689a      	ldr	r2, [r3, #8]
 80025b6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	689a      	ldr	r2, [r3, #8]
 80025be:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80025c0:	430a      	orrs	r2, r1
 80025c2:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80025c4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f000 8139 	beq.w	800283e <HAL_RCCEx_PeriphCLKConfig+0x29a>
  uint32_t plli2sused = 0;
 80025cc:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80025ce:	6825      	ldr	r5, [r4, #0]
 80025d0:	f415 2500 	ands.w	r5, r5, #524288	; 0x80000
 80025d4:	d011      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025d6:	4a9e      	ldr	r2, [pc, #632]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80025d8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80025dc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80025e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80025e2:	430b      	orrs	r3, r1
 80025e4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80025e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025ee:	f000 8128 	beq.w	8002842 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 8127 	beq.w	8002846 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  uint32_t pllsaiused = 0;
 80025f8:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80025fa:	6823      	ldr	r3, [r4, #0]
 80025fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002600:	d00f      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002602:	4a93      	ldr	r2, [pc, #588]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002604:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002608:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800260c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800260e:	430b      	orrs	r3, r1
 8002610:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002614:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002616:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800261a:	f000 8116 	beq.w	800284a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800261e:	b903      	cbnz	r3, 8002622 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      pllsaiused = 1;
 8002620:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002622:	6823      	ldr	r3, [r4, #0]
 8002624:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002628:	d000      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
      plli2sused = 1;
 800262a:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800262c:	f013 0f20 	tst.w	r3, #32
 8002630:	f040 8110 	bne.w	8002854 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002634:	6823      	ldr	r3, [r4, #0]
 8002636:	f013 0f10 	tst.w	r3, #16
 800263a:	d00c      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800263c:	4b84      	ldr	r3, [pc, #528]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800263e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002642:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002646:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800264a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800264e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002650:	430a      	orrs	r2, r1
 8002652:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002656:	6823      	ldr	r3, [r4, #0]
 8002658:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800265c:	d008      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800265e:	4a7c      	ldr	r2, [pc, #496]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002660:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002664:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002668:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800266a:	430b      	orrs	r3, r1
 800266c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002670:	6823      	ldr	r3, [r4, #0]
 8002672:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002676:	d008      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002678:	4a75      	ldr	r2, [pc, #468]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800267a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800267e:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8002682:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002684:	430b      	orrs	r3, r1
 8002686:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800268a:	6823      	ldr	r3, [r4, #0]
 800268c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002690:	d008      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002692:	4a6f      	ldr	r2, [pc, #444]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002694:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002698:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800269c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800269e:	430b      	orrs	r3, r1
 80026a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80026a4:	6823      	ldr	r3, [r4, #0]
 80026a6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80026aa:	d008      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80026ac:	4a68      	ldr	r2, [pc, #416]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80026ae:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80026b2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80026b6:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80026b8:	430b      	orrs	r3, r1
 80026ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026be:	6823      	ldr	r3, [r4, #0]
 80026c0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80026c4:	d008      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026c6:	4a62      	ldr	r2, [pc, #392]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80026c8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80026cc:	f023 0303 	bic.w	r3, r3, #3
 80026d0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80026d2:	430b      	orrs	r3, r1
 80026d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026d8:	6823      	ldr	r3, [r4, #0]
 80026da:	f013 0f80 	tst.w	r3, #128	; 0x80
 80026de:	d008      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026e0:	4a5b      	ldr	r2, [pc, #364]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80026e2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80026e6:	f023 030c 	bic.w	r3, r3, #12
 80026ea:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80026ec:	430b      	orrs	r3, r1
 80026ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026f2:	6823      	ldr	r3, [r4, #0]
 80026f4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80026f8:	d008      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026fa:	4a55      	ldr	r2, [pc, #340]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80026fc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002700:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002704:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002706:	430b      	orrs	r3, r1
 8002708:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800270c:	6823      	ldr	r3, [r4, #0]
 800270e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002712:	d008      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002714:	4a4e      	ldr	r2, [pc, #312]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002716:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800271a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800271e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002720:	430b      	orrs	r3, r1
 8002722:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002726:	6823      	ldr	r3, [r4, #0]
 8002728:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800272c:	d008      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800272e:	4a48      	ldr	r2, [pc, #288]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002730:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002738:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800273a:	430b      	orrs	r3, r1
 800273c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002740:	6823      	ldr	r3, [r4, #0]
 8002742:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002746:	d008      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002748:	4a41      	ldr	r2, [pc, #260]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800274a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800274e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002752:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002754:	430b      	orrs	r3, r1
 8002756:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800275a:	6823      	ldr	r3, [r4, #0]
 800275c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002760:	d008      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002762:	4a3b      	ldr	r2, [pc, #236]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002764:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002768:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800276c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800276e:	430b      	orrs	r3, r1
 8002770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002774:	6823      	ldr	r3, [r4, #0]
 8002776:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800277a:	d008      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800277c:	4a34      	ldr	r2, [pc, #208]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800277e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002782:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002786:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8002788:	430b      	orrs	r3, r1
 800278a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800278e:	6823      	ldr	r3, [r4, #0]
 8002790:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002794:	d008      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002796:	4a2e      	ldr	r2, [pc, #184]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002798:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800279c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80027a0:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80027a2:	430b      	orrs	r3, r1
 80027a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80027a8:	6823      	ldr	r3, [r4, #0]
 80027aa:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80027ae:	d00d      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80027b0:	4a27      	ldr	r2, [pc, #156]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80027b2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80027b6:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80027ba:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80027bc:	430b      	orrs	r3, r1
 80027be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80027c2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80027c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027c8:	f000 80aa 	beq.w	8002920 <HAL_RCCEx_PeriphCLKConfig+0x37c>
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80027cc:	6823      	ldr	r3, [r4, #0]
 80027ce:	f013 0f08 	tst.w	r3, #8
 80027d2:	d000      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    pllsaiused = 1;
 80027d4:	2501      	movs	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80027d6:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80027da:	d008      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027dc:	4a1c      	ldr	r2, [pc, #112]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80027de:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80027e2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80027e6:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80027e8:	430b      	orrs	r3, r1
 80027ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80027ee:	6823      	ldr	r3, [r4, #0]
 80027f0:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80027f4:	d009      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027f6:	4a16      	ldr	r2, [pc, #88]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80027f8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80027fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002800:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002804:	430b      	orrs	r3, r1
 8002806:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800280a:	b926      	cbnz	r6, 8002816 <HAL_RCCEx_PeriphCLKConfig+0x272>
 800280c:	6823      	ldr	r3, [r4, #0]
 800280e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002812:	f000 8105 	beq.w	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002816:	4a0e      	ldr	r2, [pc, #56]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002818:	6813      	ldr	r3, [r2, #0]
 800281a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800281e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002820:	f7fe fbfa 	bl	8001018 <HAL_GetTick>
 8002824:	4606      	mov	r6, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002826:	4b0a      	ldr	r3, [pc, #40]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800282e:	d079      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002830:	f7fe fbf2 	bl	8001018 <HAL_GetTick>
 8002834:	1b80      	subs	r0, r0, r6
 8002836:	2864      	cmp	r0, #100	; 0x64
 8002838:	d9f5      	bls.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x282>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800283a:	2003      	movs	r0, #3
 800283c:	e0f3      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x482>
      plli2sused = 1;
 800283e:	2601      	movs	r6, #1
 8002840:	e6c5      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 8002842:	2601      	movs	r6, #1
 8002844:	e6d5      	b.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      pllsaiused = 1;
 8002846:	2501      	movs	r5, #1
 8002848:	e6d7      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x56>
      plli2sused = 1;
 800284a:	2601      	movs	r6, #1
 800284c:	e6e7      	b.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800284e:	bf00      	nop
 8002850:	40023800 	.word	0x40023800
    __HAL_RCC_PWR_CLK_ENABLE();
 8002854:	4b7f      	ldr	r3, [pc, #508]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8002856:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002858:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800285c:	641a      	str	r2, [r3, #64]	; 0x40
 800285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002864:	9301      	str	r3, [sp, #4]
 8002866:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8002868:	4a7b      	ldr	r2, [pc, #492]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 800286a:	6813      	ldr	r3, [r2, #0]
 800286c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002870:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002872:	f7fe fbd1 	bl	8001018 <HAL_GetTick>
 8002876:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002878:	4b77      	ldr	r3, [pc, #476]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002880:	d106      	bne.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002882:	f7fe fbc9 	bl	8001018 <HAL_GetTick>
 8002886:	1bc0      	subs	r0, r0, r7
 8002888:	2864      	cmp	r0, #100	; 0x64
 800288a:	d9f5      	bls.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        return HAL_TIMEOUT;
 800288c:	2003      	movs	r0, #3
 800288e:	e0ca      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x482>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002890:	4b70      	ldr	r3, [pc, #448]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8002892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002894:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002898:	d015      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x322>
 800289a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800289c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d010      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x322>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028a4:	4b6b      	ldr	r3, [pc, #428]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80028a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80028a8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80028ac:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80028ae:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80028b2:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028b4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80028b6:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80028ba:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 80028bc:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80028be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c0:	f013 0f01 	tst.w	r3, #1
 80028c4:	d112      	bne.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x348>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80028c8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80028cc:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80028d0:	d01d      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80028d2:	4a60      	ldr	r2, [pc, #384]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80028d4:	6893      	ldr	r3, [r2, #8]
 80028d6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80028da:	6093      	str	r3, [r2, #8]
 80028dc:	495d      	ldr	r1, [pc, #372]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80028de:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 80028e0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80028e2:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80028e6:	4313      	orrs	r3, r2
 80028e8:	670b      	str	r3, [r1, #112]	; 0x70
 80028ea:	e6a3      	b.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x90>
        tickstart = HAL_GetTick();
 80028ec:	f7fe fb94 	bl	8001018 <HAL_GetTick>
 80028f0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028f2:	4b58      	ldr	r3, [pc, #352]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80028f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f6:	f013 0f02 	tst.w	r3, #2
 80028fa:	d1e4      	bne.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x322>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028fc:	f7fe fb8c 	bl	8001018 <HAL_GetTick>
 8002900:	1bc0      	subs	r0, r0, r7
 8002902:	f241 3388 	movw	r3, #5000	; 0x1388
 8002906:	4298      	cmp	r0, r3
 8002908:	d9f3      	bls.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
            return HAL_TIMEOUT;
 800290a:	2003      	movs	r0, #3
 800290c:	e08b      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x482>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800290e:	4851      	ldr	r0, [pc, #324]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8002910:	6882      	ldr	r2, [r0, #8]
 8002912:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8002916:	4951      	ldr	r1, [pc, #324]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8002918:	4019      	ands	r1, r3
 800291a:	430a      	orrs	r2, r1
 800291c:	6082      	str	r2, [r0, #8]
 800291e:	e7dd      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x338>
      pllsaiused = 1;
 8002920:	2501      	movs	r5, #1
 8002922:	e753      	b.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x228>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002924:	6823      	ldr	r3, [r4, #0]
 8002926:	f013 0f01 	tst.w	r3, #1
 800292a:	d013      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800292c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800292e:	b98b      	cbnz	r3, 8002954 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002930:	4a48      	ldr	r2, [pc, #288]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8002932:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002936:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800293a:	6860      	ldr	r0, [r4, #4]
 800293c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002940:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002944:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8002948:	430b      	orrs	r3, r1
 800294a:	68a1      	ldr	r1, [r4, #8]
 800294c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002950:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002954:	6823      	ldr	r3, [r4, #0]
 8002956:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800295a:	d003      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800295c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800295e:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8002962:	d006      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8002964:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002968:	d01e      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x404>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800296a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800296c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002970:	d11a      	bne.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x404>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002972:	4a38      	ldr	r2, [pc, #224]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8002974:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002978:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800297c:	6860      	ldr	r0, [r4, #4]
 800297e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002982:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002986:	68e0      	ldr	r0, [r4, #12]
 8002988:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800298c:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002990:	430b      	orrs	r3, r1
 8002992:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002996:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800299a:	f023 031f 	bic.w	r3, r3, #31
 800299e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80029a0:	3901      	subs	r1, #1
 80029a2:	430b      	orrs	r3, r1
 80029a4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029a8:	6823      	ldr	r3, [r4, #0]
 80029aa:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80029ae:	d011      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80029b0:	4a28      	ldr	r2, [pc, #160]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80029b2:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80029b6:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80029ba:	6866      	ldr	r6, [r4, #4]
 80029bc:	6923      	ldr	r3, [r4, #16]
 80029be:	041b      	lsls	r3, r3, #16
 80029c0:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 80029c4:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 80029c8:	4303      	orrs	r3, r0
 80029ca:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80029ce:	430b      	orrs	r3, r1
 80029d0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80029d4:	6823      	ldr	r3, [r4, #0]
 80029d6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80029da:	d00d      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80029dc:	6862      	ldr	r2, [r4, #4]
 80029de:	6923      	ldr	r3, [r4, #16]
 80029e0:	041b      	lsls	r3, r3, #16
 80029e2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80029e6:	68e2      	ldr	r2, [r4, #12]
 80029e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80029ec:	68a2      	ldr	r2, [r4, #8]
 80029ee:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80029f2:	4a18      	ldr	r2, [pc, #96]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80029f4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80029f8:	4a16      	ldr	r2, [pc, #88]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 80029fa:	6813      	ldr	r3, [r2, #0]
 80029fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a02:	f7fe fb09 	bl	8001018 <HAL_GetTick>
 8002a06:	4606      	mov	r6, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a08:	4b12      	ldr	r3, [pc, #72]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002a10:	d106      	bne.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a12:	f7fe fb01 	bl	8001018 <HAL_GetTick>
 8002a16:	1b80      	subs	r0, r0, r6
 8002a18:	2864      	cmp	r0, #100	; 0x64
 8002a1a:	d9f5      	bls.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x464>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a1c:	2003      	movs	r0, #3
 8002a1e:	e002      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x482>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002a20:	2d01      	cmp	r5, #1
 8002a22:	d002      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x486>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002a24:	2000      	movs	r0, #0
}
 8002a26:	b003      	add	sp, #12
 8002a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 8002a2a:	4a0a      	ldr	r2, [pc, #40]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8002a2c:	6813      	ldr	r3, [r2, #0]
 8002a2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a32:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002a34:	f7fe faf0 	bl	8001018 <HAL_GetTick>
 8002a38:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a3a:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8002a42:	d00d      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a44:	f7fe fae8 	bl	8001018 <HAL_GetTick>
 8002a48:	1b40      	subs	r0, r0, r5
 8002a4a:	2864      	cmp	r0, #100	; 0x64
 8002a4c:	d9f5      	bls.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x496>
        return HAL_TIMEOUT;
 8002a4e:	2003      	movs	r0, #3
 8002a50:	e7e9      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8002a52:	bf00      	nop
 8002a54:	40023800 	.word	0x40023800
 8002a58:	40007000 	.word	0x40007000
 8002a5c:	0ffffcff 	.word	0x0ffffcff
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a60:	6823      	ldr	r3, [r4, #0]
 8002a62:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002a66:	d001      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
 8002a68:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002a6a:	b122      	cbz	r2, 8002a76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002a6c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002a70:	d01d      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x50a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a74:	b9db      	cbnz	r3, 8002aae <HAL_RCCEx_PeriphCLKConfig+0x50a>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a76:	4a35      	ldr	r2, [pc, #212]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8002a78:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a7c:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002a80:	6960      	ldr	r0, [r4, #20]
 8002a82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a86:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002a8a:	69a0      	ldr	r0, [r4, #24]
 8002a8c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002a90:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002a94:	430b      	orrs	r3, r1
 8002a96:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002a9a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002a9e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002aa2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002aa4:	3901      	subs	r1, #1
 8002aa6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002aaa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002aae:	6823      	ldr	r3, [r4, #0]
 8002ab0:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8002ab4:	d003      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002ab6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002ab8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002abc:	d031      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002abe:	6823      	ldr	r3, [r4, #0]
 8002ac0:	f013 0f08 	tst.w	r3, #8
 8002ac4:	d019      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x556>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ac6:	4a21      	ldr	r2, [pc, #132]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8002ac8:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002acc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002ad0:	6960      	ldr	r0, [r4, #20]
 8002ad2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ad6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002ada:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8002ade:	430b      	orrs	r3, r1
 8002ae0:	69e1      	ldr	r1, [r4, #28]
 8002ae2:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002ae6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002aea:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002aee:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002af2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002af4:	430b      	orrs	r3, r1
 8002af6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8002afa:	4a14      	ldr	r2, [pc, #80]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8002afc:	6813      	ldr	r3, [r2, #0]
 8002afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b02:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002b04:	f7fe fa88 	bl	8001018 <HAL_GetTick>
 8002b08:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b0a:	4b10      	ldr	r3, [pc, #64]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8002b12:	d119      	bne.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b14:	f7fe fa80 	bl	8001018 <HAL_GetTick>
 8002b18:	1b00      	subs	r0, r0, r4
 8002b1a:	2864      	cmp	r0, #100	; 0x64
 8002b1c:	d9f5      	bls.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x566>
        return HAL_TIMEOUT;
 8002b1e:	2003      	movs	r0, #3
 8002b20:	e781      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x482>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b22:	4a0a      	ldr	r2, [pc, #40]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>)
 8002b24:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b28:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002b2c:	6965      	ldr	r5, [r4, #20]
 8002b2e:	6a23      	ldr	r3, [r4, #32]
 8002b30:	041b      	lsls	r3, r3, #16
 8002b32:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8002b36:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8002b3a:	4303      	orrs	r3, r0
 8002b3c:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002b40:	430b      	orrs	r3, r1
 8002b42:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002b46:	e7ba      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x51a>
  return HAL_OK;
 8002b48:	2000      	movs	r0, #0
 8002b4a:	e76c      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8002b4c:	40023800 	.word	0x40023800

08002b50 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b50:	2800      	cmp	r0, #0
 8002b52:	d06f      	beq.n	8002c34 <HAL_SPI_Init+0xe4>
{
 8002b54:	b510      	push	{r4, lr}
 8002b56:	4604      	mov	r4, r0
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b58:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002b5a:	b933      	cbnz	r3, 8002b6a <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b5c:	6843      	ldr	r3, [r0, #4]
 8002b5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b62:	d005      	beq.n	8002b70 <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b64:	2300      	movs	r3, #0
 8002b66:	61c3      	str	r3, [r0, #28]
 8002b68:	e002      	b.n	8002b70 <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b6e:	6143      	str	r3, [r0, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b70:	2300      	movs	r3, #0
 8002b72:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b74:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d052      	beq.n	8002c22 <HAL_SPI_Init+0xd2>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b82:	6822      	ldr	r2, [r4, #0]
 8002b84:	6813      	ldr	r3, [r2, #0]
 8002b86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b8a:	6013      	str	r3, [r2, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b8c:	68e3      	ldr	r3, [r4, #12]
 8002b8e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b92:	d94c      	bls.n	8002c2e <HAL_SPI_Init+0xde>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002b94:	2200      	movs	r2, #0
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002b96:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002b9a:	bf18      	it	ne
 8002b9c:	f5b3 6fe0 	cmpne.w	r3, #1792	; 0x700
 8002ba0:	d001      	beq.n	8002ba6 <HAL_SPI_Init+0x56>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	62a3      	str	r3, [r4, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ba6:	6863      	ldr	r3, [r4, #4]
 8002ba8:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8002bac:	68a1      	ldr	r1, [r4, #8]
 8002bae:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8002bb2:	430b      	orrs	r3, r1
 8002bb4:	6921      	ldr	r1, [r4, #16]
 8002bb6:	f001 0102 	and.w	r1, r1, #2
 8002bba:	430b      	orrs	r3, r1
 8002bbc:	6961      	ldr	r1, [r4, #20]
 8002bbe:	f001 0101 	and.w	r1, r1, #1
 8002bc2:	430b      	orrs	r3, r1
 8002bc4:	69a1      	ldr	r1, [r4, #24]
 8002bc6:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8002bca:	430b      	orrs	r3, r1
 8002bcc:	69e1      	ldr	r1, [r4, #28]
 8002bce:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8002bd2:	430b      	orrs	r3, r1
 8002bd4:	6a21      	ldr	r1, [r4, #32]
 8002bd6:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002bda:	430b      	orrs	r3, r1
 8002bdc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002bde:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8002be2:	6820      	ldr	r0, [r4, #0]
 8002be4:	430b      	orrs	r3, r1
 8002be6:	6003      	str	r3, [r0, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002be8:	8b63      	ldrh	r3, [r4, #26]
 8002bea:	f003 0304 	and.w	r3, r3, #4
 8002bee:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002bf0:	f001 0110 	and.w	r1, r1, #16
 8002bf4:	430b      	orrs	r3, r1
 8002bf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002bf8:	f001 0108 	and.w	r1, r1, #8
 8002bfc:	430b      	orrs	r3, r1
 8002bfe:	68e1      	ldr	r1, [r4, #12]
 8002c00:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8002c04:	430b      	orrs	r3, r1
 8002c06:	6821      	ldr	r1, [r4, #0]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c0c:	6822      	ldr	r2, [r4, #0]
 8002c0e:	69d3      	ldr	r3, [r2, #28]
 8002c10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c14:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c16:	2000      	movs	r0, #0
 8002c18:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
}
 8002c20:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002c22:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8002c26:	4620      	mov	r0, r4
 8002c28:	f7fe f8d6 	bl	8000dd8 <HAL_SPI_MspInit>
 8002c2c:	e7a6      	b.n	8002b7c <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002c2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c32:	e7b0      	b.n	8002b96 <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 8002c34:	2001      	movs	r0, #1
}
 8002c36:	4770      	bx	lr

08002c38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c38:	b510      	push	{r4, lr}
 8002c3a:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c3c:	6883      	ldr	r3, [r0, #8]
 8002c3e:	6902      	ldr	r2, [r0, #16]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	6942      	ldr	r2, [r0, #20]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	69c2      	ldr	r2, [r0, #28]
 8002c48:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c4a:	6801      	ldr	r1, [r0, #0]
 8002c4c:	6808      	ldr	r0, [r1, #0]
 8002c4e:	4a93      	ldr	r2, [pc, #588]	; (8002e9c <UART_SetConfig+0x264>)
 8002c50:	4002      	ands	r2, r0
 8002c52:	4313      	orrs	r3, r2
 8002c54:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c56:	6822      	ldr	r2, [r4, #0]
 8002c58:	6853      	ldr	r3, [r2, #4]
 8002c5a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c5e:	68e1      	ldr	r1, [r4, #12]
 8002c60:	430b      	orrs	r3, r1
 8002c62:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c64:	69a2      	ldr	r2, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
 8002c66:	6a23      	ldr	r3, [r4, #32]
 8002c68:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c6a:	6821      	ldr	r1, [r4, #0]
 8002c6c:	688b      	ldr	r3, [r1, #8]
 8002c6e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002c72:	4313      	orrs	r3, r2
 8002c74:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c76:	6823      	ldr	r3, [r4, #0]
 8002c78:	4a89      	ldr	r2, [pc, #548]	; (8002ea0 <UART_SetConfig+0x268>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d019      	beq.n	8002cb2 <UART_SetConfig+0x7a>
 8002c7e:	4a89      	ldr	r2, [pc, #548]	; (8002ea4 <UART_SetConfig+0x26c>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d029      	beq.n	8002cd8 <UART_SetConfig+0xa0>
 8002c84:	4a88      	ldr	r2, [pc, #544]	; (8002ea8 <UART_SetConfig+0x270>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d03e      	beq.n	8002d08 <UART_SetConfig+0xd0>
 8002c8a:	4a88      	ldr	r2, [pc, #544]	; (8002eac <UART_SetConfig+0x274>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d062      	beq.n	8002d56 <UART_SetConfig+0x11e>
 8002c90:	4a87      	ldr	r2, [pc, #540]	; (8002eb0 <UART_SetConfig+0x278>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d071      	beq.n	8002d7a <UART_SetConfig+0x142>
 8002c96:	4a87      	ldr	r2, [pc, #540]	; (8002eb4 <UART_SetConfig+0x27c>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	f000 8083 	beq.w	8002da4 <UART_SetConfig+0x16c>
 8002c9e:	4a86      	ldr	r2, [pc, #536]	; (8002eb8 <UART_SetConfig+0x280>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	f000 8094 	beq.w	8002dce <UART_SetConfig+0x196>
 8002ca6:	4a85      	ldr	r2, [pc, #532]	; (8002ebc <UART_SetConfig+0x284>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	f000 80a5 	beq.w	8002df8 <UART_SetConfig+0x1c0>
 8002cae:	2310      	movs	r3, #16
 8002cb0:	e03a      	b.n	8002d28 <UART_SetConfig+0xf0>
 8002cb2:	4b83      	ldr	r3, [pc, #524]	; (8002ec0 <UART_SetConfig+0x288>)
 8002cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb8:	f003 0303 	and.w	r3, r3, #3
 8002cbc:	2b03      	cmp	r3, #3
 8002cbe:	d809      	bhi.n	8002cd4 <UART_SetConfig+0x9c>
 8002cc0:	e8df f003 	tbb	[pc, r3]
 8002cc4:	06ae0402 	.word	0x06ae0402
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e02d      	b.n	8002d28 <UART_SetConfig+0xf0>
 8002ccc:	2304      	movs	r3, #4
 8002cce:	e02b      	b.n	8002d28 <UART_SetConfig+0xf0>
 8002cd0:	2308      	movs	r3, #8
 8002cd2:	e029      	b.n	8002d28 <UART_SetConfig+0xf0>
 8002cd4:	2310      	movs	r3, #16
 8002cd6:	e027      	b.n	8002d28 <UART_SetConfig+0xf0>
 8002cd8:	4b79      	ldr	r3, [pc, #484]	; (8002ec0 <UART_SetConfig+0x288>)
 8002cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cde:	f003 030c 	and.w	r3, r3, #12
 8002ce2:	2b0c      	cmp	r3, #12
 8002ce4:	d80e      	bhi.n	8002d04 <UART_SetConfig+0xcc>
 8002ce6:	e8df f003 	tbb	[pc, r3]
 8002cea:	0d07      	.short	0x0d07
 8002cec:	0d090d0d 	.word	0x0d090d0d
 8002cf0:	0d9d0d0d 	.word	0x0d9d0d0d
 8002cf4:	0d0d      	.short	0x0d0d
 8002cf6:	0b          	.byte	0x0b
 8002cf7:	00          	.byte	0x00
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	e015      	b.n	8002d28 <UART_SetConfig+0xf0>
 8002cfc:	2304      	movs	r3, #4
 8002cfe:	e013      	b.n	8002d28 <UART_SetConfig+0xf0>
 8002d00:	2308      	movs	r3, #8
 8002d02:	e011      	b.n	8002d28 <UART_SetConfig+0xf0>
 8002d04:	2310      	movs	r3, #16
 8002d06:	e00f      	b.n	8002d28 <UART_SetConfig+0xf0>
 8002d08:	4b6d      	ldr	r3, [pc, #436]	; (8002ec0 <UART_SetConfig+0x288>)
 8002d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002d12:	2b20      	cmp	r3, #32
 8002d14:	f000 8088 	beq.w	8002e28 <UART_SetConfig+0x1f0>
 8002d18:	d819      	bhi.n	8002d4e <UART_SetConfig+0x116>
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 8086 	beq.w	8002e2c <UART_SetConfig+0x1f4>
 8002d20:	2b10      	cmp	r3, #16
 8002d22:	f040 8085 	bne.w	8002e30 <UART_SetConfig+0x1f8>
 8002d26:	2304      	movs	r3, #4

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d28:	69e0      	ldr	r0, [r4, #28]
 8002d2a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002d2e:	f000 80ab 	beq.w	8002e88 <UART_SetConfig+0x250>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d32:	2b08      	cmp	r3, #8
 8002d34:	f200 810c 	bhi.w	8002f50 <UART_SetConfig+0x318>
 8002d38:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002d3c:	00fb00e8 	.word	0x00fb00e8
 8002d40:	010a00e6 	.word	0x010a00e6
 8002d44:	010a00fe 	.word	0x010a00fe
 8002d48:	010a010a 	.word	0x010a010a
 8002d4c:	0101      	.short	0x0101
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d4e:	2b30      	cmp	r3, #48	; 0x30
 8002d50:	d170      	bne.n	8002e34 <UART_SetConfig+0x1fc>
 8002d52:	2308      	movs	r3, #8
 8002d54:	e7e8      	b.n	8002d28 <UART_SetConfig+0xf0>
 8002d56:	4b5a      	ldr	r3, [pc, #360]	; (8002ec0 <UART_SetConfig+0x288>)
 8002d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002d60:	2b80      	cmp	r3, #128	; 0x80
 8002d62:	d069      	beq.n	8002e38 <UART_SetConfig+0x200>
 8002d64:	d805      	bhi.n	8002d72 <UART_SetConfig+0x13a>
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d068      	beq.n	8002e3c <UART_SetConfig+0x204>
 8002d6a:	2b40      	cmp	r3, #64	; 0x40
 8002d6c:	d168      	bne.n	8002e40 <UART_SetConfig+0x208>
 8002d6e:	2304      	movs	r3, #4
 8002d70:	e7da      	b.n	8002d28 <UART_SetConfig+0xf0>
 8002d72:	2bc0      	cmp	r3, #192	; 0xc0
 8002d74:	d166      	bne.n	8002e44 <UART_SetConfig+0x20c>
 8002d76:	2308      	movs	r3, #8
 8002d78:	e7d6      	b.n	8002d28 <UART_SetConfig+0xf0>
 8002d7a:	4b51      	ldr	r3, [pc, #324]	; (8002ec0 <UART_SetConfig+0x288>)
 8002d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d88:	d05e      	beq.n	8002e48 <UART_SetConfig+0x210>
 8002d8a:	d806      	bhi.n	8002d9a <UART_SetConfig+0x162>
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d05d      	beq.n	8002e4c <UART_SetConfig+0x214>
 8002d90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d94:	d15c      	bne.n	8002e50 <UART_SetConfig+0x218>
 8002d96:	2304      	movs	r3, #4
 8002d98:	e7c6      	b.n	8002d28 <UART_SetConfig+0xf0>
 8002d9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d9e:	d159      	bne.n	8002e54 <UART_SetConfig+0x21c>
 8002da0:	2308      	movs	r3, #8
 8002da2:	e7c1      	b.n	8002d28 <UART_SetConfig+0xf0>
 8002da4:	4b46      	ldr	r3, [pc, #280]	; (8002ec0 <UART_SetConfig+0x288>)
 8002da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002daa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002dae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002db2:	d051      	beq.n	8002e58 <UART_SetConfig+0x220>
 8002db4:	d806      	bhi.n	8002dc4 <UART_SetConfig+0x18c>
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d050      	beq.n	8002e5c <UART_SetConfig+0x224>
 8002dba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dbe:	d14f      	bne.n	8002e60 <UART_SetConfig+0x228>
 8002dc0:	2304      	movs	r3, #4
 8002dc2:	e7b1      	b.n	8002d28 <UART_SetConfig+0xf0>
 8002dc4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002dc8:	d14c      	bne.n	8002e64 <UART_SetConfig+0x22c>
 8002dca:	2308      	movs	r3, #8
 8002dcc:	e7ac      	b.n	8002d28 <UART_SetConfig+0xf0>
 8002dce:	4b3c      	ldr	r3, [pc, #240]	; (8002ec0 <UART_SetConfig+0x288>)
 8002dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ddc:	d044      	beq.n	8002e68 <UART_SetConfig+0x230>
 8002dde:	d806      	bhi.n	8002dee <UART_SetConfig+0x1b6>
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d043      	beq.n	8002e6c <UART_SetConfig+0x234>
 8002de4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002de8:	d142      	bne.n	8002e70 <UART_SetConfig+0x238>
 8002dea:	2304      	movs	r3, #4
 8002dec:	e79c      	b.n	8002d28 <UART_SetConfig+0xf0>
 8002dee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002df2:	d13f      	bne.n	8002e74 <UART_SetConfig+0x23c>
 8002df4:	2308      	movs	r3, #8
 8002df6:	e797      	b.n	8002d28 <UART_SetConfig+0xf0>
 8002df8:	4b31      	ldr	r3, [pc, #196]	; (8002ec0 <UART_SetConfig+0x288>)
 8002dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e06:	d037      	beq.n	8002e78 <UART_SetConfig+0x240>
 8002e08:	d805      	bhi.n	8002e16 <UART_SetConfig+0x1de>
 8002e0a:	b3bb      	cbz	r3, 8002e7c <UART_SetConfig+0x244>
 8002e0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e10:	d136      	bne.n	8002e80 <UART_SetConfig+0x248>
 8002e12:	2304      	movs	r3, #4
 8002e14:	e788      	b.n	8002d28 <UART_SetConfig+0xf0>
 8002e16:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002e1a:	d133      	bne.n	8002e84 <UART_SetConfig+0x24c>
 8002e1c:	2308      	movs	r3, #8
 8002e1e:	e783      	b.n	8002d28 <UART_SetConfig+0xf0>
 8002e20:	2302      	movs	r3, #2
 8002e22:	e781      	b.n	8002d28 <UART_SetConfig+0xf0>
 8002e24:	2302      	movs	r3, #2
 8002e26:	e77f      	b.n	8002d28 <UART_SetConfig+0xf0>
 8002e28:	2302      	movs	r3, #2
 8002e2a:	e77d      	b.n	8002d28 <UART_SetConfig+0xf0>
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	e77b      	b.n	8002d28 <UART_SetConfig+0xf0>
 8002e30:	2310      	movs	r3, #16
 8002e32:	e779      	b.n	8002d28 <UART_SetConfig+0xf0>
 8002e34:	2310      	movs	r3, #16
 8002e36:	e777      	b.n	8002d28 <UART_SetConfig+0xf0>
 8002e38:	2302      	movs	r3, #2
 8002e3a:	e775      	b.n	8002d28 <UART_SetConfig+0xf0>
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	e773      	b.n	8002d28 <UART_SetConfig+0xf0>
 8002e40:	2310      	movs	r3, #16
 8002e42:	e771      	b.n	8002d28 <UART_SetConfig+0xf0>
 8002e44:	2310      	movs	r3, #16
 8002e46:	e76f      	b.n	8002d28 <UART_SetConfig+0xf0>
 8002e48:	2302      	movs	r3, #2
 8002e4a:	e76d      	b.n	8002d28 <UART_SetConfig+0xf0>
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	e76b      	b.n	8002d28 <UART_SetConfig+0xf0>
 8002e50:	2310      	movs	r3, #16
 8002e52:	e769      	b.n	8002d28 <UART_SetConfig+0xf0>
 8002e54:	2310      	movs	r3, #16
 8002e56:	e767      	b.n	8002d28 <UART_SetConfig+0xf0>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e765      	b.n	8002d28 <UART_SetConfig+0xf0>
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e763      	b.n	8002d28 <UART_SetConfig+0xf0>
 8002e60:	2310      	movs	r3, #16
 8002e62:	e761      	b.n	8002d28 <UART_SetConfig+0xf0>
 8002e64:	2310      	movs	r3, #16
 8002e66:	e75f      	b.n	8002d28 <UART_SetConfig+0xf0>
 8002e68:	2302      	movs	r3, #2
 8002e6a:	e75d      	b.n	8002d28 <UART_SetConfig+0xf0>
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	e75b      	b.n	8002d28 <UART_SetConfig+0xf0>
 8002e70:	2310      	movs	r3, #16
 8002e72:	e759      	b.n	8002d28 <UART_SetConfig+0xf0>
 8002e74:	2310      	movs	r3, #16
 8002e76:	e757      	b.n	8002d28 <UART_SetConfig+0xf0>
 8002e78:	2302      	movs	r3, #2
 8002e7a:	e755      	b.n	8002d28 <UART_SetConfig+0xf0>
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	e753      	b.n	8002d28 <UART_SetConfig+0xf0>
 8002e80:	2310      	movs	r3, #16
 8002e82:	e751      	b.n	8002d28 <UART_SetConfig+0xf0>
 8002e84:	2310      	movs	r3, #16
 8002e86:	e74f      	b.n	8002d28 <UART_SetConfig+0xf0>
    switch (clocksource)
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	d85b      	bhi.n	8002f44 <UART_SetConfig+0x30c>
 8002e8c:	e8df f003 	tbb	[pc, r3]
 8002e90:	5a3a341a 	.word	0x5a3a341a
 8002e94:	5a5a5a37 	.word	0x5a5a5a37
 8002e98:	1e          	.byte	0x1e
 8002e99:	00          	.byte	0x00
 8002e9a:	bf00      	nop
 8002e9c:	efff69f3 	.word	0xefff69f3
 8002ea0:	40011000 	.word	0x40011000
 8002ea4:	40004400 	.word	0x40004400
 8002ea8:	40004800 	.word	0x40004800
 8002eac:	40004c00 	.word	0x40004c00
 8002eb0:	40005000 	.word	0x40005000
 8002eb4:	40011400 	.word	0x40011400
 8002eb8:	40007800 	.word	0x40007800
 8002ebc:	40007c00 	.word	0x40007c00
 8002ec0:	40023800 	.word	0x40023800
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ec4:	f7ff fb4e 	bl	8002564 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002ec8:	2800      	cmp	r0, #0
 8002eca:	d03d      	beq.n	8002f48 <UART_SetConfig+0x310>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ecc:	6862      	ldr	r2, [r4, #4]
 8002ece:	0853      	lsrs	r3, r2, #1
 8002ed0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8002ed4:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ed8:	f1a0 0210 	sub.w	r2, r0, #16
 8002edc:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d833      	bhi.n	8002f4c <UART_SetConfig+0x314>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ee4:	b283      	uxth	r3, r0
 8002ee6:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002eea:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8002eee:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8002ef0:	6823      	ldr	r3, [r4, #0]
 8002ef2:	60d8      	str	r0, [r3, #12]
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	e030      	b.n	8002f5a <UART_SetConfig+0x322>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ef8:	f7ff fb44 	bl	8002584 <HAL_RCC_GetPCLK2Freq>
        break;
 8002efc:	e7e4      	b.n	8002ec8 <UART_SetConfig+0x290>
        pclk = HAL_RCC_GetSysClockFreq();
 8002efe:	f7ff fa23 	bl	8002348 <HAL_RCC_GetSysClockFreq>
        break;
 8002f02:	e7e1      	b.n	8002ec8 <UART_SetConfig+0x290>
        pclk = (uint32_t) HSI_VALUE;
 8002f04:	4817      	ldr	r0, [pc, #92]	; (8002f64 <UART_SetConfig+0x32c>)
 8002f06:	e7e1      	b.n	8002ecc <UART_SetConfig+0x294>
    switch (clocksource)
 8002f08:	4816      	ldr	r0, [pc, #88]	; (8002f64 <UART_SetConfig+0x32c>)
 8002f0a:	e002      	b.n	8002f12 <UART_SetConfig+0x2da>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f0c:	f7ff fb2a 	bl	8002564 <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 8002f10:	b300      	cbz	r0, 8002f54 <UART_SetConfig+0x31c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f12:	6863      	ldr	r3, [r4, #4]
 8002f14:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002f18:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f1c:	f1a0 0210 	sub.w	r2, r0, #16
 8002f20:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d817      	bhi.n	8002f58 <UART_SetConfig+0x320>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f28:	6823      	ldr	r3, [r4, #0]
 8002f2a:	b280      	uxth	r0, r0
 8002f2c:	60d8      	str	r0, [r3, #12]
 8002f2e:	2000      	movs	r0, #0
 8002f30:	e013      	b.n	8002f5a <UART_SetConfig+0x322>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f32:	f7ff fb27 	bl	8002584 <HAL_RCC_GetPCLK2Freq>
        break;
 8002f36:	e7eb      	b.n	8002f10 <UART_SetConfig+0x2d8>
        pclk = HAL_RCC_GetSysClockFreq();
 8002f38:	f7ff fa06 	bl	8002348 <HAL_RCC_GetSysClockFreq>
        break;
 8002f3c:	e7e8      	b.n	8002f10 <UART_SetConfig+0x2d8>
        pclk = (uint32_t) LSE_VALUE;
 8002f3e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002f42:	e7e6      	b.n	8002f12 <UART_SetConfig+0x2da>
    switch (clocksource)
 8002f44:	2001      	movs	r0, #1
 8002f46:	e008      	b.n	8002f5a <UART_SetConfig+0x322>
 8002f48:	2000      	movs	r0, #0
 8002f4a:	e006      	b.n	8002f5a <UART_SetConfig+0x322>
        ret = HAL_ERROR;
 8002f4c:	2001      	movs	r0, #1
 8002f4e:	e004      	b.n	8002f5a <UART_SetConfig+0x322>
    switch (clocksource)
 8002f50:	2001      	movs	r0, #1
 8002f52:	e002      	b.n	8002f5a <UART_SetConfig+0x322>
 8002f54:	2000      	movs	r0, #0
 8002f56:	e000      	b.n	8002f5a <UART_SetConfig+0x322>
      }
      else
      {
        ret = HAL_ERROR;
 8002f58:	2001      	movs	r0, #1
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8002f5e:	66a3      	str	r3, [r4, #104]	; 0x68

  return ret;
}
 8002f60:	bd10      	pop	{r4, pc}
 8002f62:	bf00      	nop
 8002f64:	00f42400 	.word	0x00f42400

08002f68 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f68:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002f6a:	f013 0f01 	tst.w	r3, #1
 8002f6e:	d006      	beq.n	8002f7e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f70:	6802      	ldr	r2, [r0, #0]
 8002f72:	6853      	ldr	r3, [r2, #4]
 8002f74:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002f78:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002f7a:	430b      	orrs	r3, r1
 8002f7c:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f7e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002f80:	f013 0f02 	tst.w	r3, #2
 8002f84:	d006      	beq.n	8002f94 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f86:	6802      	ldr	r2, [r0, #0]
 8002f88:	6853      	ldr	r3, [r2, #4]
 8002f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f8e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002f90:	430b      	orrs	r3, r1
 8002f92:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f94:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002f96:	f013 0f04 	tst.w	r3, #4
 8002f9a:	d006      	beq.n	8002faa <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f9c:	6802      	ldr	r2, [r0, #0]
 8002f9e:	6853      	ldr	r3, [r2, #4]
 8002fa0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fa4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8002fa6:	430b      	orrs	r3, r1
 8002fa8:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002faa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002fac:	f013 0f08 	tst.w	r3, #8
 8002fb0:	d006      	beq.n	8002fc0 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002fb2:	6802      	ldr	r2, [r0, #0]
 8002fb4:	6853      	ldr	r3, [r2, #4]
 8002fb6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002fba:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002fbc:	430b      	orrs	r3, r1
 8002fbe:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002fc0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002fc2:	f013 0f10 	tst.w	r3, #16
 8002fc6:	d006      	beq.n	8002fd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002fc8:	6802      	ldr	r2, [r0, #0]
 8002fca:	6893      	ldr	r3, [r2, #8]
 8002fcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fd0:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8002fd2:	430b      	orrs	r3, r1
 8002fd4:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002fd6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002fd8:	f013 0f20 	tst.w	r3, #32
 8002fdc:	d006      	beq.n	8002fec <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002fde:	6802      	ldr	r2, [r0, #0]
 8002fe0:	6893      	ldr	r3, [r2, #8]
 8002fe2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fe6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002fe8:	430b      	orrs	r3, r1
 8002fea:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002fec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002fee:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002ff2:	d00a      	beq.n	800300a <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ff4:	6802      	ldr	r2, [r0, #0]
 8002ff6:	6853      	ldr	r3, [r2, #4]
 8002ff8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002ffc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002ffe:	430b      	orrs	r3, r1
 8003000:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003002:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003004:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003008:	d00b      	beq.n	8003022 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800300a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800300c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003010:	d006      	beq.n	8003020 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003012:	6802      	ldr	r2, [r0, #0]
 8003014:	6853      	ldr	r3, [r2, #4]
 8003016:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800301a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800301c:	430b      	orrs	r3, r1
 800301e:	6053      	str	r3, [r2, #4]
  }
}
 8003020:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003022:	6802      	ldr	r2, [r0, #0]
 8003024:	6853      	ldr	r3, [r2, #4]
 8003026:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800302a:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800302c:	430b      	orrs	r3, r1
 800302e:	6053      	str	r3, [r2, #4]
 8003030:	e7eb      	b.n	800300a <UART_AdvFeatureConfig+0xa2>

08003032 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003032:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003036:	4605      	mov	r5, r0
 8003038:	460f      	mov	r7, r1
 800303a:	4616      	mov	r6, r2
 800303c:	4699      	mov	r9, r3
 800303e:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003042:	682c      	ldr	r4, [r5, #0]
 8003044:	69e4      	ldr	r4, [r4, #28]
 8003046:	ea37 0304 	bics.w	r3, r7, r4
 800304a:	bf0c      	ite	eq
 800304c:	f04f 0c01 	moveq.w	ip, #1
 8003050:	f04f 0c00 	movne.w	ip, #0
 8003054:	45b4      	cmp	ip, r6
 8003056:	d153      	bne.n	8003100 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003058:	f1b8 3fff 	cmp.w	r8, #4294967295
 800305c:	d0f1      	beq.n	8003042 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800305e:	f7fd ffdb 	bl	8001018 <HAL_GetTick>
 8003062:	eba0 0009 	sub.w	r0, r0, r9
 8003066:	4540      	cmp	r0, r8
 8003068:	d82d      	bhi.n	80030c6 <UART_WaitOnFlagUntilTimeout+0x94>
 800306a:	f1b8 0f00 	cmp.w	r8, #0
 800306e:	d02a      	beq.n	80030c6 <UART_WaitOnFlagUntilTimeout+0x94>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003070:	682b      	ldr	r3, [r5, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	f012 0f04 	tst.w	r2, #4
 8003078:	d0e3      	beq.n	8003042 <UART_WaitOnFlagUntilTimeout+0x10>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800307a:	69da      	ldr	r2, [r3, #28]
 800307c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8003080:	d0df      	beq.n	8003042 <UART_WaitOnFlagUntilTimeout+0x10>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003082:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003086:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003088:	682a      	ldr	r2, [r5, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800308a:	e852 3f00 	ldrex	r3, [r2]
 800308e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003092:	e842 3100 	strex	r1, r3, [r2]
 8003096:	2900      	cmp	r1, #0
 8003098:	d1f6      	bne.n	8003088 <UART_WaitOnFlagUntilTimeout+0x56>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800309a:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800309c:	f102 0308 	add.w	r3, r2, #8
 80030a0:	e853 3f00 	ldrex	r3, [r3]
 80030a4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a8:	3208      	adds	r2, #8
 80030aa:	e842 3100 	strex	r1, r3, [r2]
 80030ae:	2900      	cmp	r1, #0
 80030b0:	d1f3      	bne.n	800309a <UART_WaitOnFlagUntilTimeout+0x68>

          huart->gState = HAL_UART_STATE_READY;
 80030b2:	2320      	movs	r3, #32
 80030b4:	67ab      	str	r3, [r5, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80030b6:	67eb      	str	r3, [r5, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030b8:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030bc:	2300      	movs	r3, #0
 80030be:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74

          return HAL_TIMEOUT;
 80030c2:	2003      	movs	r0, #3
 80030c4:	e01d      	b.n	8003102 <UART_WaitOnFlagUntilTimeout+0xd0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030c6:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c8:	e852 3f00 	ldrex	r3, [r2]
 80030cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d0:	e842 3100 	strex	r1, r3, [r2]
 80030d4:	2900      	cmp	r1, #0
 80030d6:	d1f6      	bne.n	80030c6 <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030d8:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030da:	f102 0308 	add.w	r3, r2, #8
 80030de:	e853 3f00 	ldrex	r3, [r3]
 80030e2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e6:	3208      	adds	r2, #8
 80030e8:	e842 3100 	strex	r1, r3, [r2]
 80030ec:	2900      	cmp	r1, #0
 80030ee:	d1f3      	bne.n	80030d8 <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 80030f0:	2320      	movs	r3, #32
 80030f2:	67ab      	str	r3, [r5, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80030f4:	67eb      	str	r3, [r5, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 80030f6:	2300      	movs	r3, #0
 80030f8:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
        return HAL_TIMEOUT;
 80030fc:	2003      	movs	r0, #3
 80030fe:	e000      	b.n	8003102 <UART_WaitOnFlagUntilTimeout+0xd0>
        }
      }
    }
  }
  return HAL_OK;
 8003100:	2000      	movs	r0, #0
}
 8003102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003106 <UART_CheckIdleState>:
{
 8003106:	b510      	push	{r4, lr}
 8003108:	b082      	sub	sp, #8
 800310a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800310c:	2300      	movs	r3, #0
 800310e:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8003112:	f7fd ff81 	bl	8001018 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003116:	6823      	ldr	r3, [r4, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f013 0f08 	tst.w	r3, #8
 800311e:	d108      	bne.n	8003132 <UART_CheckIdleState+0x2c>
  huart->gState = HAL_UART_STATE_READY;
 8003120:	2320      	movs	r3, #32
 8003122:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003124:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003126:	2000      	movs	r0, #0
 8003128:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 800312a:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
}
 800312e:	b002      	add	sp, #8
 8003130:	bd10      	pop	{r4, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003132:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	4603      	mov	r3, r0
 800313a:	2200      	movs	r2, #0
 800313c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003140:	4620      	mov	r0, r4
 8003142:	f7ff ff76 	bl	8003032 <UART_WaitOnFlagUntilTimeout>
 8003146:	2800      	cmp	r0, #0
 8003148:	d0ea      	beq.n	8003120 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 800314a:	2003      	movs	r0, #3
 800314c:	e7ef      	b.n	800312e <UART_CheckIdleState+0x28>

0800314e <HAL_UART_Init>:
  if (huart == NULL)
 800314e:	b368      	cbz	r0, 80031ac <HAL_UART_Init+0x5e>
{
 8003150:	b510      	push	{r4, lr}
 8003152:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8003154:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8003156:	b303      	cbz	r3, 800319a <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8003158:	2324      	movs	r3, #36	; 0x24
 800315a:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 800315c:	6822      	ldr	r2, [r4, #0]
 800315e:	6813      	ldr	r3, [r2, #0]
 8003160:	f023 0301 	bic.w	r3, r3, #1
 8003164:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003166:	4620      	mov	r0, r4
 8003168:	f7ff fd66 	bl	8002c38 <UART_SetConfig>
 800316c:	2801      	cmp	r0, #1
 800316e:	d013      	beq.n	8003198 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003170:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003172:	b9bb      	cbnz	r3, 80031a4 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003174:	6822      	ldr	r2, [r4, #0]
 8003176:	6853      	ldr	r3, [r2, #4]
 8003178:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800317c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800317e:	6822      	ldr	r2, [r4, #0]
 8003180:	6893      	ldr	r3, [r2, #8]
 8003182:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8003186:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8003188:	6822      	ldr	r2, [r4, #0]
 800318a:	6813      	ldr	r3, [r2, #0]
 800318c:	f043 0301 	orr.w	r3, r3, #1
 8003190:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8003192:	4620      	mov	r0, r4
 8003194:	f7ff ffb7 	bl	8003106 <UART_CheckIdleState>
}
 8003198:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800319a:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 800319e:	f7fd fe63 	bl	8000e68 <HAL_UART_MspInit>
 80031a2:	e7d9      	b.n	8003158 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 80031a4:	4620      	mov	r0, r4
 80031a6:	f7ff fedf 	bl	8002f68 <UART_AdvFeatureConfig>
 80031aa:	e7e3      	b.n	8003174 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 80031ac:	2001      	movs	r0, #1
}
 80031ae:	4770      	bx	lr

080031b0 <_ZN3app7Factory10initializeEv>:

}

// static
void Factory::initialize()
{
 80031b0:	b508      	push	{r3, lr}
    Trace::initialize();
 80031b2:	f001 fa57 	bl	8004664 <_ZN5Trace10initializeEv>
    // TODO: Initialize factory attributes here

#if defined(TOUCHGFX_ENABLED) && (TOUCHGFX_ENABLED != 0)
    getTouchGfxTask().initialize(_buttonEventsHandler);
#endif
}
 80031b6:	bd08      	pop	{r3, pc}

080031b8 <Factory_initialize>:
#endif // TOUCHGFX_ENABLED

} /* namespace app */

void Factory_initialize()
{
 80031b8:	b508      	push	{r3, lr}
    app::Factory::initialize();
 80031ba:	f7ff fff9 	bl	80031b0 <_ZN3app7Factory10initializeEv>
}
 80031be:	bd08      	pop	{r3, pc}

080031c0 <Factory_build>:

void Factory_build()
{
    app::Factory::build();
}
 80031c0:	4770      	bx	lr
	...

080031c4 <_ZN7XFEventD1Ev>:
public :
    /**
     * Default class constructor
     */
    XFEvent(XFEventType eventType, int id, interface::XFReactive * pBehavior) : eventType_(eventType), id_(id), pBehavior_(pBehavior) {}
    virtual ~XFEvent() {}		///< Class destructor
 80031c4:	4b01      	ldr	r3, [pc, #4]	; (80031cc <_ZN7XFEventD1Ev+0x8>)
 80031c6:	6003      	str	r3, [r0, #0]
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	0800b798 	.word	0x0800b798

080031d0 <_ZNK7XFEvent18deleteAfterConsumeEv>:
     */
    inline void setBehavior(interface::XFReactive * pBehavior) { pBehavior_ = pBehavior; }

    inline int getId() const { return id_; }		///< Returns #_id identifying the event in the behaviors context.

    virtual bool deleteAfterConsume() const { return false; }	///< Tells the dispatcher if the event must be deleted or not.
 80031d0:	2000      	movs	r0, #0
 80031d2:	4770      	bx	lr

080031d4 <_ZN7XFEventD0Ev>:
    virtual ~XFEvent() {}		///< Class destructor
 80031d4:	b510      	push	{r4, lr}
 80031d6:	4604      	mov	r4, r0
 80031d8:	4b03      	ldr	r3, [pc, #12]	; (80031e8 <_ZN7XFEventD0Ev+0x14>)
 80031da:	6003      	str	r3, [r0, #0]
 80031dc:	2110      	movs	r1, #16
 80031de:	f006 ff91 	bl	800a104 <_ZdlPvj>
 80031e2:	4620      	mov	r0, r4
 80031e4:	bd10      	pop	{r4, pc}
 80031e6:	bf00      	nop
 80031e8:	0800b798 	.word	0x0800b798

080031ec <ft5336_Reset>:
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80031ec:	4770      	bx	lr

080031ee <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
 80031ee:	2000      	movs	r0, #0
 80031f0:	4770      	bx	lr

080031f2 <ft5336_TS_ClearIT>:
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
  /* Nothing to be done here for FT5336 */
}
 80031f2:	4770      	bx	lr

080031f4 <ft5336_Get_I2C_InitializedStatus>:
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
}
 80031f4:	4b01      	ldr	r3, [pc, #4]	; (80031fc <ft5336_Get_I2C_InitializedStatus+0x8>)
 80031f6:	7818      	ldrb	r0, [r3, #0]
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	20000340 	.word	0x20000340

08003200 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8003200:	b508      	push	{r3, lr}
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8003202:	f7ff fff7 	bl	80031f4 <ft5336_Get_I2C_InitializedStatus>
 8003206:	b910      	cbnz	r0, 800320e <ft5336_I2C_InitializeIfRequired+0xe>
  {
    /* Initialize TS IO BUS layer (I2C) */
    //TS_IO_Init();

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8003208:	4b01      	ldr	r3, [pc, #4]	; (8003210 <ft5336_I2C_InitializeIfRequired+0x10>)
 800320a:	2201      	movs	r2, #1
 800320c:	701a      	strb	r2, [r3, #0]
  }
}
 800320e:	bd08      	pop	{r3, pc}
 8003210:	20000340 	.word	0x20000340

08003214 <ft5336_Init>:
{
 8003214:	b508      	push	{r3, lr}
  ft5336_I2C_InitializeIfRequired();
 8003216:	f7ff fff3 	bl	8003200 <ft5336_I2C_InitializeIfRequired>
}
 800321a:	bd08      	pop	{r3, pc}

0800321c <ft5336_ReadID>:
{
 800321c:	b570      	push	{r4, r5, r6, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	4606      	mov	r6, r0
  volatile uint8_t ucReadId = 0;
 8003222:	2400      	movs	r4, #0
 8003224:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_I2C_InitializeIfRequired();
 8003228:	f7ff ffea 	bl	8003200 <ft5336_I2C_InitializeIfRequired>
  uint8_t bFoundDevice = 0; /* Device not found by default */
 800322c:	4625      	mov	r5, r4
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800322e:	e001      	b.n	8003234 <ft5336_ReadID+0x18>
 8003230:	3401      	adds	r4, #1
 8003232:	b2e4      	uxtb	r4, r4
 8003234:	f085 0301 	eor.w	r3, r5, #1
 8003238:	2c02      	cmp	r4, #2
 800323a:	bf8c      	ite	hi
 800323c:	2300      	movhi	r3, #0
 800323e:	f003 0301 	andls.w	r3, r3, #1
 8003242:	b163      	cbz	r3, 800325e <ft5336_ReadID+0x42>
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8003244:	21a8      	movs	r1, #168	; 0xa8
 8003246:	b2f0      	uxtb	r0, r6
 8003248:	f000 fc68 	bl	8003b1c <TS_IO_Read>
 800324c:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
 8003250:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b51      	cmp	r3, #81	; 0x51
 8003258:	d1ea      	bne.n	8003230 <ft5336_ReadID+0x14>
      bFoundDevice = 1;
 800325a:	2501      	movs	r5, #1
 800325c:	e7e8      	b.n	8003230 <ft5336_ReadID+0x14>
  return (ucReadId);
 800325e:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8003262:	b002      	add	sp, #8
 8003264:	bd70      	pop	{r4, r5, r6, pc}
	...

08003268 <ft5336_TS_DetectTouch>:
{
 8003268:	b500      	push	{lr}
 800326a:	b083      	sub	sp, #12
  volatile uint8_t nbTouch = 0;
 800326c:	2300      	movs	r3, #0
 800326e:	f88d 3007 	strb.w	r3, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8003272:	2102      	movs	r1, #2
 8003274:	b2c0      	uxtb	r0, r0
 8003276:	f000 fc51 	bl	8003b1c <TS_IO_Read>
 800327a:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 800327e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800328a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b05      	cmp	r3, #5
 8003292:	d902      	bls.n	800329a <ft5336_TS_DetectTouch+0x32>
    nbTouch = 0;
 8003294:	2300      	movs	r3, #0
 8003296:	f88d 3007 	strb.w	r3, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 800329a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800329e:	4b04      	ldr	r3, [pc, #16]	; (80032b0 <ft5336_TS_DetectTouch+0x48>)
 80032a0:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 80032a2:	2200      	movs	r2, #0
 80032a4:	709a      	strb	r2, [r3, #2]
  return(nbTouch);
 80032a6:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80032aa:	b003      	add	sp, #12
 80032ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80032b0:	20000340 	.word	0x20000340

080032b4 <ft5336_TS_GetXY>:
{
 80032b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032b8:	b082      	sub	sp, #8
 80032ba:	4616      	mov	r6, r2
  volatile uint8_t ucReadData = 0;
 80032bc:	2300      	movs	r3, #0
 80032be:	f88d 3007 	strb.w	r3, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80032c2:	4a4f      	ldr	r2, [pc, #316]	; (8003400 <ft5336_TS_GetXY+0x14c>)
 80032c4:	7893      	ldrb	r3, [r2, #2]
 80032c6:	7852      	ldrb	r2, [r2, #1]
 80032c8:	4293      	cmp	r3, r2
 80032ca:	f080 8095 	bcs.w	80033f8 <ft5336_TS_GetXY+0x144>
 80032ce:	460f      	mov	r7, r1
    switch(ft5336_handle.currActiveTouchIdx)
 80032d0:	2b09      	cmp	r3, #9
 80032d2:	d806      	bhi.n	80032e2 <ft5336_TS_GetXY+0x2e>
 80032d4:	e8df f003 	tbb	[pc, r3]
 80032d8:	1b130b53 	.word	0x1b130b53
 80032dc:	3b332b23 	.word	0x3b332b23
 80032e0:	4b43      	.short	0x4b43
 80032e2:	f04f 0800 	mov.w	r8, #0
 80032e6:	46c1      	mov	r9, r8
 80032e8:	46c2      	mov	sl, r8
 80032ea:	4641      	mov	r1, r8
 80032ec:	e04e      	b.n	800338c <ft5336_TS_GetXY+0xd8>
      regAddressYHigh = FT5336_P2_YH_REG;
 80032ee:	f04f 080b 	mov.w	r8, #11
      regAddressYLow  = FT5336_P2_YL_REG;
 80032f2:	f04f 090c 	mov.w	r9, #12
      regAddressXHigh = FT5336_P2_XH_REG;
 80032f6:	f04f 0a09 	mov.w	sl, #9
      regAddressXLow  = FT5336_P2_XL_REG;
 80032fa:	210a      	movs	r1, #10
      break;
 80032fc:	e046      	b.n	800338c <ft5336_TS_GetXY+0xd8>
      regAddressYHigh = FT5336_P3_YH_REG;
 80032fe:	f04f 0811 	mov.w	r8, #17
      regAddressYLow  = FT5336_P3_YL_REG;
 8003302:	f04f 0912 	mov.w	r9, #18
      regAddressXHigh = FT5336_P3_XH_REG;
 8003306:	f04f 0a0f 	mov.w	sl, #15
      regAddressXLow  = FT5336_P3_XL_REG;
 800330a:	2110      	movs	r1, #16
      break;
 800330c:	e03e      	b.n	800338c <ft5336_TS_GetXY+0xd8>
      regAddressYHigh = FT5336_P4_YH_REG;
 800330e:	f04f 0817 	mov.w	r8, #23
      regAddressYLow  = FT5336_P4_YL_REG;
 8003312:	f04f 0918 	mov.w	r9, #24
      regAddressXHigh = FT5336_P4_XH_REG;
 8003316:	f04f 0a15 	mov.w	sl, #21
      regAddressXLow  = FT5336_P4_XL_REG;
 800331a:	2116      	movs	r1, #22
      break;
 800331c:	e036      	b.n	800338c <ft5336_TS_GetXY+0xd8>
      regAddressYHigh = FT5336_P5_YH_REG;
 800331e:	f04f 081d 	mov.w	r8, #29
      regAddressYLow  = FT5336_P5_YL_REG;
 8003322:	f04f 091e 	mov.w	r9, #30
      regAddressXHigh = FT5336_P5_XH_REG;
 8003326:	f04f 0a1b 	mov.w	sl, #27
      regAddressXLow  = FT5336_P5_XL_REG;
 800332a:	211c      	movs	r1, #28
      break;
 800332c:	e02e      	b.n	800338c <ft5336_TS_GetXY+0xd8>
      regAddressYHigh = FT5336_P6_YH_REG;
 800332e:	f04f 0823 	mov.w	r8, #35	; 0x23
      regAddressYLow  = FT5336_P6_YL_REG;
 8003332:	f04f 0924 	mov.w	r9, #36	; 0x24
      regAddressXHigh = FT5336_P6_XH_REG;
 8003336:	f04f 0a21 	mov.w	sl, #33	; 0x21
      regAddressXLow  = FT5336_P6_XL_REG;
 800333a:	2122      	movs	r1, #34	; 0x22
      break;
 800333c:	e026      	b.n	800338c <ft5336_TS_GetXY+0xd8>
      regAddressYHigh = FT5336_P7_YH_REG;
 800333e:	f04f 0829 	mov.w	r8, #41	; 0x29
      regAddressYLow  = FT5336_P7_YL_REG;
 8003342:	f04f 092a 	mov.w	r9, #42	; 0x2a
      regAddressXHigh = FT5336_P7_XH_REG;
 8003346:	f04f 0a27 	mov.w	sl, #39	; 0x27
      regAddressXLow  = FT5336_P7_XL_REG;
 800334a:	2128      	movs	r1, #40	; 0x28
      break;
 800334c:	e01e      	b.n	800338c <ft5336_TS_GetXY+0xd8>
      regAddressYHigh = FT5336_P8_YH_REG;
 800334e:	f04f 082f 	mov.w	r8, #47	; 0x2f
      regAddressYLow  = FT5336_P8_YL_REG;
 8003352:	f04f 0930 	mov.w	r9, #48	; 0x30
      regAddressXHigh = FT5336_P8_XH_REG;
 8003356:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
      regAddressXLow  = FT5336_P8_XL_REG;
 800335a:	212e      	movs	r1, #46	; 0x2e
      break;
 800335c:	e016      	b.n	800338c <ft5336_TS_GetXY+0xd8>
      regAddressYHigh = FT5336_P9_YH_REG;
 800335e:	f04f 0835 	mov.w	r8, #53	; 0x35
      regAddressYLow  = FT5336_P9_YL_REG;
 8003362:	f04f 0936 	mov.w	r9, #54	; 0x36
      regAddressXHigh = FT5336_P9_XH_REG;
 8003366:	f04f 0a33 	mov.w	sl, #51	; 0x33
      regAddressXLow  = FT5336_P9_XL_REG;
 800336a:	2134      	movs	r1, #52	; 0x34
      break;
 800336c:	e00e      	b.n	800338c <ft5336_TS_GetXY+0xd8>
      regAddressYHigh = FT5336_P10_YH_REG;
 800336e:	f04f 083b 	mov.w	r8, #59	; 0x3b
      regAddressYLow  = FT5336_P10_YL_REG;
 8003372:	f04f 093c 	mov.w	r9, #60	; 0x3c
      regAddressXHigh = FT5336_P10_XH_REG;
 8003376:	f04f 0a39 	mov.w	sl, #57	; 0x39
      regAddressXLow  = FT5336_P10_XL_REG;
 800337a:	213a      	movs	r1, #58	; 0x3a
      break;
 800337c:	e006      	b.n	800338c <ft5336_TS_GetXY+0xd8>
      regAddressYHigh = FT5336_P1_YH_REG;
 800337e:	f04f 0805 	mov.w	r8, #5
      regAddressYLow  = FT5336_P1_YL_REG;
 8003382:	f04f 0906 	mov.w	r9, #6
      regAddressXHigh = FT5336_P1_XH_REG;
 8003386:	f04f 0a03 	mov.w	sl, #3
      regAddressXLow  = FT5336_P1_XL_REG;
 800338a:	2104      	movs	r1, #4
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800338c:	b2c4      	uxtb	r4, r0
 800338e:	4620      	mov	r0, r4
 8003390:	f000 fbc4 	bl	8003b1c <TS_IO_Read>
 8003394:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8003398:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800339c:	4d18      	ldr	r5, [pc, #96]	; (8003400 <ft5336_TS_GetXY+0x14c>)
 800339e:	80ab      	strh	r3, [r5, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80033a0:	4651      	mov	r1, sl
 80033a2:	4620      	mov	r0, r4
 80033a4:	f000 fbba 	bl	8003b1c <TS_IO_Read>
 80033a8:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80033ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80033b0:	021b      	lsls	r3, r3, #8
 80033b2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80033b6:	88aa      	ldrh	r2, [r5, #4]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	80ab      	strh	r3, [r5, #4]
    *X = coord;
 80033be:	803b      	strh	r3, [r7, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80033c0:	4649      	mov	r1, r9
 80033c2:	4620      	mov	r0, r4
 80033c4:	f000 fbaa 	bl	8003b1c <TS_IO_Read>
 80033c8:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80033cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80033d0:	80ab      	strh	r3, [r5, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80033d2:	4641      	mov	r1, r8
 80033d4:	4620      	mov	r0, r4
 80033d6:	f000 fba1 	bl	8003b1c <TS_IO_Read>
 80033da:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80033de:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80033e2:	021b      	lsls	r3, r3, #8
 80033e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80033e8:	88aa      	ldrh	r2, [r5, #4]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	80ab      	strh	r3, [r5, #4]
    *Y = coord;
 80033f0:	8033      	strh	r3, [r6, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80033f2:	78ab      	ldrb	r3, [r5, #2]
 80033f4:	3301      	adds	r3, #1
 80033f6:	70ab      	strb	r3, [r5, #2]
}
 80033f8:	b002      	add	sp, #8
 80033fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033fe:	bf00      	nop
 8003400:	20000340 	.word	0x20000340

08003404 <ft5336_TS_EnableIT>:
{
 8003404:	b508      	push	{r3, lr}
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8003406:	2201      	movs	r2, #1
 8003408:	21a4      	movs	r1, #164	; 0xa4
 800340a:	b2c0      	uxtb	r0, r0
 800340c:	f000 fb72 	bl	8003af4 <TS_IO_Write>
}
 8003410:	bd08      	pop	{r3, pc}

08003412 <ft5336_TS_DisableIT>:
{
 8003412:	b508      	push	{r3, lr}
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8003414:	2200      	movs	r2, #0
 8003416:	21a4      	movs	r1, #164	; 0xa4
 8003418:	b2c0      	uxtb	r0, r0
 800341a:	f000 fb6b 	bl	8003af4 <TS_IO_Write>
}
 800341e:	bd08      	pop	{r3, pc}

08003420 <ft5336_TS_Start>:
{
 8003420:	b508      	push	{r3, lr}
  ft5336_TS_DisableIT(DeviceAddr);
 8003422:	f7ff fff6 	bl	8003412 <ft5336_TS_DisableIT>
}
 8003426:	bd08      	pop	{r3, pc}

08003428 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
     * @return The type of this event.
     */
    virtual Event::EventType getEventType()
    {
        return Event::EVENT_CLICK;
    }
 8003428:	2000      	movs	r0, #0
 800342a:	4770      	bx	lr

0800342c <_ZN8touchgfx9DragEvent12getEventTypeEv>:
     * @return The type of this event.
     */
    virtual Event::EventType getEventType()
    {
        return Event::EVENT_DRAG;
    }
 800342c:	2001      	movs	r0, #1
 800342e:	4770      	bx	lr

08003430 <_ZN8touchgfx9DragEventD1Ev>:
class DragEvent : public Event
 8003430:	4a02      	ldr	r2, [pc, #8]	; (800343c <_ZN8touchgfx9DragEventD1Ev+0xc>)
 8003432:	6002      	str	r2, [r0, #0]
     */
    virtual EventType getEventType() = 0;

    /** Finalizes an instance of the Event class. */
    virtual ~Event()
    {
 8003434:	4a02      	ldr	r2, [pc, #8]	; (8003440 <_ZN8touchgfx9DragEventD1Ev+0x10>)
 8003436:	6002      	str	r2, [r0, #0]
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	0800b7d4 	.word	0x0800b7d4
 8003440:	0800b7ac 	.word	0x0800b7ac

08003444 <_ZN8touchgfx10ClickEventD1Ev>:
class ClickEvent : public Event
 8003444:	4a02      	ldr	r2, [pc, #8]	; (8003450 <_ZN8touchgfx10ClickEventD1Ev+0xc>)
 8003446:	6002      	str	r2, [r0, #0]
 8003448:	4a02      	ldr	r2, [pc, #8]	; (8003454 <_ZN8touchgfx10ClickEventD1Ev+0x10>)
 800344a:	6002      	str	r2, [r0, #0]
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	0800b7c0 	.word	0x0800b7c0
 8003454:	0800b7ac 	.word	0x0800b7ac

08003458 <_ZN8touchgfx10ClickEventD0Ev>:
 8003458:	b510      	push	{r4, lr}
 800345a:	4604      	mov	r4, r0
 800345c:	4b04      	ldr	r3, [pc, #16]	; (8003470 <_ZN8touchgfx10ClickEventD0Ev+0x18>)
 800345e:	6003      	str	r3, [r0, #0]
 8003460:	4b04      	ldr	r3, [pc, #16]	; (8003474 <_ZN8touchgfx10ClickEventD0Ev+0x1c>)
 8003462:	6003      	str	r3, [r0, #0]
 8003464:	210c      	movs	r1, #12
 8003466:	f006 fe4d 	bl	800a104 <_ZdlPvj>
 800346a:	4620      	mov	r0, r4
 800346c:	bd10      	pop	{r4, pc}
 800346e:	bf00      	nop
 8003470:	0800b7c0 	.word	0x0800b7c0
 8003474:	0800b7ac 	.word	0x0800b7ac

08003478 <_ZN8touchgfx9DragEventD0Ev>:
 8003478:	b510      	push	{r4, lr}
 800347a:	4604      	mov	r4, r0
 800347c:	4b04      	ldr	r3, [pc, #16]	; (8003490 <_ZN8touchgfx9DragEventD0Ev+0x18>)
 800347e:	6003      	str	r3, [r0, #0]
 8003480:	4b04      	ldr	r3, [pc, #16]	; (8003494 <_ZN8touchgfx9DragEventD0Ev+0x1c>)
 8003482:	6003      	str	r3, [r0, #0]
 8003484:	2110      	movs	r1, #16
 8003486:	f006 fe3d 	bl	800a104 <_ZdlPvj>
 800348a:	4620      	mov	r0, r4
 800348c:	bd10      	pop	{r4, pc}
 800348e:	bf00      	nop
 8003490:	0800b7d4 	.word	0x0800b7d4
 8003494:	0800b7ac 	.word	0x0800b7ac

08003498 <MX_TouchGFX_Init>:
{
#if defined(TOUCHGFX_ENABLED) && (TOUCHGFX_ENABLED != 0)
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
#endif
}
 8003498:	4770      	bx	lr
	...

0800349c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800349c:	4a02      	ldr	r2, [pc, #8]	; (80034a8 <_ZN23ApplicationFontProviderD1Ev+0xc>)
 800349e:	6002      	str	r2, [r0, #0]
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
    {
 80034a0:	4a02      	ldr	r2, [pc, #8]	; (80034ac <_ZN23ApplicationFontProviderD1Ev+0x10>)
 80034a2:	6002      	str	r2, [r0, #0]
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	0800b3e4 	.word	0x0800b3e4
 80034ac:	0800b7e8 	.word	0x0800b7e8

080034b0 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 80034b0:	b508      	push	{r3, lr}
    switch (typography)
 80034b2:	2901      	cmp	r1, #1
 80034b4:	d008      	beq.n	80034c8 <_ZN23ApplicationFontProvider7getFontEt+0x18>
 80034b6:	2902      	cmp	r1, #2
 80034b8:	d00a      	beq.n	80034d0 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 80034ba:	b109      	cbz	r1, 80034c0 <_ZN23ApplicationFontProvider7getFontEt+0x10>
 80034bc:	2000      	movs	r0, #0
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 80034be:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80034c0:	f000 fa32 	bl	8003928 <_ZN17TypedTextDatabase8getFontsEv>
 80034c4:	6800      	ldr	r0, [r0, #0]
 80034c6:	e7fa      	b.n	80034be <_ZN23ApplicationFontProvider7getFontEt+0xe>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80034c8:	f000 fa2e 	bl	8003928 <_ZN17TypedTextDatabase8getFontsEv>
 80034cc:	6840      	ldr	r0, [r0, #4]
 80034ce:	e7f6      	b.n	80034be <_ZN23ApplicationFontProvider7getFontEt+0xe>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80034d0:	f000 fa2a 	bl	8003928 <_ZN17TypedTextDatabase8getFontsEv>
 80034d4:	6880      	ldr	r0, [r0, #8]
 80034d6:	e7f2      	b.n	80034be <_ZN23ApplicationFontProvider7getFontEt+0xe>

080034d8 <_ZN23ApplicationFontProviderD0Ev>:
 80034d8:	b510      	push	{r4, lr}
 80034da:	4604      	mov	r4, r0
 80034dc:	4b04      	ldr	r3, [pc, #16]	; (80034f0 <_ZN23ApplicationFontProviderD0Ev+0x18>)
 80034de:	6003      	str	r3, [r0, #0]
 80034e0:	4b04      	ldr	r3, [pc, #16]	; (80034f4 <_ZN23ApplicationFontProviderD0Ev+0x1c>)
 80034e2:	6003      	str	r3, [r0, #0]
 80034e4:	2104      	movs	r1, #4
 80034e6:	f006 fe0d 	bl	800a104 <_ZdlPvj>
 80034ea:	4620      	mov	r0, r4
 80034ec:	bd10      	pop	{r4, pc}
 80034ee:	bf00      	nop
 80034f0:	0800b3e4 	.word	0x0800b3e4
 80034f4:	0800b7e8 	.word	0x0800b7e8

080034f8 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
    {
        if (unicode == 0)
 80034f8:	b169      	cbz	r1, 8003516 <_ZNK8touchgfx4Font8getGlyphEt+0x1e>
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 80034fa:	b510      	push	{r4, lr}
 80034fc:	b082      	sub	sp, #8
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
 80034fe:	2300      	movs	r3, #0
 8003500:	9301      	str	r3, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8003502:	f88d 3003 	strb.w	r3, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003506:	6803      	ldr	r3, [r0, #0]
 8003508:	689c      	ldr	r4, [r3, #8]
 800350a:	f10d 0303 	add.w	r3, sp, #3
 800350e:	aa01      	add	r2, sp, #4
 8003510:	47a0      	blx	r4
        return glyph;
    }
 8003512:	b002      	add	sp, #8
 8003514:	bd10      	pop	{r4, pc}
            return 0;
 8003516:	2000      	movs	r0, #0
    }
 8003518:	4770      	bx	lr

0800351a <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 800351a:	8940      	ldrh	r0, [r0, #10]
 800351c:	4770      	bx	lr

0800351e <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 800351e:	8980      	ldrh	r0, [r0, #12]
 8003520:	4770      	bx	lr

08003522 <_ZNK8touchgfx4Font13getFontHeightEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
    {
        return fontHeight;
    }
 8003522:	8880      	ldrh	r0, [r0, #4]
 8003524:	4770      	bx	lr

08003526 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
    {
        return fontHeight + pixelsBelowBaseline;
 8003526:	8883      	ldrh	r3, [r0, #4]
 8003528:	7980      	ldrb	r0, [r0, #6]
 800352a:	4418      	add	r0, r3
    }
 800352c:	b280      	uxth	r0, r0
 800352e:	4770      	bx	lr

08003530 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8003530:	79c0      	ldrb	r0, [r0, #7]
    }
 8003532:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8003536:	4770      	bx	lr

08003538 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8003538:	79c0      	ldrb	r0, [r0, #7]
    }
 800353a:	09c0      	lsrs	r0, r0, #7
 800353c:	4770      	bx	lr

0800353e <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 800353e:	6a00      	ldr	r0, [r0, #32]
 8003540:	4770      	bx	lr
	...

08003544 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8003544:	4a03      	ldr	r2, [pc, #12]	; (8003554 <_ZN8touchgfx13GeneratedFontD1Ev+0x10>)
 8003546:	6002      	str	r2, [r0, #0]
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8003548:	4a03      	ldr	r2, [pc, #12]	; (8003558 <_ZN8touchgfx13GeneratedFontD1Ev+0x14>)
 800354a:	6002      	str	r2, [r0, #0]
    {
 800354c:	4a03      	ldr	r2, [pc, #12]	; (800355c <_ZN8touchgfx13GeneratedFontD1Ev+0x18>)
 800354e:	6002      	str	r2, [r0, #0]
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	0800b3f8 	.word	0x0800b3f8
 8003558:	0800c8a0 	.word	0x0800c8a0
 800355c:	0800b458 	.word	0x0800b458

08003560 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
{
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8003560:	6982      	ldr	r2, [r0, #24]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8003562:	888b      	ldrh	r3, [r1, #4]
 8003564:	0adb      	lsrs	r3, r3, #11
 8003566:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800356a:	680b      	ldr	r3, [r1, #0]
}
 800356c:	4418      	add	r0, r3
 800356e:	4770      	bx	lr

08003570 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
    if (!glyph || glyph->kerningTableSize == 0)
 8003570:	4694      	mov	ip, r2
 8003572:	b1da      	cbz	r2, 80035ac <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3c>
 8003574:	7b13      	ldrb	r3, [r2, #12]
 8003576:	b1db      	cbz	r3, 80035b0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x40>
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8003578:	69c2      	ldr	r2, [r0, #28]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800357a:	f89c 000d 	ldrb.w	r0, [ip, #13]
 800357e:	0200      	lsls	r0, r0, #8
 8003580:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8003584:	f89c c00b 	ldrb.w	ip, [ip, #11]
 8003588:	ea40 000c 	orr.w	r0, r0, ip
 800358c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003590:	b29b      	uxth	r3, r3
 8003592:	b17b      	cbz	r3, 80035b4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x44>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8003594:	8810      	ldrh	r0, [r2, #0]
 8003596:	4288      	cmp	r0, r1
 8003598:	d005      	beq.n	80035a6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        {
            return kerndata->distance;
        }
        if (prevChar < kerndata->unicodePrevChar)
 800359a:	4288      	cmp	r0, r1
 800359c:	d80c      	bhi.n	80035b8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x48>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800359e:	3b01      	subs	r3, #1
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	3204      	adds	r2, #4
 80035a4:	e7f5      	b.n	8003592 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x22>
            return kerndata->distance;
 80035a6:	f992 0002 	ldrsb.w	r0, [r2, #2]
 80035aa:	4770      	bx	lr
        return 0;
 80035ac:	2000      	movs	r0, #0
 80035ae:	4770      	bx	lr
 80035b0:	2000      	movs	r0, #0
 80035b2:	4770      	bx	lr
        {
            break;
        }
    }
    return 0;
 80035b4:	2000      	movs	r0, #0
 80035b6:	4770      	bx	lr
 80035b8:	2000      	movs	r0, #0
}
 80035ba:	4770      	bx	lr

080035bc <_ZN8touchgfx13GeneratedFontD0Ev>:
 80035bc:	b510      	push	{r4, lr}
 80035be:	4604      	mov	r4, r0
 80035c0:	4b05      	ldr	r3, [pc, #20]	; (80035d8 <_ZN8touchgfx13GeneratedFontD0Ev+0x1c>)
 80035c2:	6003      	str	r3, [r0, #0]
 80035c4:	4b05      	ldr	r3, [pc, #20]	; (80035dc <_ZN8touchgfx13GeneratedFontD0Ev+0x20>)
 80035c6:	6003      	str	r3, [r0, #0]
    {
 80035c8:	4b05      	ldr	r3, [pc, #20]	; (80035e0 <_ZN8touchgfx13GeneratedFontD0Ev+0x24>)
 80035ca:	6003      	str	r3, [r0, #0]
 80035cc:	2124      	movs	r1, #36	; 0x24
 80035ce:	f006 fd99 	bl	800a104 <_ZdlPvj>
 80035d2:	4620      	mov	r0, r4
 80035d4:	bd10      	pop	{r4, pc}
 80035d6:	bf00      	nop
 80035d8:	0800b3f8 	.word	0x0800b3f8
 80035dc:	0800c8a0 	.word	0x0800c8a0
 80035e0:	0800b458 	.word	0x0800b458

080035e4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 80035e4:	b530      	push	{r4, r5, lr}
 80035e6:	b089      	sub	sp, #36	; 0x24
 80035e8:	4604      	mov	r4, r0
    gsubTable(gsubData)
 80035ea:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 80035ee:	9506      	str	r5, [sp, #24]
 80035f0:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 80035f4:	9505      	str	r5, [sp, #20]
 80035f6:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 80035fa:	9504      	str	r5, [sp, #16]
 80035fc:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8003600:	9503      	str	r5, [sp, #12]
 8003602:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 8003606:	9502      	str	r5, [sp, #8]
 8003608:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 800360c:	9501      	str	r5, [sp, #4]
 800360e:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8003612:	9500      	str	r5, [sp, #0]
 8003614:	f003 fdfe 	bl	8007214 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8003618:	4b05      	ldr	r3, [pc, #20]	; (8003630 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x4c>)
 800361a:	6023      	str	r3, [r4, #0]
 800361c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800361e:	61a3      	str	r3, [r4, #24]
 8003620:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003622:	61e3      	str	r3, [r4, #28]
 8003624:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003626:	6223      	str	r3, [r4, #32]
}
 8003628:	4620      	mov	r0, r4
 800362a:	b009      	add	sp, #36	; 0x24
 800362c:	bd30      	pop	{r4, r5, pc}
 800362e:	bf00      	nop
 8003630:	0800b3f8 	.word	0x0800b3f8

08003634 <__tcf_0>:
 8003634:	4b03      	ldr	r3, [pc, #12]	; (8003644 <__tcf_0+0x10>)
 8003636:	4a04      	ldr	r2, [pc, #16]	; (8003648 <__tcf_0+0x14>)
 8003638:	601a      	str	r2, [r3, #0]
 800363a:	4a04      	ldr	r2, [pc, #16]	; (800364c <__tcf_0+0x18>)
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	4a04      	ldr	r2, [pc, #16]	; (8003650 <__tcf_0+0x1c>)
 8003640:	601a      	str	r2, [r3, #0]

touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 68, 10, 2, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 8003642:	4770      	bx	lr
 8003644:	20000348 	.word	0x20000348
 8003648:	0800b3f8 	.word	0x0800b3f8
 800364c:	0800c8a0 	.word	0x0800c8a0
 8003650:	0800b458 	.word	0x0800b458

08003654 <_Z23getFont_verdana_10_4bppv>:
 8003654:	4b19      	ldr	r3, [pc, #100]	; (80036bc <_Z23getFont_verdana_10_4bppv+0x68>)
 8003656:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800365a:	f3bf 8f5b 	dmb	ish
 800365e:	f013 0f01 	tst.w	r3, #1
 8003662:	d001      	beq.n	8003668 <_Z23getFont_verdana_10_4bppv+0x14>
    return verdana_10_4bpp;
}
 8003664:	4815      	ldr	r0, [pc, #84]	; (80036bc <_Z23getFont_verdana_10_4bppv+0x68>)
 8003666:	4770      	bx	lr
{
 8003668:	b510      	push	{r4, lr}
 800366a:	b08a      	sub	sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 68, 10, 2, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 800366c:	4814      	ldr	r0, [pc, #80]	; (80036c0 <_Z23getFont_verdana_10_4bppv+0x6c>)
 800366e:	f006 fd4b 	bl	800a108 <__cxa_guard_acquire>
 8003672:	b910      	cbnz	r0, 800367a <_Z23getFont_verdana_10_4bppv+0x26>
}
 8003674:	4811      	ldr	r0, [pc, #68]	; (80036bc <_Z23getFont_verdana_10_4bppv+0x68>)
 8003676:	b00a      	add	sp, #40	; 0x28
 8003678:	bd10      	pop	{r4, pc}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 68, 10, 2, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 800367a:	4c10      	ldr	r4, [pc, #64]	; (80036bc <_Z23getFont_verdana_10_4bppv+0x68>)
 800367c:	2300      	movs	r3, #0
 800367e:	9309      	str	r3, [sp, #36]	; 0x24
 8003680:	9308      	str	r3, [sp, #32]
 8003682:	233f      	movs	r3, #63	; 0x3f
 8003684:	9307      	str	r3, [sp, #28]
 8003686:	4b0f      	ldr	r3, [pc, #60]	; (80036c4 <_Z23getFont_verdana_10_4bppv+0x70>)
 8003688:	9306      	str	r3, [sp, #24]
 800368a:	4b0f      	ldr	r3, [pc, #60]	; (80036c8 <_Z23getFont_verdana_10_4bppv+0x74>)
 800368c:	9305      	str	r3, [sp, #20]
 800368e:	2301      	movs	r3, #1
 8003690:	9304      	str	r3, [sp, #16]
 8003692:	9303      	str	r3, [sp, #12]
 8003694:	9302      	str	r3, [sp, #8]
 8003696:	2304      	movs	r3, #4
 8003698:	9301      	str	r3, [sp, #4]
 800369a:	2302      	movs	r3, #2
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	230a      	movs	r3, #10
 80036a0:	2244      	movs	r2, #68	; 0x44
 80036a2:	490a      	ldr	r1, [pc, #40]	; (80036cc <_Z23getFont_verdana_10_4bppv+0x78>)
 80036a4:	4620      	mov	r0, r4
 80036a6:	f7ff ff9d 	bl	80035e4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 80036aa:	4809      	ldr	r0, [pc, #36]	; (80036d0 <_Z23getFont_verdana_10_4bppv+0x7c>)
 80036ac:	f006 fda4 	bl	800a1f8 <atexit>
 80036b0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80036b4:	f006 fd34 	bl	800a120 <__cxa_guard_release>
 80036b8:	e7dc      	b.n	8003674 <_Z23getFont_verdana_10_4bppv+0x20>
 80036ba:	bf00      	nop
 80036bc:	20000348 	.word	0x20000348
 80036c0:	2000036c 	.word	0x2000036c
 80036c4:	0800e53c 	.word	0x0800e53c
 80036c8:	0800b444 	.word	0x0800b444
 80036cc:	0800e164 	.word	0x0800e164
 80036d0:	08003635 	.word	0x08003635

080036d4 <__tcf_0>:
 80036d4:	4b03      	ldr	r3, [pc, #12]	; (80036e4 <__tcf_0+0x10>)
 80036d6:	4a04      	ldr	r2, [pc, #16]	; (80036e8 <__tcf_0+0x14>)
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	4a04      	ldr	r2, [pc, #16]	; (80036ec <__tcf_0+0x18>)
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	4a04      	ldr	r2, [pc, #16]	; (80036f0 <__tcf_0+0x1c>)
 80036e0:	601a      	str	r2, [r3, #0]

touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 80036e2:	4770      	bx	lr
 80036e4:	20000370 	.word	0x20000370
 80036e8:	0800b3f8 	.word	0x0800b3f8
 80036ec:	0800c8a0 	.word	0x0800c8a0
 80036f0:	0800b458 	.word	0x0800b458

080036f4 <_Z23getFont_verdana_20_4bppv>:
 80036f4:	4b18      	ldr	r3, [pc, #96]	; (8003758 <_Z23getFont_verdana_20_4bppv+0x64>)
 80036f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036fa:	f3bf 8f5b 	dmb	ish
 80036fe:	f013 0f01 	tst.w	r3, #1
 8003702:	d001      	beq.n	8003708 <_Z23getFont_verdana_20_4bppv+0x14>
    return verdana_20_4bpp;
}
 8003704:	4814      	ldr	r0, [pc, #80]	; (8003758 <_Z23getFont_verdana_20_4bppv+0x64>)
 8003706:	4770      	bx	lr
{
 8003708:	b510      	push	{r4, lr}
 800370a:	b08a      	sub	sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800370c:	4813      	ldr	r0, [pc, #76]	; (800375c <_Z23getFont_verdana_20_4bppv+0x68>)
 800370e:	f006 fcfb 	bl	800a108 <__cxa_guard_acquire>
 8003712:	b910      	cbnz	r0, 800371a <_Z23getFont_verdana_20_4bppv+0x26>
}
 8003714:	4810      	ldr	r0, [pc, #64]	; (8003758 <_Z23getFont_verdana_20_4bppv+0x64>)
 8003716:	b00a      	add	sp, #40	; 0x28
 8003718:	bd10      	pop	{r4, pc}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800371a:	4c0f      	ldr	r4, [pc, #60]	; (8003758 <_Z23getFont_verdana_20_4bppv+0x64>)
 800371c:	2300      	movs	r3, #0
 800371e:	9309      	str	r3, [sp, #36]	; 0x24
 8003720:	9308      	str	r3, [sp, #32]
 8003722:	223f      	movs	r2, #63	; 0x3f
 8003724:	9207      	str	r2, [sp, #28]
 8003726:	4a0e      	ldr	r2, [pc, #56]	; (8003760 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8003728:	9206      	str	r2, [sp, #24]
 800372a:	4a0e      	ldr	r2, [pc, #56]	; (8003764 <_Z23getFont_verdana_20_4bppv+0x70>)
 800372c:	9205      	str	r2, [sp, #20]
 800372e:	9304      	str	r3, [sp, #16]
 8003730:	9303      	str	r3, [sp, #12]
 8003732:	2201      	movs	r2, #1
 8003734:	9202      	str	r2, [sp, #8]
 8003736:	2104      	movs	r1, #4
 8003738:	9101      	str	r1, [sp, #4]
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	2314      	movs	r3, #20
 800373e:	490a      	ldr	r1, [pc, #40]	; (8003768 <_Z23getFont_verdana_20_4bppv+0x74>)
 8003740:	4620      	mov	r0, r4
 8003742:	f7ff ff4f 	bl	80035e4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8003746:	4809      	ldr	r0, [pc, #36]	; (800376c <_Z23getFont_verdana_20_4bppv+0x78>)
 8003748:	f006 fd56 	bl	800a1f8 <atexit>
 800374c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003750:	f006 fce6 	bl	800a120 <__cxa_guard_release>
 8003754:	e7de      	b.n	8003714 <_Z23getFont_verdana_20_4bppv+0x20>
 8003756:	bf00      	nop
 8003758:	20000370 	.word	0x20000370
 800375c:	20000394 	.word	0x20000394
 8003760:	0800e554 	.word	0x0800e554
 8003764:	0800b448 	.word	0x0800b448
 8003768:	0800e51c 	.word	0x0800e51c
 800376c:	080036d5 	.word	0x080036d5

08003770 <__tcf_0>:
 8003770:	4b03      	ldr	r3, [pc, #12]	; (8003780 <__tcf_0+0x10>)
 8003772:	4a04      	ldr	r2, [pc, #16]	; (8003784 <__tcf_0+0x14>)
 8003774:	601a      	str	r2, [r3, #0]
 8003776:	4a04      	ldr	r2, [pc, #16]	; (8003788 <__tcf_0+0x18>)
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	4a04      	ldr	r2, [pc, #16]	; (800378c <__tcf_0+0x1c>)
 800377c:	601a      	str	r2, [r3, #0]

touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800377e:	4770      	bx	lr
 8003780:	20000398 	.word	0x20000398
 8003784:	0800b3f8 	.word	0x0800b3f8
 8003788:	0800c8a0 	.word	0x0800c8a0
 800378c:	0800b458 	.word	0x0800b458

08003790 <_Z23getFont_verdana_40_4bppv>:
 8003790:	4b18      	ldr	r3, [pc, #96]	; (80037f4 <_Z23getFont_verdana_40_4bppv+0x64>)
 8003792:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003796:	f3bf 8f5b 	dmb	ish
 800379a:	f013 0f01 	tst.w	r3, #1
 800379e:	d001      	beq.n	80037a4 <_Z23getFont_verdana_40_4bppv+0x14>
    return verdana_40_4bpp;
}
 80037a0:	4814      	ldr	r0, [pc, #80]	; (80037f4 <_Z23getFont_verdana_40_4bppv+0x64>)
 80037a2:	4770      	bx	lr
{
 80037a4:	b510      	push	{r4, lr}
 80037a6:	b08a      	sub	sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 80037a8:	4813      	ldr	r0, [pc, #76]	; (80037f8 <_Z23getFont_verdana_40_4bppv+0x68>)
 80037aa:	f006 fcad 	bl	800a108 <__cxa_guard_acquire>
 80037ae:	b910      	cbnz	r0, 80037b6 <_Z23getFont_verdana_40_4bppv+0x26>
}
 80037b0:	4810      	ldr	r0, [pc, #64]	; (80037f4 <_Z23getFont_verdana_40_4bppv+0x64>)
 80037b2:	b00a      	add	sp, #40	; 0x28
 80037b4:	bd10      	pop	{r4, pc}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 80037b6:	4c0f      	ldr	r4, [pc, #60]	; (80037f4 <_Z23getFont_verdana_40_4bppv+0x64>)
 80037b8:	2300      	movs	r3, #0
 80037ba:	9309      	str	r3, [sp, #36]	; 0x24
 80037bc:	9308      	str	r3, [sp, #32]
 80037be:	223f      	movs	r2, #63	; 0x3f
 80037c0:	9207      	str	r2, [sp, #28]
 80037c2:	4a0e      	ldr	r2, [pc, #56]	; (80037fc <_Z23getFont_verdana_40_4bppv+0x6c>)
 80037c4:	9206      	str	r2, [sp, #24]
 80037c6:	4a0e      	ldr	r2, [pc, #56]	; (8003800 <_Z23getFont_verdana_40_4bppv+0x70>)
 80037c8:	9205      	str	r2, [sp, #20]
 80037ca:	9304      	str	r3, [sp, #16]
 80037cc:	9303      	str	r3, [sp, #12]
 80037ce:	2201      	movs	r2, #1
 80037d0:	9202      	str	r2, [sp, #8]
 80037d2:	2104      	movs	r1, #4
 80037d4:	9101      	str	r1, [sp, #4]
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	2328      	movs	r3, #40	; 0x28
 80037da:	490a      	ldr	r1, [pc, #40]	; (8003804 <_Z23getFont_verdana_40_4bppv+0x74>)
 80037dc:	4620      	mov	r0, r4
 80037de:	f7ff ff01 	bl	80035e4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 80037e2:	4809      	ldr	r0, [pc, #36]	; (8003808 <_Z23getFont_verdana_40_4bppv+0x78>)
 80037e4:	f006 fd08 	bl	800a1f8 <atexit>
 80037e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80037ec:	f006 fc98 	bl	800a120 <__cxa_guard_release>
 80037f0:	e7de      	b.n	80037b0 <_Z23getFont_verdana_40_4bppv+0x20>
 80037f2:	bf00      	nop
 80037f4:	20000398 	.word	0x20000398
 80037f8:	200003bc 	.word	0x200003bc
 80037fc:	0800e558 	.word	0x0800e558
 8003800:	0800b44c 	.word	0x0800b44c
 8003804:	0800e52c 	.word	0x0800e52c
 8003808:	08003771 	.word	0x08003771

0800380c <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
    {
        return 0;
    }
 800380c:	2000      	movs	r0, #0
 800380e:	4770      	bx	lr

08003810 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 8003810:	2000      	movs	r0, #0
 8003812:	4770      	bx	lr

08003814 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003814:	b40e      	push	{r1, r2, r3}
 8003816:	b500      	push	{lr}
 8003818:	b082      	sub	sp, #8
 800381a:	ab03      	add	r3, sp, #12
 800381c:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8003820:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8003822:	2100      	movs	r1, #0
 8003824:	f003 fbec 	bl	8007000 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003828:	b002      	add	sp, #8
 800382a:	f85d eb04 	ldr.w	lr, [sp], #4
 800382e:	b003      	add	sp, #12
 8003830:	4770      	bx	lr

08003832 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003832:	b40c      	push	{r2, r3}
 8003834:	b500      	push	{lr}
 8003836:	b083      	sub	sp, #12
 8003838:	ab04      	add	r3, sp, #16
 800383a:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 800383e:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8003840:	f003 fbde 	bl	8007000 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003844:	b003      	add	sp, #12
 8003846:	f85d eb04 	ldr.w	lr, [sp], #4
 800384a:	b002      	add	sp, #8
 800384c:	4770      	bx	lr
	...

08003850 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8003850:	b510      	push	{r4, lr}
 8003852:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8003854:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003856:	b133      	cbz	r3, 8003866 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8003858:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 800385a:	b143      	cbz	r3, 800386e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x1e>
            return buffer[pos];
 800385c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800385e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003862:	8b5b      	ldrh	r3, [r3, #26]
 8003864:	b94b      	cbnz	r3, 800387a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2a>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8003866:	4620      	mov	r0, r4
 8003868:	f004 f948 	bl	8007afc <_ZN8touchgfx12TextProvider11getNextCharEv>
}
 800386c:	bd10      	pop	{r4, pc}
            assert(used > 0);
 800386e:	4b1c      	ldr	r3, [pc, #112]	; (80038e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
 8003870:	4a1c      	ldr	r2, [pc, #112]	; (80038e4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
 8003872:	21c0      	movs	r1, #192	; 0xc0
 8003874:	481c      	ldr	r0, [pc, #112]	; (80038e8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
 8003876:	f006 fca1 	bl	800a1bc <__assert_func>
        substituteGlyphs();
 800387a:	f004 fa5b 	bl	8007d34 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800387e:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8003880:	2801      	cmp	r0, #1
 8003882:	d91d      	bls.n	80038c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>
            const uint16_t index = pos + offset;
 8003884:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8003886:	1c4b      	adds	r3, r1, #1
 8003888:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 800388a:	2b09      	cmp	r3, #9
 800388c:	d81e      	bhi.n	80038cc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>
 800388e:	461a      	mov	r2, r3
 8003890:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8003894:	f8b2 c01a 	ldrh.w	ip, [r2, #26]
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
 8003898:	f640 123f 	movw	r2, #2367	; 0x93f
 800389c:	4594      	cmp	ip, r2
 800389e:	d1e2      	bne.n	8003866 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            assert(used > 0);
 80038a0:	b1b8      	cbz	r0, 80038d2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
            return buffer[pos];
 80038a2:	eb04 0241 	add.w	r2, r4, r1, lsl #1
 80038a6:	8b52      	ldrh	r2, [r2, #26]
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 80038a8:	2b09      	cmp	r3, #9
 80038aa:	d900      	bls.n	80038ae <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x5e>
 80038ac:	2300      	movs	r3, #0
 80038ae:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80038b2:	835a      	strh	r2, [r3, #26]
            buffer[pos] = newChar;
 80038b4:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80038b8:	f640 133f 	movw	r3, #2367	; 0x93f
 80038bc:	834b      	strh	r3, [r1, #26]
        }
 80038be:	e7d2      	b.n	8003866 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            assert(offset < used);
 80038c0:	4b0a      	ldr	r3, [pc, #40]	; (80038ec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x9c>)
 80038c2:	4a0b      	ldr	r2, [pc, #44]	; (80038f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xa0>)
 80038c4:	21c5      	movs	r1, #197	; 0xc5
 80038c6:	4808      	ldr	r0, [pc, #32]	; (80038e8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
 80038c8:	f006 fc78 	bl	800a1bc <__assert_func>
            return buffer[index < size ? index : index - size];
 80038cc:	f1a3 020a 	sub.w	r2, r3, #10
 80038d0:	e7de      	b.n	8003890 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x40>
            assert(used > 0);
 80038d2:	4b03      	ldr	r3, [pc, #12]	; (80038e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
 80038d4:	4a03      	ldr	r2, [pc, #12]	; (80038e4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
 80038d6:	21c0      	movs	r1, #192	; 0xc0
 80038d8:	4803      	ldr	r0, [pc, #12]	; (80038e8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
 80038da:	f006 fc6f 	bl	800a1bc <__assert_func>
 80038de:	bf00      	nop
 80038e0:	0800b7f4 	.word	0x0800b7f4
 80038e4:	0800b800 	.word	0x0800b800
 80038e8:	0800b8ac 	.word	0x0800b8ac
 80038ec:	0800b944 	.word	0x0800b944
 80038f0:	0800b954 	.word	0x0800b954

080038f4 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 80038f4:	b508      	push	{r3, lr}
    fillInputBuffer();
 80038f6:	f004 f8bb 	bl	8007a70 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 80038fa:	bd08      	pop	{r3, pc}

080038fc <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 80038fc:	2801      	cmp	r0, #1
 80038fe:	d000      	beq.n	8003902 <_Z41__static_initialization_and_destruction_0ii+0x6>
 8003900:	4770      	bx	lr
 8003902:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003906:	4299      	cmp	r1, r3
 8003908:	d1fa      	bne.n	8003900 <_Z41__static_initialization_and_destruction_0ii+0x4>
 800390a:	b510      	push	{r4, lr}
    &(getFont_verdana_20_4bpp()),
 800390c:	f7ff fef2 	bl	80036f4 <_Z23getFont_verdana_20_4bppv>
};
 8003910:	4c04      	ldr	r4, [pc, #16]	; (8003924 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8003912:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8003914:	f7ff ff3c 	bl	8003790 <_Z23getFont_verdana_40_4bppv>
};
 8003918:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 800391a:	f7ff fe9b 	bl	8003654 <_Z23getFont_verdana_10_4bppv>
};
 800391e:	60a0      	str	r0, [r4, #8]
}  // namespace TypedTextDatabase
 8003920:	bd10      	pop	{r4, pc}
 8003922:	bf00      	nop
 8003924:	200003c0 	.word	0x200003c0

08003928 <_ZN17TypedTextDatabase8getFontsEv>:
}
 8003928:	4800      	ldr	r0, [pc, #0]	; (800392c <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 800392a:	4770      	bx	lr
 800392c:	200003c0 	.word	0x200003c0

08003930 <_GLOBAL__sub_I_touchgfx_fonts>:
}  // namespace TypedTextDatabase
 8003930:	b508      	push	{r3, lr}
 8003932:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003936:	2001      	movs	r0, #1
 8003938:	f7ff ffe0 	bl	80038fc <_Z41__static_initialization_and_destruction_0ii>
 800393c:	bd08      	pop	{r3, pc}

0800393e <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb>:
    /**
     * Sets MCU activity high.
     *
     * @param  active if True, inactive otherwise.
     */
    virtual void setMCUActive(bool active)
 800393e:	b510      	push	{r4, lr}
 8003940:	4604      	mov	r4, r0
    {
        if (active) //idle task sched out
 8003942:	b141      	cbz	r1, 8003956 <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb+0x18>
        {
            uint32_t cc_temp = getCPUCycles() - cc_in;
 8003944:	6803      	ldr	r3, [r0, #0]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	4798      	blx	r3
 800394a:	68a3      	ldr	r3, [r4, #8]
 800394c:	1ac3      	subs	r3, r0, r3
            cc_consumed += cc_temp;
 800394e:	6860      	ldr	r0, [r4, #4]
 8003950:	4418      	add	r0, r3
 8003952:	6060      	str	r0, [r4, #4]
        }
        else //idle task sched in
        {
            cc_in = getCPUCycles();
        }
    }
 8003954:	bd10      	pop	{r4, pc}
            cc_in = getCPUCycles();
 8003956:	6803      	ldr	r3, [r0, #0]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	4798      	blx	r3
 800395c:	60a0      	str	r0, [r4, #8]
    }
 800395e:	e7f9      	b.n	8003954 <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb+0x16>

08003960 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8003960:	6840      	ldr	r0, [r0, #4]
    }
 8003962:	4770      	bx	lr

08003964 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8003964:	6041      	str	r1, [r0, #4]
    }
 8003966:	4770      	bx	lr

08003968 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 8003968:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800396c:	f8d2 3dfc 	ldr.w	r3, [r2, #3580]	; 0xdfc
 8003970:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003974:	f8c2 3dfc 	str.w	r3, [r2, #3580]	; 0xdfc
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 8003978:	4b05      	ldr	r3, [pc, #20]	; (8003990 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 800397a:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	; 0xfb0
 800397e:	4a05      	ldr	r2, [pc, #20]	; (8003994 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 8003980:	430a      	orrs	r2, r1
 8003982:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	f042 0201 	orr.w	r2, r2, #1
 800398c:	601a      	str	r2, [r3, #0]
}
 800398e:	4770      	bx	lr
 8003990:	e0001000 	.word	0xe0001000
 8003994:	c5acce55 	.word	0xc5acce55

08003998 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8003998:	1a52      	subs	r2, r2, r1
 800399a:	eb02 0253 	add.w	r2, r2, r3, lsr #1
}
 800399e:	fbb2 f0f3 	udiv	r0, r2, r3
 80039a2:	4770      	bx	lr

080039a4 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 80039a4:	4b01      	ldr	r3, [pc, #4]	; (80039ac <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 80039a6:	6858      	ldr	r0, [r3, #4]
}
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	e0001000 	.word	0xe0001000

080039b0 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
 80039b0:	b510      	push	{r4, lr}
 80039b2:	4604      	mov	r4, r0
    if (active) //idle task sched out
 80039b4:	b141      	cbz	r1, 80039c8 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 80039b6:	6803      	ldr	r3, [r0, #0]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	4798      	blx	r3
 80039bc:	68a3      	ldr	r3, [r4, #8]
 80039be:	1ac3      	subs	r3, r0, r3
        cc_consumed += cc_temp;
 80039c0:	6860      	ldr	r0, [r4, #4]
 80039c2:	4418      	add	r0, r3
 80039c4:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 80039c6:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 80039c8:	6803      	ldr	r3, [r0, #0]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	4798      	blx	r3
 80039ce:	60a0      	str	r0, [r4, #8]
}
 80039d0:	e7f9      	b.n	80039c6 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>
	...

080039d4 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 80039d4:	4a02      	ldr	r2, [pc, #8]	; (80039e0 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev+0xc>)
 80039d6:	6002      	str	r2, [r0, #0]
    {
 80039d8:	4a02      	ldr	r2, [pc, #8]	; (80039e4 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev+0x10>)
 80039da:	6002      	str	r2, [r0, #0]
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	0800b4a8 	.word	0x0800b4a8
 80039e4:	0800ba30 	.word	0x0800ba30

080039e8 <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 80039e8:	b510      	push	{r4, lr}
 80039ea:	4604      	mov	r4, r0
 80039ec:	4b04      	ldr	r3, [pc, #16]	; (8003a00 <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev+0x18>)
 80039ee:	6003      	str	r3, [r0, #0]
 80039f0:	4b04      	ldr	r3, [pc, #16]	; (8003a04 <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev+0x1c>)
 80039f2:	6003      	str	r3, [r0, #0]
 80039f4:	210c      	movs	r1, #12
 80039f6:	f006 fb85 	bl	800a104 <_ZdlPvj>
 80039fa:	4620      	mov	r0, r4
 80039fc:	bd10      	pop	{r4, pc}
 80039fe:	bf00      	nop
 8003a00:	0800b4a8 	.word	0x0800b4a8
 8003a04:	0800ba30 	.word	0x0800ba30

08003a08 <_ZN20STM32TouchController4initEv>:

static TS_DrvTypeDef* tsDriver;
extern I2C_HandleTypeDef hi2c3;

void STM32TouchController::init()
{
 8003a08:	b508      	push	{r3, lr}
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8003a0a:	4b03      	ldr	r3, [pc, #12]	; (8003a18 <_ZN20STM32TouchController4initEv+0x10>)
 8003a0c:	4a03      	ldr	r2, [pc, #12]	; (8003a1c <_ZN20STM32TouchController4initEv+0x14>)
 8003a0e:	6013      	str	r3, [r2, #0]

    /* Initialize the TS driver */
    tsDriver->Start(TS_I2C_ADDRESS);
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	2070      	movs	r0, #112	; 0x70
 8003a14:	4798      	blx	r3
}
 8003a16:	bd08      	pop	{r3, pc}
 8003a18:	2000000c 	.word	0x2000000c
 8003a1c:	200003cc 	.word	0x200003cc

08003a20 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8003a20:	b538      	push	{r3, r4, r5, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (tsDriver)
 8003a22:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	b183      	cbz	r3, 8003a4a <_ZN20STM32TouchController11sampleTouchERlS0_+0x2a>
 8003a28:	460d      	mov	r5, r1
 8003a2a:	4614      	mov	r4, r2
    {
        if (tsDriver->DetectTouch(TS_I2C_ADDRESS))
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	2070      	movs	r0, #112	; 0x70
 8003a30:	4798      	blx	r3
 8003a32:	b908      	cbnz	r0, 8003a38 <_ZN20STM32TouchController11sampleTouchERlS0_+0x18>
            /* Get each touch coordinates */
            tsDriver->GetXY(TS_I2C_ADDRESS, (uint16_t*)&y, (uint16_t*)&x);
            return true;
        }
    }
    return false;
 8003a34:	2000      	movs	r0, #0
}
 8003a36:	bd38      	pop	{r3, r4, r5, pc}
            tsDriver->GetXY(TS_I2C_ADDRESS, (uint16_t*)&y, (uint16_t*)&x);
 8003a38:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	462a      	mov	r2, r5
 8003a40:	4621      	mov	r1, r4
 8003a42:	2070      	movs	r0, #112	; 0x70
 8003a44:	4798      	blx	r3
            return true;
 8003a46:	2001      	movs	r0, #1
 8003a48:	e7f5      	b.n	8003a36 <_ZN20STM32TouchController11sampleTouchERlS0_+0x16>
    return false;
 8003a4a:	2000      	movs	r0, #0
 8003a4c:	e7f3      	b.n	8003a36 <_ZN20STM32TouchController11sampleTouchERlS0_+0x16>
 8003a4e:	bf00      	nop
 8003a50:	200003cc 	.word	0x200003cc

08003a54 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8003a54:	4a02      	ldr	r2, [pc, #8]	; (8003a60 <_ZN20STM32TouchControllerD1Ev+0xc>)
 8003a56:	6002      	str	r2, [r0, #0]
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
    {
 8003a58:	4a02      	ldr	r2, [pc, #8]	; (8003a64 <_ZN20STM32TouchControllerD1Ev+0x10>)
 8003a5a:	6002      	str	r2, [r0, #0]
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	0800b4d0 	.word	0x0800b4d0
 8003a64:	0800ba58 	.word	0x0800ba58

08003a68 <_ZL10I2Cx_ErrorP19__I2C_HandleTypeDefh>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef* i2c_handler, uint8_t Addr)
{
 8003a68:	b508      	push	{r3, lr}
    /* De-initialize the I2C communication bus */
    HAL_I2C_DeInit(i2c_handler);
 8003a6a:	f7fd ff9f 	bl	80019ac <HAL_I2C_DeInit>

    /* Re-Initialize the I2C communication bus */
    //I2Cx_Init(i2c_handler);
}
 8003a6e:	bd08      	pop	{r3, pc}

08003a70 <_ZL18I2Cx_WriteMultipleP19__I2C_HandleTypeDefhttPht>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t* Buffer,
                                            uint16_t Length)
{
 8003a70:	b570      	push	{r4, r5, r6, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	4605      	mov	r5, r0
 8003a76:	460c      	mov	r4, r1
    HAL_StatusTypeDef status = HAL_OK;

    status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003a78:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003a7c:	9102      	str	r1, [sp, #8]
 8003a7e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8003a82:	9101      	str	r1, [sp, #4]
 8003a84:	9908      	ldr	r1, [sp, #32]
 8003a86:	9100      	str	r1, [sp, #0]
 8003a88:	4621      	mov	r1, r4
 8003a8a:	f7fd ffa8 	bl	80019de <HAL_I2C_Mem_Write>

    /* Check the communication status */
    if (status != HAL_OK)
 8003a8e:	4606      	mov	r6, r0
 8003a90:	b910      	cbnz	r0, 8003a98 <_ZL18I2Cx_WriteMultipleP19__I2C_HandleTypeDefhttPht+0x28>
    {
        /* Re-Initiaize the I2C Bus */
        I2Cx_Error(i2c_handler, Addr);
    }
    return status;
}
 8003a92:	4630      	mov	r0, r6
 8003a94:	b004      	add	sp, #16
 8003a96:	bd70      	pop	{r4, r5, r6, pc}
        I2Cx_Error(i2c_handler, Addr);
 8003a98:	4621      	mov	r1, r4
 8003a9a:	4628      	mov	r0, r5
 8003a9c:	f7ff ffe4 	bl	8003a68 <_ZL10I2Cx_ErrorP19__I2C_HandleTypeDefh>
 8003aa0:	e7f7      	b.n	8003a92 <_ZL18I2Cx_WriteMultipleP19__I2C_HandleTypeDefhttPht+0x22>

08003aa2 <_ZL17I2Cx_ReadMultipleP19__I2C_HandleTypeDefhttPht>:
{
 8003aa2:	b570      	push	{r4, r5, r6, lr}
 8003aa4:	b084      	sub	sp, #16
 8003aa6:	4605      	mov	r5, r0
 8003aa8:	460c      	mov	r4, r1
    status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003aaa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003aae:	9102      	str	r1, [sp, #8]
 8003ab0:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8003ab4:	9101      	str	r1, [sp, #4]
 8003ab6:	9908      	ldr	r1, [sp, #32]
 8003ab8:	9100      	str	r1, [sp, #0]
 8003aba:	4621      	mov	r1, r4
 8003abc:	f7fe f864 	bl	8001b88 <HAL_I2C_Mem_Read>
    if (status != HAL_OK)
 8003ac0:	4606      	mov	r6, r0
 8003ac2:	b910      	cbnz	r0, 8003aca <_ZL17I2Cx_ReadMultipleP19__I2C_HandleTypeDefhttPht+0x28>
}
 8003ac4:	4630      	mov	r0, r6
 8003ac6:	b004      	add	sp, #16
 8003ac8:	bd70      	pop	{r4, r5, r6, pc}
        I2Cx_Error(i2c_handler, Addr);
 8003aca:	4621      	mov	r1, r4
 8003acc:	4628      	mov	r0, r5
 8003ace:	f7ff ffcb 	bl	8003a68 <_ZL10I2Cx_ErrorP19__I2C_HandleTypeDefh>
 8003ad2:	e7f7      	b.n	8003ac4 <_ZL17I2Cx_ReadMultipleP19__I2C_HandleTypeDefhttPht+0x22>

08003ad4 <_ZN20STM32TouchControllerD0Ev>:
 8003ad4:	b510      	push	{r4, lr}
 8003ad6:	4604      	mov	r4, r0
 8003ad8:	4b04      	ldr	r3, [pc, #16]	; (8003aec <_ZN20STM32TouchControllerD0Ev+0x18>)
 8003ada:	6003      	str	r3, [r0, #0]
 8003adc:	4b04      	ldr	r3, [pc, #16]	; (8003af0 <_ZN20STM32TouchControllerD0Ev+0x1c>)
 8003ade:	6003      	str	r3, [r0, #0]
 8003ae0:	2104      	movs	r1, #4
 8003ae2:	f006 fb0f 	bl	800a104 <_ZdlPvj>
 8003ae6:	4620      	mov	r0, r4
 8003ae8:	bd10      	pop	{r4, pc}
 8003aea:	bf00      	nop
 8003aec:	0800b4d0 	.word	0x0800b4d0
 8003af0:	0800ba58 	.word	0x0800ba58

08003af4 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003af4:	b500      	push	{lr}
 8003af6:	b085      	sub	sp, #20
 8003af8:	f88d 200f 	strb.w	r2, [sp, #15]
    I2Cx_WriteMultiple(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&Value, 1);
 8003afc:	2301      	movs	r3, #1
 8003afe:	9301      	str	r3, [sp, #4]
 8003b00:	f10d 020f 	add.w	r2, sp, #15
 8003b04:	9200      	str	r2, [sp, #0]
 8003b06:	460a      	mov	r2, r1
 8003b08:	4601      	mov	r1, r0
 8003b0a:	4803      	ldr	r0, [pc, #12]	; (8003b18 <TS_IO_Write+0x24>)
 8003b0c:	f7ff ffb0 	bl	8003a70 <_ZL18I2Cx_WriteMultipleP19__I2C_HandleTypeDefhttPht>
}
 8003b10:	b005      	add	sp, #20
 8003b12:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b16:	bf00      	nop
 8003b18:	200001b0 	.word	0x200001b0

08003b1c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003b1c:	b500      	push	{lr}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	460a      	mov	r2, r1
    uint8_t read_value = 0;
 8003b22:	2300      	movs	r3, #0
 8003b24:	f88d 300f 	strb.w	r3, [sp, #15]

    I2Cx_ReadMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8003b28:	2301      	movs	r3, #1
 8003b2a:	9301      	str	r3, [sp, #4]
 8003b2c:	f10d 010f 	add.w	r1, sp, #15
 8003b30:	9100      	str	r1, [sp, #0]
 8003b32:	4601      	mov	r1, r0
 8003b34:	4803      	ldr	r0, [pc, #12]	; (8003b44 <TS_IO_Read+0x28>)
 8003b36:	f7ff ffb4 	bl	8003aa2 <_ZL17I2Cx_ReadMultipleP19__I2C_HandleTypeDefhttPht>

    return read_value;
}
 8003b3a:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8003b3e:	b005      	add	sp, #20
 8003b40:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b44:	200001b0 	.word	0x200001b0

08003b48 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{

}
 8003b48:	4770      	bx	lr

08003b4a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{

}
 8003b4a:	4770      	bx	lr

08003b4c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{

}
 8003b4c:	4770      	bx	lr

08003b4e <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
 8003b4e:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8003b52:	2301      	movs	r3, #1
 8003b54:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 8003b58:	4770      	bx	lr

08003b5a <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8003b5a:	b508      	push	{r3, lr}
    {
        if (useDMAAcceleration)
 8003b5c:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 8003b60:	b123      	cbz	r3, 8003b6c <_ZN8touchgfx3HAL11getBlitCapsEv+0x12>
        {
            return dma.getBlitCaps();
 8003b62:	6840      	ldr	r0, [r0, #4]
 8003b64:	6803      	ldr	r3, [r0, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4798      	blx	r3
        }
        else
        {
            return static_cast<BlitOperations>(0);
        }
    }
 8003b6a:	bd08      	pop	{r3, pc}
            return static_cast<BlitOperations>(0);
 8003b6c:	2000      	movs	r0, #0
 8003b6e:	e7fc      	b.n	8003b6a <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>

08003b70 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
    {
        return false;
    }
 8003b70:	2000      	movs	r0, #0
 8003b72:	4770      	bx	lr

08003b74 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8003b74:	2000      	movs	r0, #0
 8003b76:	4770      	bx	lr

08003b78 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8003b78:	b508      	push	{r3, lr}
    {
        if (taskDelayFunc)
 8003b7a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003b7c:	b10b      	cbz	r3, 8003b82 <_ZN8touchgfx3HAL9taskDelayEt+0xa>
        {
            taskDelayFunc(ms);
 8003b7e:	4608      	mov	r0, r1
 8003b80:	4798      	blx	r3
        }
    }
 8003b82:	bd08      	pop	{r3, pc}

08003b84 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8003b84:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003b88:	4770      	bx	lr

08003b8a <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8003b8a:	b508      	push	{r3, lr}
    {
        return dma.getDMAType();
 8003b8c:	6840      	ldr	r0, [r0, #4]
 8003b8e:	6803      	ldr	r3, [r0, #0]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	4798      	blx	r3
    }
 8003b94:	bd08      	pop	{r3, pc}
	...

08003b98 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8003b98:	b410      	push	{r4}
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8003b9a:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
 8003b9e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d012      	beq.n	8003bcc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x34>
        {
            if (DISPLAY_ROTATION == rotate0)
 8003ba6:	4b12      	ldr	r3, [pc, #72]	; (8003bf0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x58>)
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	b963      	cbnz	r3, 8003bc6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x2e>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8003bac:	4b11      	ldr	r3, [pc, #68]	; (8003bf4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5c>)
 8003bae:	8818      	ldrh	r0, [r3, #0]
 8003bb0:	4a11      	ldr	r2, [pc, #68]	; (8003bf8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x60>)
 8003bb2:	8010      	strh	r0, [r2, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8003bb4:	4911      	ldr	r1, [pc, #68]	; (8003bfc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x64>)
 8003bb6:	880a      	ldrh	r2, [r1, #0]
 8003bb8:	4c11      	ldr	r4, [pc, #68]	; (8003c00 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x68>)
 8003bba:	8022      	strh	r2, [r4, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8003bbc:	8008      	strh	r0, [r1, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8003bbe:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8003bc0:	4b0b      	ldr	r3, [pc, #44]	; (8003bf0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x58>)
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8003bc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bca:	4770      	bx	lr
        else if (DISPLAY_ROTATION != rotate0)
 8003bcc:	4b08      	ldr	r3, [pc, #32]	; (8003bf0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x58>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d0f8      	beq.n	8003bc6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x2e>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8003bd4:	4909      	ldr	r1, [pc, #36]	; (8003bfc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x64>)
 8003bd6:	880a      	ldrh	r2, [r1, #0]
 8003bd8:	4b07      	ldr	r3, [pc, #28]	; (8003bf8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x60>)
 8003bda:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8003bdc:	4b05      	ldr	r3, [pc, #20]	; (8003bf4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5c>)
 8003bde:	8818      	ldrh	r0, [r3, #0]
 8003be0:	4c07      	ldr	r4, [pc, #28]	; (8003c00 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x68>)
 8003be2:	8020      	strh	r0, [r4, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8003be4:	8008      	strh	r0, [r1, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8003be6:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8003be8:	4b01      	ldr	r3, [pc, #4]	; (8003bf0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x58>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	701a      	strb	r2, [r3, #0]
    }
 8003bee:	e7ea      	b.n	8003bc6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x2e>
 8003bf0:	20001324 	.word	0x20001324
 8003bf4:	20001320 	.word	0x20001320
 8003bf8:	20001326 	.word	0x20001326
 8003bfc:	20001322 	.word	0x20001322
 8003c00:	20001328 	.word	0x20001328

08003c04 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8003c04:	4a03      	ldr	r2, [pc, #12]	; (8003c14 <_ZN11TouchGFXHALD1Ev+0x10>)
 8003c06:	6002      	str	r2, [r0, #0]
 *
 * @brief HAL implementation for TouchGFXGenerated.
 *
 * @sa HAL
 */
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8003c08:	4a03      	ldr	r2, [pc, #12]	; (8003c18 <_ZN11TouchGFXHALD1Ev+0x14>)
 8003c0a:	6002      	str	r2, [r0, #0]
    {
 8003c0c:	4a03      	ldr	r2, [pc, #12]	; (8003c1c <_ZN11TouchGFXHALD1Ev+0x18>)
 8003c0e:	6002      	str	r2, [r0, #0]
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	0800b4e8 	.word	0x0800b4e8
 8003c18:	0800b5f4 	.word	0x0800b5f4
 8003c1c:	0800c2dc 	.word	0x0800c2dc

08003c20 <_Z41__static_initialization_and_destruction_0ii>:
//        {
//            touchgfx::HAL::getInstance()->setMCUActive(false);
//        }
//        return pdTRUE;
//    }
}
 8003c20:	2801      	cmp	r0, #1
 8003c22:	d005      	beq.n	8003c30 <_Z41__static_initialization_and_destruction_0ii+0x10>
CortexMMCUInstrumentation instrumentation;
 8003c24:	b918      	cbnz	r0, 8003c2e <_Z41__static_initialization_and_destruction_0ii+0xe>
 8003c26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c2a:	4299      	cmp	r1, r3
 8003c2c:	d00d      	beq.n	8003c4a <_Z41__static_initialization_and_destruction_0ii+0x2a>
}
 8003c2e:	4770      	bx	lr
 8003c30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c34:	4299      	cmp	r1, r3
 8003c36:	d1f5      	bne.n	8003c24 <_Z41__static_initialization_and_destruction_0ii+0x4>
          cc_in(0)
 8003c38:	4b07      	ldr	r3, [pc, #28]	; (8003c58 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8003c3a:	4a08      	ldr	r2, [pc, #32]	; (8003c5c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	605a      	str	r2, [r3, #4]
 8003c42:	609a      	str	r2, [r3, #8]
 8003c44:	4a06      	ldr	r2, [pc, #24]	; (8003c60 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	e7ec      	b.n	8003c24 <_Z41__static_initialization_and_destruction_0ii+0x4>
 8003c4a:	4b03      	ldr	r3, [pc, #12]	; (8003c58 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8003c4c:	4a04      	ldr	r2, [pc, #16]	; (8003c60 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003c4e:	601a      	str	r2, [r3, #0]
    {
 8003c50:	4a02      	ldr	r2, [pc, #8]	; (8003c5c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	e7eb      	b.n	8003c2e <_Z41__static_initialization_and_destruction_0ii+0xe>
 8003c56:	bf00      	nop
 8003c58:	200003d0 	.word	0x200003d0
 8003c5c:	0800ba30 	.word	0x0800ba30
 8003c60:	0800b4a8 	.word	0x0800b4a8

08003c64 <_ZN11TouchGFXHAL9taskEntryEv>:
{
 8003c64:	b510      	push	{r4, lr}
    if (firstCall)
 8003c66:	4b08      	ldr	r3, [pc, #32]	; (8003c88 <_ZN11TouchGFXHAL9taskEntryEv+0x24>)
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	b153      	cbz	r3, 8003c82 <_ZN11TouchGFXHAL9taskEntryEv+0x1e>
 8003c6c:	4604      	mov	r4, r0
        firstCall = false;
 8003c6e:	4b06      	ldr	r3, [pc, #24]	; (8003c88 <_ZN11TouchGFXHAL9taskEntryEv+0x24>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	701a      	strb	r2, [r3, #0]
        enableLCDControllerInterrupt();
 8003c74:	6803      	ldr	r3, [r0, #0]
 8003c76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c78:	4798      	blx	r3
        enableInterrupts();
 8003c7a:	6823      	ldr	r3, [r4, #0]
 8003c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c7e:	4620      	mov	r0, r4
 8003c80:	4798      	blx	r3
    OSWrappers::waitForVSync();
 8003c82:	f000 f8bb 	bl	8003dfc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
}
 8003c86:	bd10      	pop	{r4, pc}
 8003c88:	20000034 	.word	0x20000034

08003c8c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
{
 8003c8c:	b508      	push	{r3, lr}
    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8003c8e:	f000 fc15 	bl	80044bc <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
}
 8003c92:	bd08      	pop	{r3, pc}

08003c94 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
{
 8003c94:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8003c96:	f000 fc17 	bl	80044c8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8003c9a:	bd08      	pop	{r3, pc}

08003c9c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
{
 8003c9c:	b510      	push	{r4, lr}
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8003c9e:	f000 fc25 	bl	80044ec <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8003ca2:	4b11      	ldr	r3, [pc, #68]	; (8003ce8 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x4c>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003caa:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8003cae:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003cb2:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8003cb6:	e000      	b.n	8003cba <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x1e>
    } while(sets-- != 0U);
 8003cb8:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003cba:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003cbe:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8003cc2:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8003cc6:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8003cca:	4907      	ldr	r1, [pc, #28]	; (8003ce8 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x4c>)
 8003ccc:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	3a01      	subs	r2, #1
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1f2      	bne.n	8003cbe <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x22>
    } while(sets-- != 0U);
 8003cd8:	1e43      	subs	r3, r0, #1
 8003cda:	2800      	cmp	r0, #0
 8003cdc:	d1ec      	bne.n	8003cb8 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x1c>
 8003cde:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003ce2:	f3bf 8f6f 	isb	sy
}
 8003ce6:	bd10      	pop	{r4, pc}
 8003ce8:	e000ed00 	.word	0xe000ed00

08003cec <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:
{
 8003cec:	b508      	push	{r3, lr}
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8003cee:	f000 fc25 	bl	800453c <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
}
 8003cf2:	bd08      	pop	{r3, pc}

08003cf4 <_ZN11TouchGFXHAL19configureInterruptsEv>:
{
 8003cf4:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::configureInterrupts();
 8003cf6:	f000 fba1 	bl	800443c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8003cfa:	bd08      	pop	{r3, pc}

08003cfc <_ZN11TouchGFXHAL16enableInterruptsEv>:
{
 8003cfc:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::enableInterrupts();
 8003cfe:	f000 fba7 	bl	8004450 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8003d02:	bd08      	pop	{r3, pc}

08003d04 <_ZN11TouchGFXHAL17disableInterruptsEv>:
{
 8003d04:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::disableInterrupts();
 8003d06:	f000 fbad 	bl	8004464 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8003d0a:	bd08      	pop	{r3, pc}

08003d0c <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 8003d0c:	b508      	push	{r3, lr}
    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8003d0e:	f000 fbbd 	bl	800448c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8003d12:	bd08      	pop	{r3, pc}

08003d14 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8003d14:	b510      	push	{r4, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8003d16:	b169      	cbz	r1, 8003d34 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x20>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8003d18:	63c1      	str	r1, [r0, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8003d1a:	6402      	str	r2, [r0, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8003d1c:	6443      	str	r3, [r0, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8003d1e:	3a00      	subs	r2, #0
 8003d20:	bf18      	it	ne
 8003d22:	2201      	movne	r2, #1
 8003d24:	4907      	ldr	r1, [pc, #28]	; (8003d44 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 8003d26:	700a      	strb	r2, [r1, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8003d28:	3b00      	subs	r3, #0
 8003d2a:	bf18      	it	ne
 8003d2c:	2301      	movne	r3, #1
 8003d2e:	4a06      	ldr	r2, [pc, #24]	; (8003d48 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 8003d30:	7013      	strb	r3, [r2, #0]
    }
 8003d32:	bd10      	pop	{r4, pc}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8003d34:	4b05      	ldr	r3, [pc, #20]	; (8003d4c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 8003d36:	4a06      	ldr	r2, [pc, #24]	; (8003d50 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 8003d38:	f240 216b 	movw	r1, #619	; 0x26b
 8003d3c:	4805      	ldr	r0, [pc, #20]	; (8003d54 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x40>)
 8003d3e:	f006 fa3d 	bl	800a1bc <__assert_func>
 8003d42:	bf00      	nop
 8003d44:	2000132a 	.word	0x2000132a
 8003d48:	2000132b 	.word	0x2000132b
 8003d4c:	0800ba68 	.word	0x0800ba68
 8003d50:	0800baa0 	.word	0x0800baa0
 8003d54:	0800baf0 	.word	0x0800baf0

08003d58 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8003d58:	b510      	push	{r4, lr}
 8003d5a:	4604      	mov	r4, r0
        swapFrameBuffers();
 8003d5c:	f002 f910 	bl	8005f80 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8003d60:	6823      	ldr	r3, [r4, #0]
 8003d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d66:	4620      	mov	r0, r4
 8003d68:	4798      	blx	r3
    }
 8003d6a:	bd10      	pop	{r4, pc}

08003d6c <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8003d6c:	b508      	push	{r3, lr}
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8003d6e:	f001 fb44 	bl	80053fa <_ZN8touchgfx3HAL16flushFrameBufferEv>
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
    }
 8003d72:	bd08      	pop	{r3, pc}

08003d74 <_ZN11TouchGFXHALD0Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8003d74:	b510      	push	{r4, lr}
 8003d76:	4604      	mov	r4, r0
 8003d78:	4b05      	ldr	r3, [pc, #20]	; (8003d90 <_ZN11TouchGFXHALD0Ev+0x1c>)
 8003d7a:	6003      	str	r3, [r0, #0]
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8003d7c:	4b05      	ldr	r3, [pc, #20]	; (8003d94 <_ZN11TouchGFXHALD0Ev+0x20>)
 8003d7e:	6003      	str	r3, [r0, #0]
    {
 8003d80:	4b05      	ldr	r3, [pc, #20]	; (8003d98 <_ZN11TouchGFXHALD0Ev+0x24>)
 8003d82:	6003      	str	r3, [r0, #0]
 8003d84:	217c      	movs	r1, #124	; 0x7c
 8003d86:	f006 f9bd 	bl	800a104 <_ZdlPvj>
 8003d8a:	4620      	mov	r0, r4
 8003d8c:	bd10      	pop	{r4, pc}
 8003d8e:	bf00      	nop
 8003d90:	0800b4e8 	.word	0x0800b4e8
 8003d94:	0800b5f4 	.word	0x0800b5f4
 8003d98:	0800c2dc 	.word	0x0800c2dc

08003d9c <_GLOBAL__sub_I_instrumentation>:
}
 8003d9c:	b508      	push	{r3, lr}
 8003d9e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003da2:	2001      	movs	r0, #1
 8003da4:	f7ff ff3c 	bl	8003c20 <_Z41__static_initialization_and_destruction_0ii>
 8003da8:	bd08      	pop	{r3, pc}

08003daa <_GLOBAL__sub_D_instrumentation>:
 8003daa:	b508      	push	{r3, lr}
 8003dac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003db0:	2000      	movs	r0, #0
 8003db2:	f7ff ff35 	bl	8003c20 <_Z41__static_initialization_and_destruction_0ii>
 8003db6:	bd08      	pop	{r3, pc}

08003db8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
  while(fb_sem);
 8003db8:	4b03      	ldr	r3, [pc, #12]	; (8003dc8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x10>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1fb      	bne.n	8003db8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
  fb_sem = 1;
 8003dc0:	4b01      	ldr	r3, [pc, #4]	; (8003dc8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x10>)
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	601a      	str	r2, [r3, #0]
}
 8003dc6:	4770      	bx	lr
 8003dc8:	200003dc 	.word	0x200003dc

08003dcc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
  fb_sem = 0;
 8003dcc:	4b01      	ldr	r3, [pc, #4]	; (8003dd4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	601a      	str	r2, [r3, #0]
}
 8003dd2:	4770      	bx	lr
 8003dd4:	200003dc 	.word	0x200003dc

08003dd8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
  fb_sem = 1;
 8003dd8:	4b01      	ldr	r3, [pc, #4]	; (8003de0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x8>)
 8003dda:	2201      	movs	r2, #1
 8003ddc:	601a      	str	r2, [r3, #0]
}
 8003dde:	4770      	bx	lr
 8003de0:	200003dc 	.word	0x200003dc

08003de4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
  fb_sem = 0;
 8003de4:	4b01      	ldr	r3, [pc, #4]	; (8003dec <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x8>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	601a      	str	r2, [r3, #0]
}
 8003dea:	4770      	bx	lr
 8003dec:	200003dc 	.word	0x200003dc

08003df0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
  vsync_sem = 1;
 8003df0:	4b01      	ldr	r3, [pc, #4]	; (8003df8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x8>)
 8003df2:	2201      	movs	r2, #1
 8003df4:	605a      	str	r2, [r3, #4]
}
 8003df6:	4770      	bx	lr
 8003df8:	200003dc 	.word	0x200003dc

08003dfc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
/*
 * This function check if a VSYNC has occured.
 * If VSYNC has occured, signal TouchGFX to start a rendering
 */
void OSWrappers::waitForVSync()
{
 8003dfc:	b508      	push	{r3, lr}
  if(vsync_sem)
 8003dfe:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x1c>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	b13b      	cbz	r3, 8003e14 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x18>
  {
    vsync_sem = 0;
 8003e04:	4b04      	ldr	r3, [pc, #16]	; (8003e18 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x1c>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	605a      	str	r2, [r3, #4]
        return instance;
 8003e0a:	4b04      	ldr	r3, [pc, #16]	; (8003e1c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x20>)
 8003e0c:	6818      	ldr	r0, [r3, #0]
    HAL::getInstance()->backPorchExited();
 8003e0e:	6803      	ldr	r3, [r0, #0]
 8003e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e12:	4798      	blx	r3
  }
}
 8003e14:	bd08      	pop	{r3, pc}
 8003e16:	bf00      	nop
 8003e18:	200003dc 	.word	0x200003dc
 8003e1c:	2000132c 	.word	0x2000132c

08003e20 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8003e20:	b508      	push	{r3, lr}
    {
        waitForFrameBufferSemaphore();
 8003e22:	6803      	ldr	r3, [r0, #0]
 8003e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e26:	4798      	blx	r3
    }
 8003e28:	bd08      	pop	{r3, pc}

08003e2a <_ZN10STM32F7DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8003e2a:	2001      	movs	r0, #1
 8003e2c:	4770      	bx	lr

08003e2e <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8003e2e:	b508      	push	{r3, lr}
    {
        executeCompleted();
 8003e30:	6803      	ldr	r3, [r0, #0]
 8003e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e34:	4798      	blx	r3
    }
 8003e36:	bd08      	pop	{r3, pc}

08003e38 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8003e38:	b508      	push	{r3, lr}
 8003e3a:	4b03      	ldr	r3, [pc, #12]	; (8003e48 <DMA2D_XferCpltCallback+0x10>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
        dma.signalDMAInterrupt();
 8003e3e:	6858      	ldr	r0, [r3, #4]
 8003e40:	6803      	ldr	r3, [r0, #0]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	4798      	blx	r3
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
    }
 8003e46:	bd08      	pop	{r3, pc}
 8003e48:	2000132c 	.word	0x2000132c

08003e4c <_ZN10STM32F7DMAD1Ev>:
STM32F7DMA::STM32F7DMA()
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
{
}

STM32F7DMA::~STM32F7DMA()
 8003e4c:	4a08      	ldr	r2, [pc, #32]	; (8003e70 <_ZN10STM32F7DMAD1Ev+0x24>)
 8003e4e:	6002      	str	r2, [r0, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e50:	4a08      	ldr	r2, [pc, #32]	; (8003e74 <_ZN10STM32F7DMAD1Ev+0x28>)
 8003e52:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8003e56:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8003e5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003e5e:	f3bf 8f6f 	isb	sy
class LockFreeDMA_Queue : public DMA_Queue
 8003e62:	4a05      	ldr	r2, [pc, #20]	; (8003e78 <_ZN10STM32F7DMAD1Ev+0x2c>)
 8003e64:	60c2      	str	r2, [r0, #12]
    {
 8003e66:	4a05      	ldr	r2, [pc, #20]	; (8003e7c <_ZN10STM32F7DMAD1Ev+0x30>)
 8003e68:	60c2      	str	r2, [r0, #12]
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
    {
 8003e6a:	4a05      	ldr	r2, [pc, #20]	; (8003e80 <_ZN10STM32F7DMAD1Ev+0x34>)
 8003e6c:	6002      	str	r2, [r0, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
}
 8003e6e:	4770      	bx	lr
 8003e70:	0800b5a4 	.word	0x0800b5a4
 8003e74:	e000e100 	.word	0xe000e100
 8003e78:	0800c778 	.word	0x0800c778
 8003e7c:	0800bd14 	.word	0x0800bd14
 8003e80:	0800c728 	.word	0x0800c728

08003e84 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 8003e84:	b082      	sub	sp, #8
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003e86:	4b0d      	ldr	r3, [pc, #52]	; (8003ebc <_ZN10STM32F7DMA10initializeEv+0x38>)
 8003e88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e8a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003e8e:	631a      	str	r2, [r3, #48]	; 0x30
 8003e90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e92:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8003e96:	9201      	str	r2, [sp, #4]
 8003e98:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8003e9a:	691a      	ldr	r2, [r3, #16]
 8003e9c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003ea0:	611a      	str	r2, [r3, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8003ea2:	691a      	ldr	r2, [r3, #16]
 8003ea4:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8003ea8:	611a      	str	r2, [r3, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8003eaa:	4b05      	ldr	r3, [pc, #20]	; (8003ec0 <_ZN10STM32F7DMA10initializeEv+0x3c>)
 8003eac:	4a05      	ldr	r2, [pc, #20]	; (8003ec4 <_ZN10STM32F7DMA10initializeEv+0x40>)
 8003eae:	611a      	str	r2, [r3, #16]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003eb0:	4b05      	ldr	r3, [pc, #20]	; (8003ec8 <_ZN10STM32F7DMA10initializeEv+0x44>)
 8003eb2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003eb6:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 8003eb8:	b002      	add	sp, #8
 8003eba:	4770      	bx	lr
 8003ebc:	40023800 	.word	0x40023800
 8003ec0:	200002d8 	.word	0x200002d8
 8003ec4:	08003e39 	.word	0x08003e39
 8003ec8:	e000e100 	.word	0xe000e100

08003ecc <_ZN10STM32F7DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8003ecc:	f240 10ef 	movw	r0, #495	; 0x1ef
 8003ed0:	4770      	bx	lr

08003ed2 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8003ed2:	b510      	push	{r4, lr}
 8003ed4:	4604      	mov	r4, r0
}
 8003ed6:	f7ff ffb9 	bl	8003e4c <_ZN10STM32F7DMAD1Ev>
 8003eda:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8003ede:	4620      	mov	r0, r4
 8003ee0:	f006 f910 	bl	800a104 <_ZdlPvj>
 8003ee4:	4620      	mov	r0, r4
 8003ee6:	bd10      	pop	{r4, pc}

08003ee8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32F7DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 8003ee8:	b508      	push	{r3, lr}
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8003eea:	7f8b      	ldrb	r3, [r1, #30]
    switch (format)
 8003eec:	2b0a      	cmp	r3, #10
 8003eee:	d809      	bhi.n	8003f04 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1c>
 8003ef0:	e8df f003 	tbb	[pc, r3]
 8003ef4:	080e1006 	.word	0x080e1006
 8003ef8:	10080808 	.word	0x10080808
 8003efc:	1010      	.short	0x1010
 8003efe:	10          	.byte	0x10
 8003eff:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8003f00:	2002      	movs	r0, #2
        break;
 8003f02:	e008      	b.n	8003f16 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
        assert(0 && "Unsupported Format!");
 8003f04:	4b33      	ldr	r3, [pc, #204]	; (8003fd4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xec>)
 8003f06:	4a34      	ldr	r2, [pc, #208]	; (8003fd8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf0>)
 8003f08:	2186      	movs	r1, #134	; 0x86
 8003f0a:	4834      	ldr	r0, [pc, #208]	; (8003fdc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf4>)
 8003f0c:	f006 f956 	bl	800a1bc <__assert_func>
    switch (format)
 8003f10:	2000      	movs	r0, #0
 8003f12:	e000      	b.n	8003f16 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2e>
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8003f14:	2001      	movs	r0, #1

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8003f16:	4b32      	ldr	r3, [pc, #200]	; (8003fe0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf8>)
 8003f18:	6358      	str	r0, [r3, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8003f1a:	8a4a      	ldrh	r2, [r1, #18]
 8003f1c:	f8b1 c010 	ldrh.w	ip, [r1, #16]
 8003f20:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8003f24:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003f26:	68ca      	ldr	r2, [r1, #12]
 8003f28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003f2a:	8aca      	ldrh	r2, [r1, #22]
 8003f2c:	f8b1 c010 	ldrh.w	ip, [r1, #16]
 8003f30:	eba2 020c 	sub.w	r2, r2, ip
 8003f34:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8003f36:	680b      	ldr	r3, [r1, #0]
 8003f38:	2b08      	cmp	r3, #8
 8003f3a:	d00d      	beq.n	8003f58 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x70>
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
    }
    else
    {
        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003f3c:	4b28      	ldr	r3, [pc, #160]	; (8003fe0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf8>)
 8003f3e:	61d8      	str	r0, [r3, #28]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, 0);
 8003f40:	2200      	movs	r2, #0
 8003f42:	611a      	str	r2, [r3, #16]

        if (blitOp.dstFormat == Bitmap::RGB565)
 8003f44:	7f8b      	ldrb	r3, [r1, #30]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d132      	bne.n	8003fb0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xc8>
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 8003f4a:	698a      	ldr	r2, [r1, #24]
        {
            // set color
            WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8003f4c:	4b24      	ldr	r3, [pc, #144]	; (8003fe0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf8>)
 8003f4e:	639a      	str	r2, [r3, #56]	; 0x38
            // set color
            WRITE_REG(DMA2D->OCOLR, (blitOp.alpha << 24) | (blitOp.alpha << 24) | ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
        }

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8003f50:	4b23      	ldr	r3, [pc, #140]	; (8003fe0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf8>)
 8003f52:	4a24      	ldr	r2, [pc, #144]	; (8003fe4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfc>)
 8003f54:	601a      	str	r2, [r3, #0]
    }
}
 8003f56:	bd08      	pop	{r3, pc}
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003f58:	8acb      	ldrh	r3, [r1, #22]
 8003f5a:	8a0a      	ldrh	r2, [r1, #16]
 8003f5c:	1a9b      	subs	r3, r3, r2
 8003f5e:	4a20      	ldr	r2, [pc, #128]	; (8003fe0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf8>)
 8003f60:	6193      	str	r3, [r2, #24]
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003f62:	8acb      	ldrh	r3, [r1, #22]
 8003f64:	f8b1 c010 	ldrh.w	ip, [r1, #16]
 8003f68:	eba3 030c 	sub.w	r3, r3, ip
 8003f6c:	6113      	str	r3, [r2, #16]
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003f6e:	6250      	str	r0, [r2, #36]	; 0x24
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 8003f70:	7f08      	ldrb	r0, [r1, #28]
 8003f72:	4b1d      	ldr	r3, [pc, #116]	; (8003fe8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x100>)
 8003f74:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003f78:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGCOLR, ((blitOp.alpha << 24) | ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3)) & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8003f7a:	f891 c01c 	ldrb.w	ip, [r1, #28]
 8003f7e:	6988      	ldr	r0, [r1, #24]
 8003f80:	0203      	lsls	r3, r0, #8
 8003f82:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
 8003f86:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 8003f8a:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8003f8e:	f40c 4c7c 	and.w	ip, ip, #64512	; 0xfc00
 8003f92:	ea43 030c 	orr.w	r3, r3, ip
 8003f96:	00c0      	lsls	r0, r0, #3
 8003f98:	b2c0      	uxtb	r0, r0
 8003f9a:	4303      	orrs	r3, r0
 8003f9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003fa0:	6213      	str	r3, [r2, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003fa2:	68cb      	ldr	r3, [r1, #12]
 8003fa4:	6153      	str	r3, [r2, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003fa6:	68cb      	ldr	r3, [r1, #12]
 8003fa8:	60d3      	str	r3, [r2, #12]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8003faa:	4b10      	ldr	r3, [pc, #64]	; (8003fec <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8003fac:	6013      	str	r3, [r2, #0]
 8003fae:	e7d2      	b.n	8003f56 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x6e>
            WRITE_REG(DMA2D->OCOLR, (blitOp.alpha << 24) | (blitOp.alpha << 24) | ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
 8003fb0:	7f08      	ldrb	r0, [r1, #28]
 8003fb2:	698a      	ldr	r2, [r1, #24]
 8003fb4:	0213      	lsls	r3, r2, #8
 8003fb6:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
 8003fba:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003fbe:	0151      	lsls	r1, r2, #5
 8003fc0:	f401 417c 	and.w	r1, r1, #64512	; 0xfc00
 8003fc4:	430b      	orrs	r3, r1
 8003fc6:	00d2      	lsls	r2, r2, #3
 8003fc8:	b2d2      	uxtb	r2, r2
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	4a04      	ldr	r2, [pc, #16]	; (8003fe0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf8>)
 8003fce:	6393      	str	r3, [r2, #56]	; 0x38
 8003fd0:	e7be      	b.n	8003f50 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x68>
 8003fd2:	bf00      	nop
 8003fd4:	0800bb80 	.word	0x0800bb80
 8003fd8:	0800bb9c 	.word	0x0800bb9c
 8003fdc:	0800bbec 	.word	0x0800bbec
 8003fe0:	4002b000 	.word	0x4002b000
 8003fe4:	00030201 	.word	0x00030201
 8003fe8:	00010009 	.word	0x00010009
 8003fec:	00020201 	.word	0x00020201

08003ff0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8003ff0:	b538      	push	{r3, r4, r5, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8003ff2:	7f4b      	ldrb	r3, [r1, #29]
    switch (format)
 8003ff4:	2b0b      	cmp	r3, #11
 8003ff6:	d815      	bhi.n	8004024 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x34>
 8003ff8:	e8df f003 	tbb	[pc, r3]
 8003ffc:	141a1c06 	.word	0x141a1c06
 8004000:	12141414 	.word	0x12141414
 8004004:	12121212 	.word	0x12121212
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8004008:	2002      	movs	r0, #2
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800400a:	7f8b      	ldrb	r3, [r1, #30]
    switch (format)
 800400c:	2b0b      	cmp	r3, #11
 800400e:	d820      	bhi.n	8004052 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x62>
 8004010:	e8df f003 	tbb	[pc, r3]
 8004014:	1f252712 	.word	0x1f252712
 8004018:	1d1f1f1f 	.word	0x1d1f1f1f
 800401c:	1d1d1d1d 	.word	0x1d1d1d1d
        dma2dColorMode = DMA2D_INPUT_L8;
 8004020:	2005      	movs	r0, #5
        break;
 8004022:	e7f2      	b.n	800400a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a>
        assert(0 && "Unsupported Format!");
 8004024:	4b82      	ldr	r3, [pc, #520]	; (8004230 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x240>)
 8004026:	4a83      	ldr	r2, [pc, #524]	; (8004234 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>)
 8004028:	2165      	movs	r1, #101	; 0x65
 800402a:	4883      	ldr	r0, [pc, #524]	; (8004238 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x248>)
 800402c:	f006 f8c6 	bl	800a1bc <__assert_func>
    switch (format)
 8004030:	2000      	movs	r0, #0
 8004032:	e7ea      	b.n	800400a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a>
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8004034:	2001      	movs	r0, #1
 8004036:	e7e8      	b.n	800400a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8004038:	2402      	movs	r4, #2
    switch (format)
 800403a:	2b0a      	cmp	r3, #10
 800403c:	d815      	bhi.n	800406a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
 800403e:	e8df f003 	tbb	[pc, r3]
 8004042:	1c12      	.short	0x1c12
 8004044:	1414141a 	.word	0x1414141a
 8004048:	1c1c1c14 	.word	0x1c1c1c14
 800404c:	1c          	.byte	0x1c
 800404d:	00          	.byte	0x00
        dma2dColorMode = DMA2D_INPUT_L8;
 800404e:	2405      	movs	r4, #5
        break;
 8004050:	e7f3      	b.n	800403a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
        assert(0 && "Unsupported Format!");
 8004052:	4b77      	ldr	r3, [pc, #476]	; (8004230 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x240>)
 8004054:	4a77      	ldr	r2, [pc, #476]	; (8004234 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>)
 8004056:	2165      	movs	r1, #101	; 0x65
 8004058:	4877      	ldr	r0, [pc, #476]	; (8004238 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x248>)
 800405a:	f006 f8af 	bl	800a1bc <__assert_func>
    switch (format)
 800405e:	2400      	movs	r4, #0
 8004060:	e7eb      	b.n	800403a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8004062:	2401      	movs	r4, #1
 8004064:	e7e9      	b.n	800403a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8004066:	2502      	movs	r5, #2
        break;
 8004068:	e008      	b.n	800407c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
        assert(0 && "Unsupported Format!");
 800406a:	4b71      	ldr	r3, [pc, #452]	; (8004230 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x240>)
 800406c:	4a73      	ldr	r2, [pc, #460]	; (800423c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x24c>)
 800406e:	2186      	movs	r1, #134	; 0x86
 8004070:	4871      	ldr	r0, [pc, #452]	; (8004238 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x248>)
 8004072:	f006 f8a3 	bl	800a1bc <__assert_func>
    switch (format)
 8004076:	2500      	movs	r5, #0
 8004078:	e000      	b.n	800407c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 800407a:	2501      	movs	r5, #1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800407c:	8aca      	ldrh	r2, [r1, #22]
 800407e:	8a0b      	ldrh	r3, [r1, #16]
 8004080:	1ad2      	subs	r2, r2, r3
 8004082:	4b6f      	ldr	r3, [pc, #444]	; (8004240 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x250>)
 8004084:	641a      	str	r2, [r3, #64]	; 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8004086:	8aca      	ldrh	r2, [r1, #22]
 8004088:	f8b1 c010 	ldrh.w	ip, [r1, #16]
 800408c:	eba2 020c 	sub.w	r2, r2, ip
 8004090:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8004092:	8a8a      	ldrh	r2, [r1, #20]
 8004094:	f8b1 c010 	ldrh.w	ip, [r1, #16]
 8004098:	eba2 020c 	sub.w	r2, r2, ip
 800409c:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800409e:	635d      	str	r5, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80040a0:	8a4a      	ldrh	r2, [r1, #18]
 80040a2:	f8b1 c010 	ldrh.w	ip, [r1, #16]
 80040a6:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80040aa:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80040ac:	68ca      	ldr	r2, [r1, #12]
 80040ae:	63da      	str	r2, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80040b0:	684a      	ldr	r2, [r1, #4]
 80040b2:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 80040b4:	680b      	ldr	r3, [r1, #0]
 80040b6:	2b80      	cmp	r3, #128	; 0x80
 80040b8:	d033      	beq.n	8004122 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 80040ba:	d817      	bhi.n	80040ec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfc>
 80040bc:	2b20      	cmp	r3, #32
 80040be:	d07b      	beq.n	80041b8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c8>
 80040c0:	2b40      	cmp	r3, #64	; 0x40
 80040c2:	d079      	beq.n	80041b8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c8>
 80040c4:	2b04      	cmp	r3, #4
 80040c6:	f040 8084 	bne.w	80041d2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e2>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80040ca:	7f0b      	ldrb	r3, [r1, #28]
 80040cc:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80040d0:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80040d4:	4b5a      	ldr	r3, [pc, #360]	; (8004240 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x250>)
 80040d6:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80040d8:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80040da:	68ca      	ldr	r2, [r1, #12]
 80040dc:	615a      	str	r2, [r3, #20]
        if (blitOp.srcFormat == Bitmap::L8)
 80040de:	7f4b      	ldrb	r3, [r1, #29]
 80040e0:	2b0b      	cmp	r3, #11
 80040e2:	d036      	beq.n	8004152 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x162>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80040e4:	4b56      	ldr	r3, [pc, #344]	; (8004240 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x250>)
 80040e6:	4a57      	ldr	r2, [pc, #348]	; (8004244 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x254>)
 80040e8:	601a      	str	r2, [r3, #0]
        break;
 80040ea:	e031      	b.n	8004150 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>
    switch (blitOp.operation)
 80040ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040f0:	d16f      	bne.n	80041d2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e2>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80040f2:	7f0a      	ldrb	r2, [r1, #28]
 80040f4:	4b54      	ldr	r3, [pc, #336]	; (8004248 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x258>)
 80040f6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80040fa:	4851      	ldr	r0, [pc, #324]	; (8004240 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x250>)
 80040fc:	61c3      	str	r3, [r0, #28]
 80040fe:	698a      	ldr	r2, [r1, #24]
        WRITE_REG(DMA2D->FGCOLR, ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
 8004100:	0213      	lsls	r3, r2, #8
 8004102:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
 8004106:	0155      	lsls	r5, r2, #5
 8004108:	f405 457c 	and.w	r5, r5, #64512	; 0xfc00
 800410c:	432b      	orrs	r3, r5
 800410e:	00d2      	lsls	r2, r2, #3
 8004110:	b2d2      	uxtb	r2, r2
 8004112:	4313      	orrs	r3, r2
 8004114:	6203      	str	r3, [r0, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8004116:	6244      	str	r4, [r0, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8004118:	68cb      	ldr	r3, [r1, #12]
 800411a:	6143      	str	r3, [r0, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800411c:	4b49      	ldr	r3, [pc, #292]	; (8004244 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x254>)
 800411e:	6003      	str	r3, [r0, #0]
        break;
 8004120:	e016      	b.n	8004150 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8004122:	7f0a      	ldrb	r2, [r1, #28]
 8004124:	4b49      	ldr	r3, [pc, #292]	; (800424c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x25c>)
 8004126:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800412a:	4845      	ldr	r0, [pc, #276]	; (8004240 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x250>)
 800412c:	61c3      	str	r3, [r0, #28]
 800412e:	698a      	ldr	r2, [r1, #24]
        WRITE_REG(DMA2D->FGCOLR, ((blitOp.color & 0xF800) << 8) | ((blitOp.color & 0x07E0) << 5) | ((blitOp.color & 0x001F) << 3));
 8004130:	0213      	lsls	r3, r2, #8
 8004132:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
 8004136:	0155      	lsls	r5, r2, #5
 8004138:	f405 457c 	and.w	r5, r5, #64512	; 0xfc00
 800413c:	432b      	orrs	r3, r5
 800413e:	00d2      	lsls	r2, r2, #3
 8004140:	b2d2      	uxtb	r2, r2
 8004142:	4313      	orrs	r3, r2
 8004144:	6203      	str	r3, [r0, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8004146:	6244      	str	r4, [r0, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8004148:	68cb      	ldr	r3, [r1, #12]
 800414a:	6143      	str	r3, [r0, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800414c:	4b3d      	ldr	r3, [pc, #244]	; (8004244 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x254>)
 800414e:	6003      	str	r3, [r0, #0]
}
 8004150:	bd38      	pop	{r3, r4, r5, pc}
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8004152:	688b      	ldr	r3, [r1, #8]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8004154:	1d19      	adds	r1, r3, #4
 8004156:	4a3a      	ldr	r2, [pc, #232]	; (8004240 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x250>)
 8004158:	62d1      	str	r1, [r2, #44]	; 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 800415a:	781a      	ldrb	r2, [r3, #0]
 800415c:	b16a      	cbz	r2, 800417a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18a>
 800415e:	2a01      	cmp	r2, #1
 8004160:	d120      	bne.n	80041a4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b4>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8004162:	4937      	ldr	r1, [pc, #220]	; (8004240 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x250>)
 8004164:	69c8      	ldr	r0, [r1, #28]
 8004166:	4a3a      	ldr	r2, [pc, #232]	; (8004250 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x260>)
 8004168:	4002      	ands	r2, r0
 800416a:	885b      	ldrh	r3, [r3, #2]
 800416c:	3b01      	subs	r3, #1
 800416e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8004172:	f042 0210 	orr.w	r2, r2, #16
 8004176:	61ca      	str	r2, [r1, #28]
                break;
 8004178:	e008      	b.n	800418c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19c>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 800417a:	4931      	ldr	r1, [pc, #196]	; (8004240 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x250>)
 800417c:	69c8      	ldr	r0, [r1, #28]
 800417e:	4a34      	ldr	r2, [pc, #208]	; (8004250 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x260>)
 8004180:	4002      	ands	r2, r0
 8004182:	885b      	ldrh	r3, [r3, #2]
 8004184:	3b01      	subs	r3, #1
 8004186:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800418a:	61ca      	str	r2, [r1, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 800418c:	4a2c      	ldr	r2, [pc, #176]	; (8004240 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x250>)
 800418e:	69d3      	ldr	r3, [r2, #28]
 8004190:	f043 0320 	orr.w	r3, r3, #32
 8004194:	61d3      	str	r3, [r2, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8004196:	4b2a      	ldr	r3, [pc, #168]	; (8004240 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x250>)
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	f013 0f20 	tst.w	r3, #32
 800419e:	d007      	beq.n	80041b0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c0>
                __NOP();
 80041a0:	bf00      	nop
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80041a2:	e7f8      	b.n	8004196 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a6>
                assert(0 && "Unsupported format");
 80041a4:	4b2b      	ldr	r3, [pc, #172]	; (8004254 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>)
 80041a6:	4a2c      	ldr	r2, [pc, #176]	; (8004258 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x268>)
 80041a8:	21fc      	movs	r1, #252	; 0xfc
 80041aa:	4823      	ldr	r0, [pc, #140]	; (8004238 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x248>)
 80041ac:	f006 f806 	bl	800a1bc <__assert_func>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 80041b0:	4b23      	ldr	r3, [pc, #140]	; (8004240 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x250>)
 80041b2:	2210      	movs	r2, #16
 80041b4:	609a      	str	r2, [r3, #8]
 80041b6:	e795      	b.n	80040e4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80041b8:	7f0b      	ldrb	r3, [r1, #28]
 80041ba:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80041be:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80041c2:	4b1f      	ldr	r3, [pc, #124]	; (8004240 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x250>)
 80041c4:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80041c6:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80041c8:	68ca      	ldr	r2, [r1, #12]
 80041ca:	615a      	str	r2, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80041cc:	4a1d      	ldr	r2, [pc, #116]	; (8004244 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x254>)
 80041ce:	601a      	str	r2, [r3, #0]
        break;
 80041d0:	e7be      	b.n	8004150 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80041d2:	7f0b      	ldrb	r3, [r1, #28]
 80041d4:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80041d8:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80041dc:	4b18      	ldr	r3, [pc, #96]	; (8004240 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x250>)
 80041de:	61d8      	str	r0, [r3, #28]
        if (blitOp.srcFormat == Bitmap::L8)
 80041e0:	7f4b      	ldrb	r3, [r1, #29]
 80041e2:	2b0b      	cmp	r3, #11
 80041e4:	d004      	beq.n	80041f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x200>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80041e6:	4b16      	ldr	r3, [pc, #88]	; (8004240 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x250>)
 80041e8:	f240 2201 	movw	r2, #513	; 0x201
 80041ec:	601a      	str	r2, [r3, #0]
}
 80041ee:	e7af      	b.n	8004150 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 80041f0:	6889      	ldr	r1, [r1, #8]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 80041f2:	1d0b      	adds	r3, r1, #4
 80041f4:	4a12      	ldr	r2, [pc, #72]	; (8004240 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x250>)
 80041f6:	62d3      	str	r3, [r2, #44]	; 0x2c
            MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80041f8:	69d0      	ldr	r0, [r2, #28]
 80041fa:	4b15      	ldr	r3, [pc, #84]	; (8004250 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x260>)
 80041fc:	4003      	ands	r3, r0
 80041fe:	8849      	ldrh	r1, [r1, #2]
 8004200:	3901      	subs	r1, #1
 8004202:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004206:	f043 0310 	orr.w	r3, r3, #16
 800420a:	61d3      	str	r3, [r2, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 800420c:	69d3      	ldr	r3, [r2, #28]
 800420e:	f043 0320 	orr.w	r3, r3, #32
 8004212:	61d3      	str	r3, [r2, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8004214:	4b0a      	ldr	r3, [pc, #40]	; (8004240 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x250>)
 8004216:	69db      	ldr	r3, [r3, #28]
 8004218:	f013 0f20 	tst.w	r3, #32
 800421c:	d001      	beq.n	8004222 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
                __NOP();
 800421e:	bf00      	nop
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8004220:	e7f8      	b.n	8004214 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8004222:	4b07      	ldr	r3, [pc, #28]	; (8004240 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x250>)
 8004224:	2210      	movs	r2, #16
 8004226:	609a      	str	r2, [r3, #8]
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8004228:	4a0c      	ldr	r2, [pc, #48]	; (800425c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26c>)
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	e790      	b.n	8004150 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>
 800422e:	bf00      	nop
 8004230:	0800bb80 	.word	0x0800bb80
 8004234:	0800bc64 	.word	0x0800bc64
 8004238:	0800bbec 	.word	0x0800bbec
 800423c:	0800bb9c 	.word	0x0800bb9c
 8004240:	4002b000 	.word	0x4002b000
 8004244:	00020201 	.word	0x00020201
 8004248:	00020009 	.word	0x00020009
 800424c:	0002000a 	.word	0x0002000a
 8004250:	ffff00ef 	.word	0xffff00ef
 8004254:	0800bcb0 	.word	0x0800bcb0
 8004258:	0800bccc 	.word	0x0800bccc
 800425c:	00010201 	.word	0x00010201

08004260 <_ZN10STM32F7DMAC1Ev>:
STM32F7DMA::STM32F7DMA()
 8004260:	b538      	push	{r3, r4, r5, lr}
 8004262:	4605      	mov	r5, r0
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8004264:	4b0c      	ldr	r3, [pc, #48]	; (8004298 <_ZN10STM32F7DMAC1Ev+0x38>)
 8004266:	f840 3b0c 	str.w	r3, [r0], #12
 800426a:	6068      	str	r0, [r5, #4]
 800426c:	2300      	movs	r3, #0
 800426e:	722b      	strb	r3, [r5, #8]
 8004270:	726b      	strb	r3, [r5, #9]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8004272:	462c      	mov	r4, r5
 8004274:	4b09      	ldr	r3, [pc, #36]	; (800429c <_ZN10STM32F7DMAC1Ev+0x3c>)
 8004276:	f844 3b20 	str.w	r3, [r4], #32
 800427a:	2260      	movs	r2, #96	; 0x60
 800427c:	4621      	mov	r1, r4
 800427e:	f001 ffe5 	bl	800624c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8004282:	235f      	movs	r3, #95	; 0x5f
 8004284:	e003      	b.n	800428e <_ZN10STM32F7DMAC1Ev+0x2e>
        : color(0)
 8004286:	2200      	movs	r2, #0
 8004288:	61a2      	str	r2, [r4, #24]
 800428a:	3420      	adds	r4, #32
 800428c:	3b01      	subs	r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	daf9      	bge.n	8004286 <_ZN10STM32F7DMAC1Ev+0x26>
}
 8004292:	4628      	mov	r0, r5
 8004294:	bd38      	pop	{r3, r4, r5, pc}
 8004296:	bf00      	nop
 8004298:	0800c728 	.word	0x0800c728
 800429c:	0800b5a4 	.word	0x0800b5a4

080042a0 <_Z41__static_initialization_and_destruction_0ii>:
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
}
 80042a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042a4:	4604      	mov	r4, r0
 80042a6:	460e      	mov	r6, r1
 80042a8:	2801      	cmp	r0, #1
 80042aa:	d006      	beq.n	80042ba <_Z41__static_initialization_and_destruction_0ii+0x1a>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 80042ac:	b91c      	cbnz	r4, 80042b6 <_Z41__static_initialization_and_destruction_0ii+0x16>
 80042ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80042b2:	429e      	cmp	r6, r3
 80042b4:	d074      	beq.n	80043a0 <_Z41__static_initialization_and_destruction_0ii+0x100>
}
 80042b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80042be:	4299      	cmp	r1, r3
 80042c0:	d1f4      	bne.n	80042ac <_Z41__static_initialization_and_destruction_0ii+0xc>
class TouchController
 80042c2:	4d46      	ldr	r5, [pc, #280]	; (80043dc <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80042c4:	4b46      	ldr	r3, [pc, #280]	; (80043e0 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 80042c6:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
{
public:

    STM32TouchController() {}
 80042ca:	4b46      	ldr	r3, [pc, #280]	; (80043e4 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 80042cc:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
static STM32F7DMA dma;
 80042d0:	f105 0884 	add.w	r8, r5, #132	; 0x84
 80042d4:	4640      	mov	r0, r8
 80042d6:	f7ff ffc3 	bl	8004260 <_ZN10STM32F7DMAC1Ev>
static LCD16bpp display;
 80042da:	f605 47a4 	addw	r7, r5, #3236	; 0xca4
 80042de:	4638      	mov	r0, r7
 80042e0:	f004 fd64 	bl	8008dac <_ZN8touchgfx8LCD16bppC1Ev>
          lastRenderVariant(HARDWARE)
 80042e4:	4b40      	ldr	r3, [pc, #256]	; (80043e8 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 80042e6:	606b      	str	r3, [r5, #4]
 80042e8:	f8c5 8008 	str.w	r8, [r5, #8]
 80042ec:	60ef      	str	r7, [r5, #12]
 80042ee:	f105 0380 	add.w	r3, r5, #128	; 0x80
 80042f2:	612b      	str	r3, [r5, #16]
 80042f4:	2300      	movs	r3, #0
 80042f6:	616b      	str	r3, [r5, #20]
 80042f8:	61ab      	str	r3, [r5, #24]
 80042fa:	61eb      	str	r3, [r5, #28]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 80042fc:	842b      	strh	r3, [r5, #32]
 80042fe:	846b      	strh	r3, [r5, #34]	; 0x22
 8004300:	84ab      	strh	r3, [r5, #36]	; 0x24
 8004302:	84eb      	strh	r3, [r5, #38]	; 0x26
 8004304:	852b      	strh	r3, [r5, #40]	; 0x28
 8004306:	856b      	strh	r3, [r5, #42]	; 0x2a
 8004308:	85ab      	strh	r3, [r5, #44]	; 0x2c
 800430a:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : listener(0), dragThresholdValue(0)
 800430e:	632b      	str	r3, [r5, #48]	; 0x30
 8004310:	86ab      	strh	r3, [r5, #52]	; 0x34
 8004312:	63eb      	str	r3, [r5, #60]	; 0x3c
 8004314:	642b      	str	r3, [r5, #64]	; 0x40
 8004316:	646b      	str	r3, [r5, #68]	; 0x44
 8004318:	64ab      	str	r3, [r5, #72]	; 0x48
 800431a:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
 800431e:	2201      	movs	r2, #1
 8004320:	f885 204d 	strb.w	r2, [r5, #77]	; 0x4d
 8004324:	f885 304e 	strb.w	r3, [r5, #78]	; 0x4e
 8004328:	652b      	str	r3, [r5, #80]	; 0x50
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
    {
        x = 0;
 800432a:	f8a5 3054 	strh.w	r3, [r5, #84]	; 0x54
        y = 0;
 800432e:	f8a5 3056 	strh.w	r3, [r5, #86]	; 0x56
        width = 0;
 8004332:	f8a5 3058 	strh.w	r3, [r5, #88]	; 0x58
        height = 0;
 8004336:	f8a5 305a 	strh.w	r3, [r5, #90]	; 0x5a
 800433a:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
 800433e:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
 8004342:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
 8004346:	f885 206b 	strb.w	r2, [r5, #107]	; 0x6b
 800434a:	f885 306c 	strb.w	r3, [r5, #108]	; 0x6c
 800434e:	f885 306d 	strb.w	r3, [r5, #109]	; 0x6d
 8004352:	f885 306e 	strb.w	r3, [r5, #110]	; 0x6e
 8004356:	f885 306f 	strb.w	r3, [r5, #111]	; 0x6f
 800435a:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
 800435e:	676b      	str	r3, [r5, #116]	; 0x74
 8004360:	f885 3079 	strb.w	r3, [r5, #121]	; 0x79
 8004364:	f885 307a 	strb.w	r3, [r5, #122]	; 0x7a
 8004368:	f885 207b 	strb.w	r2, [r5, #123]	; 0x7b
 800436c:	f885 207c 	strb.w	r2, [r5, #124]	; 0x7c
        instance = this;
 8004370:	1d29      	adds	r1, r5, #4
 8004372:	4a1e      	ldr	r2, [pc, #120]	; (80043ec <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8004374:	6011      	str	r1, [r2, #0]
        DISPLAY_WIDTH = width;
 8004376:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800437a:	4a1d      	ldr	r2, [pc, #116]	; (80043f0 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 800437c:	8011      	strh	r1, [r2, #0]
        DISPLAY_HEIGHT = height;
 800437e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8004382:	481c      	ldr	r0, [pc, #112]	; (80043f4 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8004384:	8002      	strh	r2, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 8004386:	481c      	ldr	r0, [pc, #112]	; (80043f8 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8004388:	7003      	strb	r3, [r0, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 800438a:	481c      	ldr	r0, [pc, #112]	; (80043fc <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 800438c:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 800438e:	491c      	ldr	r1, [pc, #112]	; (8004400 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 8004390:	800a      	strh	r2, [r1, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8004392:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        touchgfx::HAL(dma, display, tc, width, height)
 8004396:	4b1b      	ldr	r3, [pc, #108]	; (8004404 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8004398:	606b      	str	r3, [r5, #4]
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 800439a:	4b1b      	ldr	r3, [pc, #108]	; (8004408 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 800439c:	606b      	str	r3, [r5, #4]
    }
 800439e:	e785      	b.n	80042ac <_Z41__static_initialization_and_destruction_0ii+0xc>
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80043a0:	4c0e      	ldr	r4, [pc, #56]	; (80043dc <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80043a2:	4b19      	ldr	r3, [pc, #100]	; (8004408 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 80043a4:	6063      	str	r3, [r4, #4]
class TouchGFXGeneratedHAL : public touchgfx::HAL
 80043a6:	4b17      	ldr	r3, [pc, #92]	; (8004404 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 80043a8:	6063      	str	r3, [r4, #4]
    {
 80043aa:	4b0f      	ldr	r3, [pc, #60]	; (80043e8 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 80043ac:	6063      	str	r3, [r4, #4]
 80043ae:	4b17      	ldr	r3, [pc, #92]	; (800440c <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 80043b0:	4a17      	ldr	r2, [pc, #92]	; (8004410 <_Z41__static_initialization_and_destruction_0ii+0x170>)
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	4a17      	ldr	r2, [pc, #92]	; (8004414 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 80043b6:	601a      	str	r2, [r3, #0]
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 80043b8:	4b17      	ldr	r3, [pc, #92]	; (8004418 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 80043ba:	f8c4 3ca4 	str.w	r3, [r4, #3236]	; 0xca4
class LCD
{
public:
    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
    {
 80043be:	4b17      	ldr	r3, [pc, #92]	; (800441c <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 80043c0:	f8c4 3ca4 	str.w	r3, [r4, #3236]	; 0xca4
static STM32F7DMA dma;
 80043c4:	f104 0084 	add.w	r0, r4, #132	; 0x84
 80043c8:	f7ff fd40 	bl	8003e4c <_ZN10STM32F7DMAD1Ev>
class STM32TouchController : public touchgfx::TouchController
 80043cc:	4b05      	ldr	r3, [pc, #20]	; (80043e4 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 80043ce:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    {
 80043d2:	4b03      	ldr	r3, [pc, #12]	; (80043e0 <_Z41__static_initialization_and_destruction_0ii+0x140>)
 80043d4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 80043d8:	e76d      	b.n	80042b6 <_Z41__static_initialization_and_destruction_0ii+0x16>
 80043da:	bf00      	nop
 80043dc:	200003e4 	.word	0x200003e4
 80043e0:	0800ba58 	.word	0x0800ba58
 80043e4:	0800b4d0 	.word	0x0800b4d0
 80043e8:	0800c2dc 	.word	0x0800c2dc
 80043ec:	2000132c 	.word	0x2000132c
 80043f0:	20001320 	.word	0x20001320
 80043f4:	20001322 	.word	0x20001322
 80043f8:	20001324 	.word	0x20001324
 80043fc:	20001326 	.word	0x20001326
 8004400:	20001328 	.word	0x20001328
 8004404:	0800b5f4 	.word	0x0800b5f4
 8004408:	0800b4e8 	.word	0x0800b4e8
 800440c:	20000038 	.word	0x20000038
 8004410:	0800b3e4 	.word	0x0800b3e4
 8004414:	0800b7e8 	.word	0x0800b7e8
 8004418:	0800d4e0 	.word	0x0800d4e0
 800441c:	0800c84c 	.word	0x0800c84c

08004420 <_GLOBAL__sub_I_touchgfx_init>:
 8004420:	b508      	push	{r3, lr}
 8004422:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004426:	2001      	movs	r0, #1
 8004428:	f7ff ff3a 	bl	80042a0 <_Z41__static_initialization_and_destruction_0ii>
 800442c:	bd08      	pop	{r3, pc}

0800442e <_GLOBAL__sub_D_touchgfx_init>:
 800442e:	b508      	push	{r3, lr}
 8004430:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004434:	2000      	movs	r0, #0
 8004436:	f7ff ff33 	bl	80042a0 <_Z41__static_initialization_and_destruction_0ii>
 800443a:	bd08      	pop	{r3, pc}

0800443c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800443c:	4b03      	ldr	r3, [pc, #12]	; (800444c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 800443e:	2290      	movs	r2, #144	; 0x90
 8004440:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 8004444:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	e000e100 	.word	0xe000e100

08004450 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004450:	4b03      	ldr	r3, [pc, #12]	; (8004460 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 8004452:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004456:	609a      	str	r2, [r3, #8]
 8004458:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800445c:	609a      	str	r2, [r3, #8]

void TouchGFXGeneratedHAL::enableInterrupts()
{
    NVIC_EnableIRQ(DMA2D_IRQn);
    NVIC_EnableIRQ(LTDC_IRQn);
}
 800445e:	4770      	bx	lr
 8004460:	e000e100 	.word	0xe000e100

08004464 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004464:	4b08      	ldr	r3, [pc, #32]	; (8004488 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 8004466:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800446a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 800446e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004472:	f3bf 8f6f 	isb	sy
 8004476:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800447a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 800447e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004482:	f3bf 8f6f 	isb	sy

void TouchGFXGeneratedHAL::disableInterrupts()
{
    NVIC_DisableIRQ(DMA2D_IRQn);
    NVIC_DisableIRQ(LTDC_IRQn);
}
 8004486:	4770      	bx	lr
 8004488:	e000e100 	.word	0xe000e100

0800448c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 800448c:	4a09      	ldr	r2, [pc, #36]	; (80044b4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 800448e:	68d3      	ldr	r3, [r2, #12]
 8004490:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004494:	3b01      	subs	r3, #1
 8004496:	b29b      	uxth	r3, r3
 8004498:	4807      	ldr	r0, [pc, #28]	; (80044b8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 800449a:	8003      	strh	r3, [r0, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800449c:	6911      	ldr	r1, [r2, #16]
 800449e:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80044a2:	3901      	subs	r1, #1
 80044a4:	8041      	strh	r1, [r0, #2]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 80044a6:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 80044a8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80044aa:	f043 0301 	orr.w	r3, r3, #1
 80044ae:	6353      	str	r3, [r2, #52]	; 0x34
}
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	40016800 	.word	0x40016800
 80044b8:	20001100 	.word	0x20001100

080044bc <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 80044bc:	4b01      	ldr	r3, [pc, #4]	; (80044c4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 80044be:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
}
 80044c2:	4770      	bx	lr
 80044c4:	40016800 	.word	0x40016800

080044c8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80044c8:	4b02      	ldr	r3, [pc, #8]	; (80044d4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)
 80044ca:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80044ce:	2201      	movs	r2, #1
 80044d0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80044d2:	4770      	bx	lr
 80044d4:	40016800 	.word	0x40016800

080044d8 <_ZN20TouchGFXGeneratedHALD1Ev>:
 80044d8:	4a02      	ldr	r2, [pc, #8]	; (80044e4 <_ZN20TouchGFXGeneratedHALD1Ev+0xc>)
 80044da:	6002      	str	r2, [r0, #0]
 80044dc:	4a02      	ldr	r2, [pc, #8]	; (80044e8 <_ZN20TouchGFXGeneratedHALD1Ev+0x10>)
 80044de:	6002      	str	r2, [r0, #0]
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	0800b5f4 	.word	0x0800b5f4
 80044e8:	0800c2dc 	.word	0x0800c2dc

080044ec <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80044ec:	b510      	push	{r4, lr}
    HAL::flushFrameBuffer(rect);
 80044ee:	f000 ff8a 	bl	8005406 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80044f2:	4b11      	ldr	r3, [pc, #68]	; (8004538 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x4c>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80044fa:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80044fe:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8004502:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8004506:	e000      	b.n	800450a <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x1e>
    } while(sets-- != 0U);
 8004508:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800450a:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800450e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8004512:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8004516:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 800451a:	4907      	ldr	r1, [pc, #28]	; (8004538 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x4c>)
 800451c:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8004520:	4613      	mov	r3, r2
 8004522:	3a01      	subs	r2, #1
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1f2      	bne.n	800450e <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x22>
    } while(sets-- != 0U);
 8004528:	1e43      	subs	r3, r0, #1
 800452a:	2800      	cmp	r0, #0
 800452c:	d1ec      	bne.n	8004508 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x1c>
 800452e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004532:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache prior to letting DMA2D accessing it. That's done
    // using SCB_CleanInvalidateDCache().
    SCB_CleanInvalidateDCache();
}
 8004536:	bd10      	pop	{r4, pc}
 8004538:	e000ed00 	.word	0xe000ed00

0800453c <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 800453c:	b508      	push	{r3, lr}
    return HAL::blockCopy(dest, src, numBytes);
 800453e:	f001 f896 	bl	800566e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
}
 8004542:	bd08      	pop	{r3, pc}

08004544 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
    virtual void flushFrameBuffer()
 8004544:	b508      	push	{r3, lr}
        HAL::flushFrameBuffer();
 8004546:	f000 ff58 	bl	80053fa <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 800454a:	bd08      	pop	{r3, pc}

0800454c <_ZN20TouchGFXGeneratedHALD0Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 800454c:	b510      	push	{r4, lr}
 800454e:	4604      	mov	r4, r0
 8004550:	4b04      	ldr	r3, [pc, #16]	; (8004564 <_ZN20TouchGFXGeneratedHALD0Ev+0x18>)
 8004552:	6003      	str	r3, [r0, #0]
 8004554:	4b04      	ldr	r3, [pc, #16]	; (8004568 <_ZN20TouchGFXGeneratedHALD0Ev+0x1c>)
 8004556:	6003      	str	r3, [r0, #0]
 8004558:	217c      	movs	r1, #124	; 0x7c
 800455a:	f005 fdd3 	bl	800a104 <_ZdlPvj>
 800455e:	4620      	mov	r0, r4
 8004560:	bd10      	pop	{r4, pc}
 8004562:	bf00      	nop
 8004564:	0800b5f4 	.word	0x0800b5f4
 8004568:	0800c2dc 	.word	0x0800c2dc

0800456c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
    // using SCB_CleanInvalidateDCache().
    SCB_CleanInvalidateDCache();
}

void TouchGFXGeneratedHAL::FlushCache()
{
 800456c:	b410      	push	{r4}
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800456e:	4b12      	ldr	r3, [pc, #72]	; (80045b8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 8004570:	2200      	movs	r2, #0
 8004572:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8004576:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800457a:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800457e:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8004582:	e000      	b.n	8004586 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x1a>
    } while(sets-- != 0U);
 8004584:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004586:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800458a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800458e:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8004592:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8004596:	4908      	ldr	r1, [pc, #32]	; (80045b8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 8004598:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 800459c:	4613      	mov	r3, r2
 800459e:	3a01      	subs	r2, #1
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1f2      	bne.n	800458a <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x1e>
    } while(sets-- != 0U);
 80045a4:	1e43      	subs	r3, r0, #1
 80045a6:	2800      	cmp	r0, #0
 80045a8:	d1ec      	bne.n	8004584 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x18>
 80045aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80045ae:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache prior to letting DMA2D accessing it. That's done
    // using SCB_CleanInvalidateDCache().
    SCB_CleanInvalidateDCache();
}
 80045b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045b6:	4770      	bx	lr
 80045b8:	e000ed00 	.word	0xe000ed00

080045bc <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:
{
 80045bc:	b410      	push	{r4}
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80045be:	4b12      	ldr	r3, [pc, #72]	; (8004608 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x4c>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80045c6:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80045ca:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80045ce:	f3c4 304e 	ubfx	r0, r4, #13, #15
 80045d2:	e000      	b.n	80045d6 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x1a>
    } while(sets-- != 0U);
 80045d4:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80045d6:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80045da:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80045de:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 80045e2:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 80045e6:	4908      	ldr	r1, [pc, #32]	; (8004608 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x4c>)
 80045e8:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 80045ec:	4613      	mov	r3, r2
 80045ee:	3a01      	subs	r2, #1
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1f2      	bne.n	80045da <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x1e>
    } while(sets-- != 0U);
 80045f4:	1e43      	subs	r3, r0, #1
 80045f6:	2800      	cmp	r0, #0
 80045f8:	d1ec      	bne.n	80045d4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x18>
 80045fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80045fe:	f3bf 8f6f 	isb	sy
}
 8004602:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004606:	4770      	bx	lr
 8004608:	e000ed00 	.word	0xe000ed00

0800460c <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 800460c:	b510      	push	{r4, lr}
        if (LTDC->LIPCR == lcd_int_active_line)
 800460e:	4b12      	ldr	r3, [pc, #72]	; (8004658 <HAL_LTDC_LineEventCallback+0x4c>)
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	4a12      	ldr	r2, [pc, #72]	; (800465c <HAL_LTDC_LineEventCallback+0x50>)
 8004614:	8811      	ldrh	r1, [r2, #0]
 8004616:	428b      	cmp	r3, r1
 8004618:	d00a      	beq.n	8004630 <HAL_LTDC_LineEventCallback+0x24>
            GPIO::set(GPIO::VSYNC_FREQ);
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 800461a:	f7fd fc57 	bl	8001ecc <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 800461e:	2000      	movs	r0, #0
 8004620:	f7ff fa93 	bl	8003b4a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
        return instance;
 8004624:	4b0e      	ldr	r3, [pc, #56]	; (8004660 <HAL_LTDC_LineEventCallback+0x54>)
 8004626:	6818      	ldr	r0, [r3, #0]
        allowDMATransfers();
 8004628:	6803      	ldr	r3, [r0, #0]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	4798      	blx	r3
            HAL::getInstance()->frontPorchEntered();
        }
    }
 800462e:	bd10      	pop	{r4, pc}
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8004630:	8851      	ldrh	r1, [r2, #2]
 8004632:	f7fd fc4b 	bl	8001ecc <HAL_LTDC_ProgramLineEvent>
        return instance;
 8004636:	4c0a      	ldr	r4, [pc, #40]	; (8004660 <HAL_LTDC_LineEventCallback+0x54>)
 8004638:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 800463a:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 800463e:	3301      	adds	r3, #1
 8004640:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            OSWrappers::signalVSync();
 8004644:	f7ff fbd4 	bl	8003df0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            HAL::getInstance()->swapFrameBuffers();
 8004648:	6820      	ldr	r0, [r4, #0]
 800464a:	f001 fc99 	bl	8005f80 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 800464e:	2000      	movs	r0, #0
 8004650:	f7ff fa7a 	bl	8003b48 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8004654:	e7eb      	b.n	800462e <HAL_LTDC_LineEventCallback+0x22>
 8004656:	bf00      	nop
 8004658:	40016800 	.word	0x40016800
 800465c:	20001100 	.word	0x20001100
 8004660:	2000132c 	.word	0x2000132c

08004664 <_ZN5Trace10initializeEv>:
    traceUart.write(strTrace);
}

//static
void Trace::initialize()
{
 8004664:	b508      	push	{r3, lr}
	traceUart.initialize(TRACE_UART_BAUD_RATE);
 8004666:	4802      	ldr	r0, [pc, #8]	; (8004670 <_ZN5Trace10initializeEv+0xc>)
 8004668:	f000 f896 	bl	8004798 <_ZN4Uart10initializeEv>
}
 800466c:	bd08      	pop	{r3, pc}
 800466e:	bf00      	nop
 8004670:	2000120c 	.word	0x2000120c

08004674 <_Z41__static_initialization_and_destruction_0ii>:

//static
void Trace::unlock()
{
    traceMutexUnlock();
}
 8004674:	b538      	push	{r3, r4, r5, lr}
 8004676:	4604      	mov	r4, r0
 8004678:	460d      	mov	r5, r1
 800467a:	2801      	cmp	r0, #1
 800467c:	d005      	beq.n	800468a <_Z41__static_initialization_and_destruction_0ii+0x16>
static Uart traceUart(TRACE_UART_CONSTRUCTOR_PARAMETERS);
 800467e:	b91c      	cbnz	r4, 8004688 <_Z41__static_initialization_and_destruction_0ii+0x14>
 8004680:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004684:	429d      	cmp	r5, r3
 8004686:	d00b      	beq.n	80046a0 <_Z41__static_initialization_and_destruction_0ii+0x2c>
}
 8004688:	bd38      	pop	{r3, r4, r5, pc}
 800468a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800468e:	4299      	cmp	r1, r3
 8004690:	d1f5      	bne.n	800467e <_Z41__static_initialization_and_destruction_0ii+0xa>
static Uart traceUart(TRACE_UART_CONSTRUCTOR_PARAMETERS);
 8004692:	2300      	movs	r3, #0
 8004694:	4a04      	ldr	r2, [pc, #16]	; (80046a8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8004696:	4619      	mov	r1, r3
 8004698:	4804      	ldr	r0, [pc, #16]	; (80046ac <_Z41__static_initialization_and_destruction_0ii+0x38>)
 800469a:	f000 f851 	bl	8004740 <_ZN4UartC1EhP20__UART_HandleTypeDefb>
 800469e:	e7ee      	b.n	800467e <_Z41__static_initialization_and_destruction_0ii+0xa>
 80046a0:	4802      	ldr	r0, [pc, #8]	; (80046ac <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80046a2:	f000 f83d 	bl	8004720 <_ZN4UartD1Ev>
}
 80046a6:	e7ef      	b.n	8004688 <_Z41__static_initialization_and_destruction_0ii+0x14>
 80046a8:	200000c8 	.word	0x200000c8
 80046ac:	2000120c 	.word	0x2000120c

080046b0 <_GLOBAL__sub_I_trace_initialize>:
 80046b0:	b508      	push	{r3, lr}
 80046b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80046b6:	2001      	movs	r0, #1
 80046b8:	f7ff ffdc 	bl	8004674 <_Z41__static_initialization_and_destruction_0ii>
 80046bc:	bd08      	pop	{r3, pc}

080046be <_GLOBAL__sub_D_trace_initialize>:
 80046be:	b508      	push	{r3, lr}
 80046c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80046c4:	2000      	movs	r0, #0
 80046c6:	f7ff ffd5 	bl	8004674 <_Z41__static_initialization_and_destruction_0ii>
 80046ca:	bd08      	pop	{r3, pc}

080046cc <critical_inIsr>:

int critical_inIsr()
{
    // Variable must be put to TRUE in every ISR to indicate execution
    // of an ISR and need to put back to FALSE before leaving ISR.
    return inIsr_;
 80046cc:	4b01      	ldr	r3, [pc, #4]	; (80046d4 <critical_inIsr+0x8>)
 80046ce:	6818      	ldr	r0, [r3, #0]
}
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	2000129c 	.word	0x2000129c

080046d8 <critical_enter>:
{
 80046d8:	b508      	push	{r3, lr}
	if (!critical_inIsr())
 80046da:	f7ff fff7 	bl	80046cc <critical_inIsr>
 80046de:	b938      	cbnz	r0, 80046f0 <critical_enter+0x18>
		if (!enterCriticalNested_)
 80046e0:	4b04      	ldr	r3, [pc, #16]	; (80046f4 <critical_enter+0x1c>)
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	b903      	cbnz	r3, 80046e8 <critical_enter+0x10>
  __ASM volatile ("cpsid i" : : : "memory");
 80046e6:	b672      	cpsid	i
		enterCriticalNested_++;
 80046e8:	4a02      	ldr	r2, [pc, #8]	; (80046f4 <critical_enter+0x1c>)
 80046ea:	6853      	ldr	r3, [r2, #4]
 80046ec:	3301      	adds	r3, #1
 80046ee:	6053      	str	r3, [r2, #4]
}
 80046f0:	bd08      	pop	{r3, pc}
 80046f2:	bf00      	nop
 80046f4:	2000129c 	.word	0x2000129c

080046f8 <critical_exit>:
{
 80046f8:	b508      	push	{r3, lr}
	if (!critical_inIsr())
 80046fa:	f7ff ffe7 	bl	80046cc <critical_inIsr>
 80046fe:	b930      	cbnz	r0, 800470e <critical_exit+0x16>
		enterCriticalNested_--;
 8004700:	4b03      	ldr	r3, [pc, #12]	; (8004710 <critical_exit+0x18>)
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	3a01      	subs	r2, #1
 8004706:	605a      	str	r2, [r3, #4]
		if (!enterCriticalNested_)
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	b903      	cbnz	r3, 800470e <critical_exit+0x16>
  __ASM volatile ("cpsie i" : : : "memory");
 800470c:	b662      	cpsie	i
}
 800470e:	bd08      	pop	{r3, pc}
 8004710:	2000129c 	.word	0x2000129c

08004714 <critical_setInIsr>:

void critical_setInIsr(bool inIsr)
{
    inIsr_ = inIsr;
 8004714:	4b01      	ldr	r3, [pc, #4]	; (800471c <critical_setInIsr+0x8>)
 8004716:	6018      	str	r0, [r3, #0]
}
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	2000129c 	.word	0x2000129c

08004720 <_ZN4UartD1Ev>:
            assert(false);  // Error: Instance for specified UART already exists.
        }
    }
}

Uart::~Uart()
 8004720:	4b01      	ldr	r3, [pc, #4]	; (8004728 <_ZN4UartD1Ev+0x8>)
 8004722:	6003      	str	r3, [r0, #0]
{

}
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	0800b6b0 	.word	0x0800b6b0

0800472c <_ZN4UartD0Ev>:
Uart::~Uart()
 800472c:	b510      	push	{r4, lr}
 800472e:	4604      	mov	r4, r0
}
 8004730:	f7ff fff6 	bl	8004720 <_ZN4UartD1Ev>
 8004734:	2190      	movs	r1, #144	; 0x90
 8004736:	4620      	mov	r0, r4
 8004738:	f005 fce4 	bl	800a104 <_ZdlPvj>
 800473c:	4620      	mov	r0, r4
 800473e:	bd10      	pop	{r4, pc}

08004740 <_ZN4UartC1EhP20__UART_HandleTypeDefb>:
Uart::Uart(const unsigned char uartNbr, UART_HandleTypeDef * uartHandle, bool bTxDMA /* = false */)
 8004740:	b510      	push	{r4, lr}
   _bTxDMA(bTxDMA)
 8004742:	4c0f      	ldr	r4, [pc, #60]	; (8004780 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x40>)
 8004744:	6004      	str	r4, [r0, #0]
 8004746:	24ff      	movs	r4, #255	; 0xff
 8004748:	7104      	strb	r4, [r0, #4]
 800474a:	2400      	movs	r4, #0
 800474c:	6084      	str	r4, [r0, #8]
 800474e:	7303      	strb	r3, [r0, #12]
	assert(uartNbr < UART_COUNT);
 8004750:	2902      	cmp	r1, #2
 8004752:	d809      	bhi.n	8004768 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x28>
        if (!_sUart[uartNbr])
 8004754:	4b0b      	ldr	r3, [pc, #44]	; (8004784 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x44>)
 8004756:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800475a:	b95b      	cbnz	r3, 8004774 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x34>
            _sUart[uartNbr] = this;
 800475c:	4b09      	ldr	r3, [pc, #36]	; (8004784 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x44>)
 800475e:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
            _uartNbr = uartNbr;
 8004762:	7101      	strb	r1, [r0, #4]
            _pUartHandle = uartHandle;
 8004764:	6082      	str	r2, [r0, #8]
}
 8004766:	bd10      	pop	{r4, pc}
	assert(uartNbr < UART_COUNT);
 8004768:	4b07      	ldr	r3, [pc, #28]	; (8004788 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x48>)
 800476a:	4a08      	ldr	r2, [pc, #32]	; (800478c <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x4c>)
 800476c:	2111      	movs	r1, #17
 800476e:	4808      	ldr	r0, [pc, #32]	; (8004790 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x50>)
 8004770:	f005 fd24 	bl	800a1bc <__assert_func>
            assert(false);  // Error: Instance for specified UART already exists.
 8004774:	4b07      	ldr	r3, [pc, #28]	; (8004794 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x54>)
 8004776:	4a05      	ldr	r2, [pc, #20]	; (800478c <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x4c>)
 8004778:	211f      	movs	r1, #31
 800477a:	4805      	ldr	r0, [pc, #20]	; (8004790 <_ZN4UartC1EhP20__UART_HandleTypeDefb+0x50>)
 800477c:	f005 fd1e 	bl	800a1bc <__assert_func>
 8004780:	0800b6b0 	.word	0x0800b6b0
 8004784:	200012a4 	.word	0x200012a4
 8004788:	0800bd30 	.word	0x0800bd30
 800478c:	0800bd48 	.word	0x0800bd48
 8004790:	0800bd80 	.word	0x0800bd80
 8004794:	0800bdec 	.word	0x0800bdec

08004798 <_ZN4Uart10initializeEv>:

bool Uart::initialize()
{
	return true;
}
 8004798:	2001      	movs	r0, #1
 800479a:	4770      	bx	lr

0800479c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800479c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80047d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80047a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80047a2:	e003      	b.n	80047ac <LoopCopyDataInit>

080047a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80047a4:	4b0c      	ldr	r3, [pc, #48]	; (80047d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80047a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80047a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80047aa:	3104      	adds	r1, #4

080047ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80047ac:	480b      	ldr	r0, [pc, #44]	; (80047dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80047ae:	4b0c      	ldr	r3, [pc, #48]	; (80047e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80047b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80047b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80047b4:	d3f6      	bcc.n	80047a4 <CopyDataInit>
  ldr  r2, =_sbss
 80047b6:	4a0b      	ldr	r2, [pc, #44]	; (80047e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80047b8:	e002      	b.n	80047c0 <LoopFillZerobss>

080047ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80047ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80047bc:	f842 3b04 	str.w	r3, [r2], #4

080047c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80047c0:	4b09      	ldr	r3, [pc, #36]	; (80047e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80047c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80047c4:	d3f9      	bcc.n	80047ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80047c6:	f7fc fbd7 	bl	8000f78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80047ca:	f005 fd2d 	bl	800a228 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80047ce:	f7fc fa33 	bl	8000c38 <main>
  bx  lr    
 80047d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80047d4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80047d8:	0800e590 	.word	0x0800e590
  ldr  r0, =_sdata
 80047dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80047e0:	200000ac 	.word	0x200000ac
  ldr  r2, =_sbss
 80047e4:	200000ac 	.word	0x200000ac
  ldr  r3, = _ebss
 80047e8:	20001530 	.word	0x20001530

080047ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80047ec:	e7fe      	b.n	80047ec <ADC_IRQHandler>

080047ee <_ZNK9XFTimeout18deleteAfterConsumeEv>:
}

bool XFTimeout::deleteAfterConsume() const
{
    return true;
}
 80047ee:	2001      	movs	r0, #1
 80047f0:	4770      	bx	lr
	...

080047f4 <_ZN9XFTimeoutD1Ev>:
 * the `getEventType()` method.
 *
 * XFTimeout is inheriting from XFEvent, so every timeout is
 * also an event.
 */
class XFTimeout : public XFEvent
 80047f4:	4a02      	ldr	r2, [pc, #8]	; (8004800 <_ZN9XFTimeoutD1Ev+0xc>)
 80047f6:	6002      	str	r2, [r0, #0]
 80047f8:	4a02      	ldr	r2, [pc, #8]	; (8004804 <_ZN9XFTimeoutD1Ev+0x10>)
 80047fa:	6002      	str	r2, [r0, #0]
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	0800b6c0 	.word	0x0800b6c0
 8004804:	0800b798 	.word	0x0800b798

08004808 <_ZN9XFTimeoutD0Ev>:
 8004808:	b510      	push	{r4, lr}
 800480a:	4604      	mov	r4, r0
 800480c:	4b04      	ldr	r3, [pc, #16]	; (8004820 <_ZN9XFTimeoutD0Ev+0x18>)
 800480e:	6003      	str	r3, [r0, #0]
 8004810:	4b04      	ldr	r3, [pc, #16]	; (8004824 <_ZN9XFTimeoutD0Ev+0x1c>)
 8004812:	6003      	str	r3, [r0, #0]
 8004814:	2118      	movs	r1, #24
 8004816:	f005 fc75 	bl	800a104 <_ZdlPvj>
 800481a:	4620      	mov	r0, r4
 800481c:	bd10      	pop	{r4, pc}
 800481e:	bf00      	nop
 8004820:	0800b6c0 	.word	0x0800b6c0
 8004824:	0800b798 	.word	0x0800b798

08004828 <_ZN9XFTimeoutC1EiiPN9interface10XFReactiveE>:
XFTimeout::XFTimeout(int id, int interval, interface::XFReactive * pBehavior)
 8004828:	b510      	push	{r4, lr}
    XFEvent(XFEventType eventType, int id, interface::XFReactive * pBehavior) : eventType_(eventType), id_(id), pBehavior_(pBehavior) {}
 800482a:	4c06      	ldr	r4, [pc, #24]	; (8004844 <_ZN9XFTimeoutC1EiiPN9interface10XFReactiveE+0x1c>)
 800482c:	6004      	str	r4, [r0, #0]
 800482e:	f04f 0e04 	mov.w	lr, #4
 8004832:	f880 e004 	strb.w	lr, [r0, #4]
 8004836:	6081      	str	r1, [r0, #8]
 8004838:	60c3      	str	r3, [r0, #12]
   relTicks_(interval)
 800483a:	4b03      	ldr	r3, [pc, #12]	; (8004848 <_ZN9XFTimeoutC1EiiPN9interface10XFReactiveE+0x20>)
 800483c:	6003      	str	r3, [r0, #0]
 800483e:	6102      	str	r2, [r0, #16]
 8004840:	6142      	str	r2, [r0, #20]
}
 8004842:	bd10      	pop	{r4, pc}
 8004844:	0800b798 	.word	0x0800b798
 8004848:	0800b6c0 	.word	0x0800b6c0

0800484c <_ZNK9XFTimeouteqERKS_>:
    return (pBehavior_ == timeout.pBehavior_ && getId() == timeout.getId()) ? true : false;
 800484c:	68c2      	ldr	r2, [r0, #12]
 800484e:	68cb      	ldr	r3, [r1, #12]
 8004850:	429a      	cmp	r2, r3
 8004852:	d001      	beq.n	8004858 <_ZNK9XFTimeouteqERKS_+0xc>
 8004854:	2000      	movs	r0, #0
 8004856:	4770      	bx	lr
    inline int getId() const { return id_; }		///< Returns #_id identifying the event in the behaviors context.
 8004858:	6882      	ldr	r2, [r0, #8]
 800485a:	688b      	ldr	r3, [r1, #8]
 800485c:	429a      	cmp	r2, r3
 800485e:	d001      	beq.n	8004864 <_ZNK9XFTimeouteqERKS_+0x18>
 8004860:	2000      	movs	r0, #0
}
 8004862:	4770      	bx	lr
    return (pBehavior_ == timeout.pBehavior_ && getId() == timeout.getId()) ? true : false;
 8004864:	2001      	movs	r0, #1
 8004866:	4770      	bx	lr

08004868 <_ZNK9interface12XFDispatcher9getThreadEv>:
     * @brief Returns pointer to thread executing the behavior.
     *
     * Within an IDF no threads are present and this method returns
     * always null.
     */
    virtual interface::XFThread * getThread() const { return nullptr; }
 8004868:	2000      	movs	r0, #0
 800486a:	4770      	bx	lr

0800486c <_ZNK19XFDispatcherDefault8isActiveEv>:
{
public:
	XFDispatcherDefault();
	virtual  ~XFDispatcherDefault();

	virtual bool isActive() const { return false; }		///< Default dispatcher does not have a composite thread.
 800486c:	2000      	movs	r0, #0
 800486e:	4770      	bx	lr

08004870 <_ZN19XFDispatcherDefault4stopEv>:
	_bExecuting = true;
}

void XFDispatcherDefault::stop()
{
	_bExecuting = false;
 8004870:	2300      	movs	r3, #0
 8004872:	7103      	strb	r3, [r0, #4]
}
 8004874:	4770      	bx	lr

08004876 <_ZNK19XFDispatcherDefault13dispatchEventEPK7XFEvent>:

    return _bExecuting;
}

void XFDispatcherDefault::dispatchEvent(const XFEvent * pEvent) const
{
 8004876:	b510      	push	{r4, lr}
 8004878:	460c      	mov	r4, r1
    inline interface::XFReactive * getBehavior() const { return pBehavior_; }
 800487a:	68c8      	ldr	r0, [r1, #12]
    XFReactive::TerminateBehavior terminateBehavior;

	terminateBehavior = pEvent->getBehavior()->process(pEvent);
 800487c:	6803      	ldr	r3, [r0, #0]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	4798      	blx	r3

	// Check if behavior should be deleted
	if (terminateBehavior and pEvent->getBehavior()->deleteOnTerminate())
 8004882:	b148      	cbz	r0, 8004898 <_ZNK19XFDispatcherDefault13dispatchEventEPK7XFEvent+0x22>
 8004884:	68e0      	ldr	r0, [r4, #12]
 8004886:	6803      	ldr	r3, [r0, #0]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	4798      	blx	r3
 800488c:	b120      	cbz	r0, 8004898 <_ZNK19XFDispatcherDefault13dispatchEventEPK7XFEvent+0x22>
 800488e:	68e0      	ldr	r0, [r4, #12]
	{
		delete pEvent->getBehavior();
 8004890:	b110      	cbz	r0, 8004898 <_ZNK19XFDispatcherDefault13dispatchEventEPK7XFEvent+0x22>
 8004892:	6803      	ldr	r3, [r0, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	4798      	blx	r3
	}
}
 8004898:	bd10      	pop	{r4, pc}
	...

0800489c <_ZN19XFDispatcherDefault5startEv>:
{
 800489c:	b508      	push	{r3, lr}
        assert(_pMutex);
 800489e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80048a0:	b113      	cbz	r3, 80048a8 <_ZN19XFDispatcherDefault5startEv+0xc>
	_bExecuting = true;
 80048a2:	2301      	movs	r3, #1
 80048a4:	7103      	strb	r3, [r0, #4]
}
 80048a6:	bd08      	pop	{r3, pc}
        assert(_pMutex);
 80048a8:	4b02      	ldr	r3, [pc, #8]	; (80048b4 <_ZN19XFDispatcherDefault5startEv+0x18>)
 80048aa:	4a03      	ldr	r2, [pc, #12]	; (80048b8 <_ZN19XFDispatcherDefault5startEv+0x1c>)
 80048ac:	2122      	movs	r1, #34	; 0x22
 80048ae:	4803      	ldr	r0, [pc, #12]	; (80048bc <_ZN19XFDispatcherDefault5startEv+0x20>)
 80048b0:	f005 fc84 	bl	800a1bc <__assert_func>
 80048b4:	0800be48 	.word	0x0800be48
 80048b8:	0800be50 	.word	0x0800be50
 80048bc:	0800be7c 	.word	0x0800be7c

080048c0 <_ZN19XFDispatcherDefault15scheduleTimeoutEiiPN9interface10XFReactiveE>:
{
 80048c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048c2:	460c      	mov	r4, r1
 80048c4:	4615      	mov	r5, r2
 80048c6:	461e      	mov	r6, r3
	XFTimeoutManager::getInstance()->scheduleTimeout(timeoutId, interval, pReactive);
 80048c8:	f000 f9c0 	bl	8004c4c <_ZN9interface16XFTimeoutManager11getInstanceEv>
 80048cc:	6803      	ldr	r3, [r0, #0]
 80048ce:	695f      	ldr	r7, [r3, #20]
 80048d0:	4633      	mov	r3, r6
 80048d2:	462a      	mov	r2, r5
 80048d4:	4621      	mov	r1, r4
 80048d6:	47b8      	blx	r7
}
 80048d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080048da <_ZN19XFDispatcherDefault17unscheduleTimeoutEiPN9interface10XFReactiveE>:
{
 80048da:	b538      	push	{r3, r4, r5, lr}
 80048dc:	460c      	mov	r4, r1
 80048de:	4615      	mov	r5, r2
	XFTimeoutManager::getInstance()->unscheduleTimeout(timeoutId, pReactive);
 80048e0:	f000 f9b4 	bl	8004c4c <_ZN9interface16XFTimeoutManager11getInstanceEv>
 80048e4:	6803      	ldr	r3, [r0, #0]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	462a      	mov	r2, r5
 80048ea:	4621      	mov	r1, r4
 80048ec:	4798      	blx	r3
}
 80048ee:	bd38      	pop	{r3, r4, r5, pc}

080048f0 <_ZN19XFDispatcherDefaultC1Ev>:
XFDispatcherDefault::XFDispatcherDefault() :
 80048f0:	b538      	push	{r3, r4, r5, lr}
 80048f2:	4604      	mov	r4, r0
    XFDispatcher() = default;
 80048f4:	4b0a      	ldr	r3, [pc, #40]	; (8004920 <_ZN19XFDispatcherDefaultC1Ev+0x30>)
 80048f6:	6003      	str	r3, [r0, #0]
	_pMutex(nullptr)
 80048f8:	4b0a      	ldr	r3, [pc, #40]	; (8004924 <_ZN19XFDispatcherDefaultC1Ev+0x34>)
 80048fa:	6003      	str	r3, [r0, #0]
 80048fc:	2500      	movs	r5, #0
 80048fe:	7105      	strb	r5, [r0, #4]
 8004900:	3008      	adds	r0, #8
 8004902:	f000 fbcf 	bl	80050a4 <_ZN19XFEventQueueDefaultC1Ev>
 8004906:	63a5      	str	r5, [r4, #56]	; 0x38
	_pMutex = XFMutex::create();
 8004908:	f000 fd44 	bl	8005394 <_ZN9interface7XFMutex6createEv>
 800490c:	63a0      	str	r0, [r4, #56]	; 0x38
	assert(_pMutex);
 800490e:	b108      	cbz	r0, 8004914 <_ZN19XFDispatcherDefaultC1Ev+0x24>
}
 8004910:	4620      	mov	r0, r4
 8004912:	bd38      	pop	{r3, r4, r5, pc}
	assert(_pMutex);
 8004914:	4b04      	ldr	r3, [pc, #16]	; (8004928 <_ZN19XFDispatcherDefaultC1Ev+0x38>)
 8004916:	4a05      	ldr	r2, [pc, #20]	; (800492c <_ZN19XFDispatcherDefaultC1Ev+0x3c>)
 8004918:	2118      	movs	r1, #24
 800491a:	4805      	ldr	r0, [pc, #20]	; (8004930 <_ZN19XFDispatcherDefaultC1Ev+0x40>)
 800491c:	f005 fc4e 	bl	800a1bc <__assert_func>
 8004920:	0800bf1c 	.word	0x0800bf1c
 8004924:	0800b6d4 	.word	0x0800b6d4
 8004928:	0800be48 	.word	0x0800be48
 800492c:	0800bee8 	.word	0x0800bee8
 8004930:	0800be7c 	.word	0x0800be7c

08004934 <_ZN19XFDispatcherDefaultD1Ev>:
XFDispatcherDefault::~XFDispatcherDefault()
 8004934:	b510      	push	{r4, lr}
 8004936:	4604      	mov	r4, r0
 8004938:	4b04      	ldr	r3, [pc, #16]	; (800494c <_ZN19XFDispatcherDefaultD1Ev+0x18>)
 800493a:	f840 3b08 	str.w	r3, [r0], #8
 800493e:	f000 fc89 	bl	8005254 <_ZN19XFEventQueueDefaultD1Ev>
    virtual ~XFDispatcher() = default;
 8004942:	4b03      	ldr	r3, [pc, #12]	; (8004950 <_ZN19XFDispatcherDefaultD1Ev+0x1c>)
 8004944:	6023      	str	r3, [r4, #0]
}
 8004946:	4620      	mov	r0, r4
 8004948:	bd10      	pop	{r4, pc}
 800494a:	bf00      	nop
 800494c:	0800b6d4 	.word	0x0800b6d4
 8004950:	0800bf1c 	.word	0x0800bf1c

08004954 <_ZN19XFDispatcherDefaultD0Ev>:
XFDispatcherDefault::~XFDispatcherDefault()
 8004954:	b510      	push	{r4, lr}
 8004956:	4604      	mov	r4, r0
}
 8004958:	f7ff ffec 	bl	8004934 <_ZN19XFDispatcherDefaultD1Ev>
 800495c:	213c      	movs	r1, #60	; 0x3c
 800495e:	4620      	mov	r0, r4
 8004960:	f005 fbd0 	bl	800a104 <_ZdlPvj>
 8004964:	4620      	mov	r0, r4
 8004966:	bd10      	pop	{r4, pc}

08004968 <_ZN19XFDispatcherDefault9pushEventEP7XFEventb>:
{
 8004968:	b538      	push	{r3, r4, r5, lr}
 800496a:	4604      	mov	r4, r0
 800496c:	460d      	mov	r5, r1
	_pMutex->lock();
 800496e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8004970:	6803      	ldr	r3, [r0, #0]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	4798      	blx	r3
		_events.push(pEvent);
 8004976:	2200      	movs	r2, #0
 8004978:	4629      	mov	r1, r5
 800497a:	f104 0008 	add.w	r0, r4, #8
 800497e:	f000 fc97 	bl	80052b0 <_ZN19XFEventQueueDefault4pushEPK7XFEventb>
	_pMutex->unlock();
 8004982:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004984:	6803      	ldr	r3, [r0, #0]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	4798      	blx	r3
}
 800498a:	bd38      	pop	{r3, r4, r5, pc}

0800498c <_ZN19XFDispatcherDefault7executeEPKv>:
{
 800498c:	b510      	push	{r4, lr}
 800498e:	4604      	mov	r4, r0
 8004990:	e003      	b.n	800499a <_ZN19XFDispatcherDefault7executeEPKv+0xe>
		executeOnce();  // Dispatch next event
 8004992:	6823      	ldr	r3, [r4, #0]
 8004994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004996:	4620      	mov	r0, r4
 8004998:	4798      	blx	r3
	while(_bExecuting)
 800499a:	7923      	ldrb	r3, [r4, #4]
 800499c:	b14b      	cbz	r3, 80049b2 <_ZN19XFDispatcherDefault7executeEPKv+0x26>
		while (_events.empty() && _bExecuting)
 800499e:	f104 0008 	add.w	r0, r4, #8
 80049a2:	f000 faf9 	bl	8004f98 <_ZNK19XFEventQueueDefault5emptyEv>
 80049a6:	2800      	cmp	r0, #0
 80049a8:	d0f3      	beq.n	8004992 <_ZN19XFDispatcherDefault7executeEPKv+0x6>
 80049aa:	7923      	ldrb	r3, [r4, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d0f0      	beq.n	8004992 <_ZN19XFDispatcherDefault7executeEPKv+0x6>
 80049b0:	e7f5      	b.n	800499e <_ZN19XFDispatcherDefault7executeEPKv+0x12>
}
 80049b2:	2000      	movs	r0, #0
 80049b4:	bd10      	pop	{r4, pc}

080049b6 <_ZN19XFDispatcherDefault11executeOnceEv>:
{
 80049b6:	b570      	push	{r4, r5, r6, lr}
 80049b8:	4604      	mov	r4, r0
    if (!_events.empty() and _bExecuting)
 80049ba:	f100 0508 	add.w	r5, r0, #8
 80049be:	4628      	mov	r0, r5
 80049c0:	f000 faea 	bl	8004f98 <_ZNK19XFEventQueueDefault5emptyEv>
 80049c4:	bb20      	cbnz	r0, 8004a10 <_ZN19XFDispatcherDefault11executeOnceEv+0x5a>
 80049c6:	7923      	ldrb	r3, [r4, #4]
 80049c8:	b313      	cbz	r3, 8004a10 <_ZN19XFDispatcherDefault11executeOnceEv+0x5a>
        _pMutex->lock();
 80049ca:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80049cc:	6803      	ldr	r3, [r0, #0]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	4798      	blx	r3
        	pEvent = _events.front(); _events.pop();
 80049d2:	4628      	mov	r0, r5
 80049d4:	f000 fc8a 	bl	80052ec <_ZN19XFEventQueueDefault5frontEv>
 80049d8:	4606      	mov	r6, r0
 80049da:	4628      	mov	r0, r5
 80049dc:	f000 fc9c 	bl	8005318 <_ZN19XFEventQueueDefault3popEv>
    	_pMutex->unlock();
 80049e0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80049e2:	6803      	ldr	r3, [r0, #0]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	4798      	blx	r3
        if (pEvent)
 80049e8:	b196      	cbz	r6, 8004a10 <_ZN19XFDispatcherDefault11executeOnceEv+0x5a>
            dispatchEvent(pEvent);
 80049ea:	6823      	ldr	r3, [r4, #0]
 80049ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ee:	4631      	mov	r1, r6
 80049f0:	4620      	mov	r0, r4
 80049f2:	4798      	blx	r3
    inline XFEventType getEventType() const { return eventType_; }
 80049f4:	f996 3004 	ldrsb.w	r3, [r6, #4]
            if (pEvent->getEventType() == XFEvent::Terminate)
 80049f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049fc:	d00a      	beq.n	8004a14 <_ZN19XFDispatcherDefault11executeOnceEv+0x5e>
            if (pEvent->deleteAfterConsume())
 80049fe:	6833      	ldr	r3, [r6, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	4630      	mov	r0, r6
 8004a04:	4798      	blx	r3
 8004a06:	b118      	cbz	r0, 8004a10 <_ZN19XFDispatcherDefault11executeOnceEv+0x5a>
                delete pEvent;
 8004a08:	6833      	ldr	r3, [r6, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	4630      	mov	r0, r6
 8004a0e:	4798      	blx	r3
}
 8004a10:	7920      	ldrb	r0, [r4, #4]
 8004a12:	bd70      	pop	{r4, r5, r6, pc}
                _bExecuting = false;
 8004a14:	2300      	movs	r3, #0
 8004a16:	7123      	strb	r3, [r4, #4]
 8004a18:	e7f1      	b.n	80049fe <_ZN19XFDispatcherDefault11executeOnceEv+0x48>
	...

08004a1c <__tcf_0>:
 * @brief Default implementation of the XF resource factory.
 */
class XFResourceFactoryDefault : public interface::XFResourceFactory
{
public:
	virtual ~XFResourceFactoryDefault() = default;
 8004a1c:	4b02      	ldr	r3, [pc, #8]	; (8004a28 <__tcf_0+0xc>)
 8004a1e:	4a03      	ldr	r2, [pc, #12]	; (8004a2c <__tcf_0+0x10>)
 8004a20:	601a      	str	r2, [r3, #0]
     * @brief Returns a new mutex.
     * @return Pointer to new mutex.
     */
    virtual interface::XFMutex * createMutex() = 0;

    virtual ~XFResourceFactory() = default;
 8004a22:	4a03      	ldr	r2, [pc, #12]	; (8004a30 <__tcf_0+0x14>)
 8004a24:	601a      	str	r2, [r3, #0]
}

//static
interface::XFResourceFactory * XFResourceFactoryDefault::getInstance()
{
    static XFResourceFactoryDefault theResourceFactory;
 8004a26:	4770      	bx	lr
 8004a28:	2000003c 	.word	0x2000003c
 8004a2c:	0800b70c 	.word	0x0800b70c
 8004a30:	0800bf54 	.word	0x0800bf54

08004a34 <_ZN24XFResourceFactoryDefault16createDispatcherEv>:

	return &mainDispatcher;
}

interface::XFDispatcher * XFResourceFactoryDefault::createDispatcher()
{
 8004a34:	b508      	push	{r3, lr}
	// Default implementation cannot create new dispatcher. Return the default dispatcher
	return getDefaultDispatcher();
 8004a36:	6803      	ldr	r3, [r0, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4798      	blx	r3
}
 8004a3c:	bd08      	pop	{r3, pc}

08004a3e <_ZN24XFResourceFactoryDefault12createThreadEPN9interface26XFThreadEntryPointProviderEMS1_FvPKvEPKcm>:

interface::XFThread * XFResourceFactoryDefault::createThread(interface::XFThreadEntryPointProvider * pProvider,
												  	  	     interface::XFThread::EntryMethodBody entryMethod,
														     const char * threadName,
														     const uint32_t stackSize /* = 0 */)
{
 8004a3e:	b082      	sub	sp, #8
 8004a40:	a902      	add	r1, sp, #8
 8004a42:	e901 000c 	stmdb	r1, {r2, r3}
	// Default implementation cannot create threads (no underlying OS present)
	return nullptr;
}
 8004a46:	2000      	movs	r0, #0
 8004a48:	b002      	add	sp, #8
 8004a4a:	4770      	bx	lr

08004a4c <_ZN24XFResourceFactoryDefaultD1Ev>:
 8004a4c:	4a02      	ldr	r2, [pc, #8]	; (8004a58 <_ZN24XFResourceFactoryDefaultD1Ev+0xc>)
 8004a4e:	6002      	str	r2, [r0, #0]
 8004a50:	4a02      	ldr	r2, [pc, #8]	; (8004a5c <_ZN24XFResourceFactoryDefaultD1Ev+0x10>)
 8004a52:	6002      	str	r2, [r0, #0]
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	0800b70c 	.word	0x0800b70c
 8004a5c:	0800bf54 	.word	0x0800bf54

08004a60 <_ZN24XFResourceFactoryDefaultD0Ev>:
 8004a60:	b510      	push	{r4, lr}
 8004a62:	4604      	mov	r4, r0
 8004a64:	4b04      	ldr	r3, [pc, #16]	; (8004a78 <_ZN24XFResourceFactoryDefaultD0Ev+0x18>)
 8004a66:	6003      	str	r3, [r0, #0]
 8004a68:	4b04      	ldr	r3, [pc, #16]	; (8004a7c <_ZN24XFResourceFactoryDefaultD0Ev+0x1c>)
 8004a6a:	6003      	str	r3, [r0, #0]
 8004a6c:	2104      	movs	r1, #4
 8004a6e:	f005 fb49 	bl	800a104 <_ZdlPvj>
 8004a72:	4620      	mov	r0, r4
 8004a74:	bd10      	pop	{r4, pc}
 8004a76:	bf00      	nop
 8004a78:	0800b70c 	.word	0x0800b70c
 8004a7c:	0800bf54 	.word	0x0800bf54

08004a80 <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv>:
	static XFDispatcherDefault mainDispatcher;
 8004a80:	4b0d      	ldr	r3, [pc, #52]	; (8004ab8 <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv+0x38>)
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	f3bf 8f5b 	dmb	ish
 8004a88:	f013 0f01 	tst.w	r3, #1
 8004a8c:	d001      	beq.n	8004a92 <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv+0x12>
}
 8004a8e:	480b      	ldr	r0, [pc, #44]	; (8004abc <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv+0x3c>)
 8004a90:	4770      	bx	lr
{
 8004a92:	b510      	push	{r4, lr}
	static XFDispatcherDefault mainDispatcher;
 8004a94:	4808      	ldr	r0, [pc, #32]	; (8004ab8 <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv+0x38>)
 8004a96:	f005 fb37 	bl	800a108 <__cxa_guard_acquire>
 8004a9a:	b908      	cbnz	r0, 8004aa0 <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv+0x20>
}
 8004a9c:	4807      	ldr	r0, [pc, #28]	; (8004abc <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv+0x3c>)
 8004a9e:	bd10      	pop	{r4, pc}
	static XFDispatcherDefault mainDispatcher;
 8004aa0:	4c05      	ldr	r4, [pc, #20]	; (8004ab8 <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv+0x38>)
 8004aa2:	1d20      	adds	r0, r4, #4
 8004aa4:	f7ff ff24 	bl	80048f0 <_ZN19XFDispatcherDefaultC1Ev>
 8004aa8:	4805      	ldr	r0, [pc, #20]	; (8004ac0 <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv+0x40>)
 8004aaa:	f005 fba5 	bl	800a1f8 <atexit>
 8004aae:	4620      	mov	r0, r4
 8004ab0:	f005 fb36 	bl	800a120 <__cxa_guard_release>
 8004ab4:	e7f2      	b.n	8004a9c <_ZN24XFResourceFactoryDefault20getDefaultDispatcherEv+0x1c>
 8004ab6:	bf00      	nop
 8004ab8:	200012b4 	.word	0x200012b4
 8004abc:	200012b8 	.word	0x200012b8
 8004ac0:	08004b59 	.word	0x08004b59

08004ac4 <_ZN24XFResourceFactoryDefault11createMutexEv>:

interface::XFMutex * XFResourceFactoryDefault::createMutex()
{
	static XFMutexDefault mutex;
 8004ac4:	4b0e      	ldr	r3, [pc, #56]	; (8004b00 <_ZN24XFResourceFactoryDefault11createMutexEv+0x3c>)
 8004ac6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004aca:	f3bf 8f5b 	dmb	ish
 8004ace:	f013 0f01 	tst.w	r3, #1
 8004ad2:	d001      	beq.n	8004ad8 <_ZN24XFResourceFactoryDefault11createMutexEv+0x14>

	return &mutex;
}
 8004ad4:	480b      	ldr	r0, [pc, #44]	; (8004b04 <_ZN24XFResourceFactoryDefault11createMutexEv+0x40>)
 8004ad6:	4770      	bx	lr
{
 8004ad8:	b510      	push	{r4, lr}
	static XFMutexDefault mutex;
 8004ada:	480b      	ldr	r0, [pc, #44]	; (8004b08 <_ZN24XFResourceFactoryDefault11createMutexEv+0x44>)
 8004adc:	f005 fb14 	bl	800a108 <__cxa_guard_acquire>
 8004ae0:	b908      	cbnz	r0, 8004ae6 <_ZN24XFResourceFactoryDefault11createMutexEv+0x22>
}
 8004ae2:	4808      	ldr	r0, [pc, #32]	; (8004b04 <_ZN24XFResourceFactoryDefault11createMutexEv+0x40>)
 8004ae4:	bd10      	pop	{r4, pc}
	static XFMutexDefault mutex;
 8004ae6:	4c06      	ldr	r4, [pc, #24]	; (8004b00 <_ZN24XFResourceFactoryDefault11createMutexEv+0x3c>)
 8004ae8:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8004aec:	f000 fc48 	bl	8005380 <_ZN14XFMutexDefaultC1Ev>
 8004af0:	4806      	ldr	r0, [pc, #24]	; (8004b0c <_ZN24XFResourceFactoryDefault11createMutexEv+0x48>)
 8004af2:	f005 fb81 	bl	800a1f8 <atexit>
 8004af6:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8004afa:	f005 fb11 	bl	800a120 <__cxa_guard_release>
 8004afe:	e7f0      	b.n	8004ae2 <_ZN24XFResourceFactoryDefault11createMutexEv+0x1e>
 8004b00:	200012b4 	.word	0x200012b4
 8004b04:	200012f8 	.word	0x200012f8
 8004b08:	200012f4 	.word	0x200012f4
 8004b0c:	08004b69 	.word	0x08004b69

08004b10 <_ZN24XFResourceFactoryDefault11getInstanceEv>:
{
 8004b10:	b508      	push	{r3, lr}
    static XFResourceFactoryDefault theResourceFactory;
 8004b12:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <_ZN24XFResourceFactoryDefault11getInstanceEv+0x30>)
 8004b14:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8004b18:	f3bf 8f5b 	dmb	ish
 8004b1c:	f013 0f01 	tst.w	r3, #1
 8004b20:	d001      	beq.n	8004b26 <_ZN24XFResourceFactoryDefault11getInstanceEv+0x16>
}
 8004b22:	4808      	ldr	r0, [pc, #32]	; (8004b44 <_ZN24XFResourceFactoryDefault11getInstanceEv+0x34>)
 8004b24:	bd08      	pop	{r3, pc}
    static XFResourceFactoryDefault theResourceFactory;
 8004b26:	4808      	ldr	r0, [pc, #32]	; (8004b48 <_ZN24XFResourceFactoryDefault11getInstanceEv+0x38>)
 8004b28:	f005 faee 	bl	800a108 <__cxa_guard_acquire>
 8004b2c:	2800      	cmp	r0, #0
 8004b2e:	d0f8      	beq.n	8004b22 <_ZN24XFResourceFactoryDefault11getInstanceEv+0x12>
 8004b30:	4806      	ldr	r0, [pc, #24]	; (8004b4c <_ZN24XFResourceFactoryDefault11getInstanceEv+0x3c>)
 8004b32:	f005 fb61 	bl	800a1f8 <atexit>
 8004b36:	4804      	ldr	r0, [pc, #16]	; (8004b48 <_ZN24XFResourceFactoryDefault11getInstanceEv+0x38>)
 8004b38:	f005 faf2 	bl	800a120 <__cxa_guard_release>
 8004b3c:	e7f1      	b.n	8004b22 <_ZN24XFResourceFactoryDefault11getInstanceEv+0x12>
 8004b3e:	bf00      	nop
 8004b40:	200012b4 	.word	0x200012b4
 8004b44:	2000003c 	.word	0x2000003c
 8004b48:	200012fc 	.word	0x200012fc
 8004b4c:	08004a1d 	.word	0x08004a1d

08004b50 <_ZN9interface17XFResourceFactory11getInstanceEv>:
{
 8004b50:	b508      	push	{r3, lr}
	return XFResourceFactoryDefault::getInstance();
 8004b52:	f7ff ffdd 	bl	8004b10 <_ZN24XFResourceFactoryDefault11getInstanceEv>
}
 8004b56:	bd08      	pop	{r3, pc}

08004b58 <__tcf_1>:
	static XFDispatcherDefault mainDispatcher;
 8004b58:	b508      	push	{r3, lr}
 8004b5a:	4802      	ldr	r0, [pc, #8]	; (8004b64 <__tcf_1+0xc>)
 8004b5c:	f7ff feea 	bl	8004934 <_ZN19XFDispatcherDefaultD1Ev>
 8004b60:	bd08      	pop	{r3, pc}
 8004b62:	bf00      	nop
 8004b64:	200012b8 	.word	0x200012b8

08004b68 <__tcf_2>:
	static XFMutexDefault mutex;
 8004b68:	b508      	push	{r3, lr}
 8004b6a:	4802      	ldr	r0, [pc, #8]	; (8004b74 <__tcf_2+0xc>)
 8004b6c:	f000 fbea 	bl	8005344 <_ZN14XFMutexDefaultD1Ev>
 8004b70:	bd08      	pop	{r3, pc}
 8004b72:	bf00      	nop
 8004b74:	200012f8 	.word	0x200012f8

08004b78 <_ZN9interface16XFTimeoutManager10initializeEl>:
     * Sets the time interval in milliseconds in which the timeout manager
     * should handle the timeouts.
     */
    virtual void initialize(int32_t tickInterval)
    {
        tickInterval_ = tickInterval;
 8004b78:	6041      	str	r1, [r0, #4]
    }
 8004b7a:	4770      	bx	lr

08004b7c <_ZNK9interface16XFTimeoutManager15getTickIntervalEv>:
     * @brief Returns tick interval in milliseconds.
     */
    virtual int32_t getTickInterval() const
    {
        return tickInterval_;
    }
 8004b7c:	6840      	ldr	r0, [r0, #4]
 8004b7e:	4770      	bx	lr

08004b80 <_ZN23XFTimeoutManagerDefault5startEv>:
XFTimeoutManagerDefault::~XFTimeoutManagerDefault()
{
}

void XFTimeoutManagerDefault::start()
{
 8004b80:	b508      	push	{r3, lr}
    // Check tickInterval. Set default value if not set
    if (tickInterval_ == 0)
 8004b82:	6843      	ldr	r3, [r0, #4]
 8004b84:	b90b      	cbnz	r3, 8004b8a <_ZN23XFTimeoutManagerDefault5startEv+0xa>
    {
        tickInterval_ = 10;
 8004b86:	230a      	movs	r3, #10
 8004b88:	6043      	str	r3, [r0, #4]
    }

    XF_startTimeoutManagerTimer(uint32_t(tickInterval_));
 8004b8a:	6840      	ldr	r0, [r0, #4]
 8004b8c:	f000 fc0b 	bl	80053a6 <XF_startTimeoutManagerTimer>
}
 8004b90:	bd08      	pop	{r3, pc}

08004b92 <_ZN23XFTimeoutManagerDefault15scheduleTimeoutEllPN9interface10XFReactiveE>:

void XFTimeoutManagerDefault::scheduleTimeout(int32_t timeoutId, int32_t interval, interface::XFReactive * pReactive)
{
 8004b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b96:	4605      	mov	r5, r0
 8004b98:	460e      	mov	r6, r1
 8004b9a:	4617      	mov	r7, r2
 8004b9c:	4698      	mov	r8, r3
    XFTimeout * pTimeout = new XFTimeout(timeoutId, interval, pReactive);
 8004b9e:	2018      	movs	r0, #24
 8004ba0:	f005 fac1 	bl	800a126 <_Znwj>
 8004ba4:	4604      	mov	r4, r0
 8004ba6:	4643      	mov	r3, r8
 8004ba8:	463a      	mov	r2, r7
 8004baa:	4631      	mov	r1, r6
 8004bac:	f7ff fe3c 	bl	8004828 <_ZN9XFTimeoutC1EiiPN9interface10XFReactiveE>

    if (pTimeout)
 8004bb0:	b124      	cbz	r4, 8004bbc <_ZN23XFTimeoutManagerDefault15scheduleTimeoutEllPN9interface10XFReactiveE+0x2a>
    {
        addTimeout(pTimeout);
 8004bb2:	682b      	ldr	r3, [r5, #0]
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	4621      	mov	r1, r4
 8004bb8:	4628      	mov	r0, r5
 8004bba:	4798      	blx	r3
    }
}
 8004bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004bc0 <_ZN23XFTimeoutManagerDefaultC1Ev>:
XFTimeoutManagerDefault::XFTimeoutManagerDefault() :
 8004bc0:	b510      	push	{r4, lr}
 8004bc2:	4604      	mov	r4, r0
     */
    virtual void tick() = 0;

protected:
    XFTimeoutManager() :
        tickInterval_(0)
 8004bc4:	4b0b      	ldr	r3, [pc, #44]	; (8004bf4 <_ZN23XFTimeoutManagerDefaultC1Ev+0x34>)
 8004bc6:	6003      	str	r3, [r0, #0]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	6042      	str	r2, [r0, #4]
    pMutex_(nullptr)
 8004bcc:	4603      	mov	r3, r0
 8004bce:	490a      	ldr	r1, [pc, #40]	; (8004bf8 <_ZN23XFTimeoutManagerDefaultC1Ev+0x38>)
 8004bd0:	f843 1b08 	str.w	r1, [r3], #8
#endif

      void
      _M_init() _GLIBCXX_NOEXCEPT
      {
	this->_M_next = this->_M_prev = this;
 8004bd4:	60c3      	str	r3, [r0, #12]
 8004bd6:	6083      	str	r3, [r0, #8]
#if _GLIBCXX_USE_CXX11_ABI
	this->_M_size = 0;
 8004bd8:	6102      	str	r2, [r0, #16]
 8004bda:	6142      	str	r2, [r0, #20]
    pMutex_ = XFMutex::create();
 8004bdc:	f000 fbda 	bl	8005394 <_ZN9interface7XFMutex6createEv>
 8004be0:	6160      	str	r0, [r4, #20]
    assert(pMutex_);
 8004be2:	b108      	cbz	r0, 8004be8 <_ZN23XFTimeoutManagerDefaultC1Ev+0x28>
}
 8004be4:	4620      	mov	r0, r4
 8004be6:	bd10      	pop	{r4, pc}
    assert(pMutex_);
 8004be8:	4b04      	ldr	r3, [pc, #16]	; (8004bfc <_ZN23XFTimeoutManagerDefaultC1Ev+0x3c>)
 8004bea:	4a05      	ldr	r2, [pc, #20]	; (8004c00 <_ZN23XFTimeoutManagerDefaultC1Ev+0x40>)
 8004bec:	211d      	movs	r1, #29
 8004bee:	4805      	ldr	r0, [pc, #20]	; (8004c04 <_ZN23XFTimeoutManagerDefaultC1Ev+0x44>)
 8004bf0:	f005 fae4 	bl	800a1bc <__assert_func>
 8004bf4:	0800c060 	.word	0x0800c060
 8004bf8:	0800b72c 	.word	0x0800b72c
 8004bfc:	0800bf6c 	.word	0x0800bf6c
 8004c00:	0800bf74 	.word	0x0800bf74
 8004c04:	0800bfa8 	.word	0x0800bfa8

08004c08 <_ZN23XFTimeoutManagerDefault11getInstanceEv>:
    static XFTimeoutManagerDefault timeoutManager;
 8004c08:	4b0d      	ldr	r3, [pc, #52]	; (8004c40 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x38>)
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	f3bf 8f5b 	dmb	ish
 8004c10:	f013 0f01 	tst.w	r3, #1
 8004c14:	d001      	beq.n	8004c1a <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x12>
}
 8004c16:	480b      	ldr	r0, [pc, #44]	; (8004c44 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x3c>)
 8004c18:	4770      	bx	lr
{
 8004c1a:	b510      	push	{r4, lr}
    static XFTimeoutManagerDefault timeoutManager;
 8004c1c:	4808      	ldr	r0, [pc, #32]	; (8004c40 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x38>)
 8004c1e:	f005 fa73 	bl	800a108 <__cxa_guard_acquire>
 8004c22:	b908      	cbnz	r0, 8004c28 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x20>
}
 8004c24:	4807      	ldr	r0, [pc, #28]	; (8004c44 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x3c>)
 8004c26:	bd10      	pop	{r4, pc}
    static XFTimeoutManagerDefault timeoutManager;
 8004c28:	4c05      	ldr	r4, [pc, #20]	; (8004c40 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x38>)
 8004c2a:	1d20      	adds	r0, r4, #4
 8004c2c:	f7ff ffc8 	bl	8004bc0 <_ZN23XFTimeoutManagerDefaultC1Ev>
 8004c30:	4805      	ldr	r0, [pc, #20]	; (8004c48 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x40>)
 8004c32:	f005 fae1 	bl	800a1f8 <atexit>
 8004c36:	4620      	mov	r0, r4
 8004c38:	f005 fa72 	bl	800a120 <__cxa_guard_release>
 8004c3c:	e7f2      	b.n	8004c24 <_ZN23XFTimeoutManagerDefault11getInstanceEv+0x1c>
 8004c3e:	bf00      	nop
 8004c40:	20001300 	.word	0x20001300
 8004c44:	20001304 	.word	0x20001304
 8004c48:	08004ee1 	.word	0x08004ee1

08004c4c <_ZN9interface16XFTimeoutManager11getInstanceEv>:
{
 8004c4c:	b508      	push	{r3, lr}
    return XFTimeoutManagerDefault::getInstance();
 8004c4e:	f7ff ffdb 	bl	8004c08 <_ZN23XFTimeoutManagerDefault11getInstanceEv>
}
 8004c52:	bd08      	pop	{r3, pc}

08004c54 <_ZN23XFTimeoutManagerDefault13returnTimeoutEP9XFTimeout>:
        timeouts_.push_front(pNewTimeout);
    }
}

void XFTimeoutManagerDefault::returnTimeout(XFTimeout * pTimeout)
{
 8004c54:	b508      	push	{r3, lr}
    inline interface::XFReactive * getBehavior() const { return pBehavior_; }
 8004c56:	68c8      	ldr	r0, [r1, #12]
    pTimeout->getBehavior()->pushEvent(pTimeout);
 8004c58:	6803      	ldr	r3, [r0, #0]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	4798      	blx	r3
}
 8004c60:	bd08      	pop	{r3, pc}

08004c62 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5eraseESt20_List_const_iteratorIS2_E>:
      }
#endif

  template<typename _Tp, typename _Alloc>
    typename list<_Tp, _Alloc>::iterator
    list<_Tp, _Alloc>::
 8004c62:	b538      	push	{r3, r4, r5, lr}
 8004c64:	460c      	mov	r4, r1
    erase(const_iterator __position) noexcept
#else
    erase(iterator __position)
#endif
    {
      iterator __ret = iterator(__position._M_node->_M_next);
 8004c66:	680d      	ldr	r5, [r1, #0]

      void _M_set_size(size_t __n) { _M_impl._M_node._M_size = __n; }

      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }

      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 8004c68:	6883      	ldr	r3, [r0, #8]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	6083      	str	r3, [r0, #8]
      // Erases element at position given.
      void
      _M_erase(iterator __position) _GLIBCXX_NOEXCEPT
      {
	this->_M_dec_size(1);
	__position._M_node->_M_unhook();
 8004c6e:	4608      	mov	r0, r1
 8004c70:	f005 fa74 	bl	800a15c <_ZNSt8__detail15_List_node_base9_M_unhookEv>
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 8004c74:	210c      	movs	r1, #12
 8004c76:	4620      	mov	r0, r4
 8004c78:	f005 fa44 	bl	800a104 <_ZdlPvj>
      _M_erase(__position._M_const_cast());
      return __ret;
    }
 8004c7c:	4628      	mov	r0, r5
 8004c7e:	bd38      	pop	{r3, r4, r5, pc}

08004c80 <_ZN23XFTimeoutManagerDefault4tickEv>:
{
 8004c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c82:	4604      	mov	r4, r0
    assert(tickInterval_);      // Did you call start()?!
 8004c84:	6845      	ldr	r5, [r0, #4]
 8004c86:	b955      	cbnz	r5, 8004c9e <_ZN23XFTimeoutManagerDefault4tickEv+0x1e>
 8004c88:	4b25      	ldr	r3, [pc, #148]	; (8004d20 <_ZN23XFTimeoutManagerDefault4tickEv+0xa0>)
 8004c8a:	4a26      	ldr	r2, [pc, #152]	; (8004d24 <_ZN23XFTimeoutManagerDefault4tickEv+0xa4>)
 8004c8c:	2161      	movs	r1, #97	; 0x61
 8004c8e:	4826      	ldr	r0, [pc, #152]	; (8004d28 <_ZN23XFTimeoutManagerDefault4tickEv+0xa8>)
 8004c90:	f005 fa94 	bl	800a1bc <__assert_func>
        pMutex_->unlock();
 8004c94:	6960      	ldr	r0, [r4, #20]
 8004c96:	6803      	ldr	r3, [r0, #0]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	4798      	blx	r3
            intervalToSubtract = 0;
 8004c9c:	2500      	movs	r5, #0
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 8004c9e:	4626      	mov	r6, r4
 8004ca0:	f856 3f08 	ldr.w	r3, [r6, #8]!
    while (!timeouts_.empty())
 8004ca4:	429e      	cmp	r6, r3
 8004ca6:	d03a      	beq.n	8004d1e <_ZN23XFTimeoutManagerDefault4tickEv+0x9e>
        pMutex_->lock();
 8004ca8:	6960      	ldr	r0, [r4, #20]
 8004caa:	6803      	ldr	r3, [r0, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	4798      	blx	r3
      { return iterator(this->_M_impl._M_node._M_next); }
 8004cb0:	68a3      	ldr	r3, [r4, #8]
            XFTimeout * pFirstTimeout = timeouts_.front();
 8004cb2:	6899      	ldr	r1, [r3, #8]

    bool deleteAfterConsume() const override;                                                       ///< Tells the dispatcher if the event must be deleted or not.

    inline void setRelTicks(int relTicks) { relTicks_ = relTicks; }                                 ///< Sets remaining ticks.
    inline int getRelTicks() const { return relTicks_; }                                            ///< Returns remaining ticks.
    inline void substractFromRelTicks(int ticksToSubstract) { relTicks_ -= ticksToSubstract; }      ///< Substracts `ticksToSubstract` from remaining ticks.
 8004cb4:	694b      	ldr	r3, [r1, #20]
 8004cb6:	1b5b      	subs	r3, r3, r5
 8004cb8:	614b      	str	r3, [r1, #20]
            if (pFirstTimeout->getRelTicks() <= 0)
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	dc2b      	bgt.n	8004d16 <_ZN23XFTimeoutManagerDefault4tickEv+0x96>
      size_t _M_get_size() const { return _M_impl._M_node._M_size; }
 8004cbe:	6922      	ldr	r2, [r4, #16]
                if (timeouts_.size() > 1)
 8004cc0:	2a01      	cmp	r2, #1
 8004cc2:	d908      	bls.n	8004cd6 <_ZN23XFTimeoutManagerDefault4tickEv+0x56>
      { return iterator(this->_M_impl._M_node._M_next); }
 8004cc4:	68a2      	ldr	r2, [r4, #8]
	_M_node = _M_node->_M_next;
 8004cc6:	6812      	ldr	r2, [r2, #0]
                    (*i)->substractFromRelTicks(abs(pFirstTimeout->getRelTicks()));
 8004cc8:	6890      	ldr	r0, [r2, #8]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	bfb8      	it	lt
 8004cce:	425b      	neglt	r3, r3
 8004cd0:	6942      	ldr	r2, [r0, #20]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	6143      	str	r3, [r0, #20]
                returnTimeout(pFirstTimeout);
 8004cd6:	4620      	mov	r0, r4
 8004cd8:	f7ff ffbc 	bl	8004c54 <_ZN23XFTimeoutManagerDefault13returnTimeoutEP9XFTimeout>
                timeouts_.pop_front();
 8004cdc:	f104 0708 	add.w	r7, r4, #8
      { return iterator(this->_M_impl._M_node._M_next); }
 8004ce0:	68a5      	ldr	r5, [r4, #8]
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	60bb      	str	r3, [r7, #8]
	__position._M_node->_M_unhook();
 8004ce8:	4628      	mov	r0, r5
 8004cea:	f005 fa37 	bl	800a15c <_ZNSt8__detail15_List_node_base9_M_unhookEv>
 8004cee:	210c      	movs	r1, #12
 8004cf0:	4628      	mov	r0, r5
 8004cf2:	f005 fa07 	bl	800a104 <_ZdlPvj>
                for (TimeoutList::iterator it = timeouts_.begin(); it != timeouts_.end(); /*Do not increment here!*/)
 8004cf6:	68a0      	ldr	r0, [r4, #8]
      { return __x._M_node != __y._M_node; }
 8004cf8:	4605      	mov	r5, r0
 8004cfa:	4286      	cmp	r6, r0
 8004cfc:	d0ca      	beq.n	8004c94 <_ZN23XFTimeoutManagerDefault4tickEv+0x14>
                    if ((*it)->getRelTicks() == 0)
 8004cfe:	6881      	ldr	r1, [r0, #8]
    inline int getRelTicks() const { return relTicks_; }                                            ///< Returns remaining ticks.
 8004d00:	694b      	ldr	r3, [r1, #20]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1c6      	bne.n	8004c94 <_ZN23XFTimeoutManagerDefault4tickEv+0x14>
                        returnTimeout(*it);			// Return them true
 8004d06:	4620      	mov	r0, r4
 8004d08:	f7ff ffa4 	bl	8004c54 <_ZN23XFTimeoutManagerDefault13returnTimeoutEP9XFTimeout>
                        it = timeouts_.erase(it);	// Remove timeout and adjust iterator to next element
 8004d0c:	4629      	mov	r1, r5
 8004d0e:	4638      	mov	r0, r7
 8004d10:	f7ff ffa7 	bl	8004c62 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5eraseESt20_List_const_iteratorIS2_E>
                for (TimeoutList::iterator it = timeouts_.begin(); it != timeouts_.end(); /*Do not increment here!*/)
 8004d14:	e7f0      	b.n	8004cf8 <_ZN23XFTimeoutManagerDefault4tickEv+0x78>
                pMutex_->unlock();
 8004d16:	6960      	ldr	r0, [r4, #20]
 8004d18:	6803      	ldr	r3, [r0, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	4798      	blx	r3
}
 8004d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d20:	0800c018 	.word	0x0800c018
 8004d24:	0800c028 	.word	0x0800c028
 8004d28:	0800bfa8 	.word	0x0800bfa8

08004d2c <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE>:
{
 8004d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d30:	b086      	sub	sp, #24
 8004d32:	4680      	mov	r8, r0
 8004d34:	4613      	mov	r3, r2
    const XFTimeout timeout(timeoutId, 0, pReactive);
 8004d36:	2200      	movs	r2, #0
 8004d38:	4668      	mov	r0, sp
 8004d3a:	f7ff fd75 	bl	8004828 <_ZN9XFTimeoutC1EiiPN9interface10XFReactiveE>
    pMutex_->lock();
 8004d3e:	f8d8 0014 	ldr.w	r0, [r8, #20]
 8004d42:	6803      	ldr	r3, [r0, #0]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	4798      	blx	r3
        for (TimeoutList::iterator i = timeouts_.begin();
 8004d48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004d4c:	e000      	b.n	8004d50 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x24>
	_M_node = _M_node->_M_next;
 8004d4e:	6824      	ldr	r4, [r4, #0]
      { return iterator(&this->_M_impl._M_node); }
 8004d50:	f108 0608 	add.w	r6, r8, #8
      { return __x._M_node != __y._M_node; }
 8004d54:	4627      	mov	r7, r4
             i != timeouts_.end(); /*Do not increment here!*/)
 8004d56:	42a6      	cmp	r6, r4
 8004d58:	d01b      	beq.n	8004d92 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x66>
            pTimeout = *i;
 8004d5a:	68a5      	ldr	r5, [r4, #8]
            if (*pTimeout == timeout)
 8004d5c:	4669      	mov	r1, sp
 8004d5e:	4628      	mov	r0, r5
 8004d60:	f7ff fd74 	bl	800484c <_ZNK9XFTimeouteqERKS_>
 8004d64:	2800      	cmp	r0, #0
 8004d66:	d0f2      	beq.n	8004d4e <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x22>
	_M_node = _M_node->_M_next;
 8004d68:	6823      	ldr	r3, [r4, #0]
                if (++next != timeouts_.end())
 8004d6a:	429e      	cmp	r6, r3
 8004d6c:	d004      	beq.n	8004d78 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x4c>
                    (*next)->addToRelTicks(pTimeout->getRelTicks());
 8004d6e:	689a      	ldr	r2, [r3, #8]
 8004d70:	6969      	ldr	r1, [r5, #20]
    inline void addToRelTicks(int ticksToAdd) { relTicks_ += ticksToAdd; }                          ///< Adds `ticksToAdd` to remaining ticks.
 8004d72:	6953      	ldr	r3, [r2, #20]
 8004d74:	440b      	add	r3, r1
 8004d76:	6153      	str	r3, [r2, #20]
                i = timeouts_.erase(i);
 8004d78:	4639      	mov	r1, r7
 8004d7a:	f108 0008 	add.w	r0, r8, #8
 8004d7e:	f7ff ff70 	bl	8004c62 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE5eraseESt20_List_const_iteratorIS2_E>
 8004d82:	4604      	mov	r4, r0
                delete pTimeout;
 8004d84:	2d00      	cmp	r5, #0
 8004d86:	d0e3      	beq.n	8004d50 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x24>
 8004d88:	682b      	ldr	r3, [r5, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	4628      	mov	r0, r5
 8004d8e:	4798      	blx	r3
 8004d90:	e7de      	b.n	8004d50 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x24>
    pMutex_->unlock();
 8004d92:	f8d8 0014 	ldr.w	r0, [r8, #20]
 8004d96:	6803      	ldr	r3, [r0, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	4798      	blx	r3
class XFTimeout : public XFEvent
 8004d9c:	4b03      	ldr	r3, [pc, #12]	; (8004dac <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x80>)
 8004d9e:	9300      	str	r3, [sp, #0]
    virtual ~XFEvent() {}		///< Class destructor
 8004da0:	4b03      	ldr	r3, [pc, #12]	; (8004db0 <_ZN23XFTimeoutManagerDefault17unscheduleTimeoutElPN9interface10XFReactiveE+0x84>)
 8004da2:	9300      	str	r3, [sp, #0]
}
 8004da4:	b006      	add	sp, #24
 8004da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004daa:	bf00      	nop
 8004dac:	0800b6c0 	.word	0x0800b6c0
 8004db0:	0800b798 	.word	0x0800b798

08004db4 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>:
    list<_Tp, _Alloc>::
 8004db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004db6:	b083      	sub	sp, #12
 8004db8:	4605      	mov	r5, r0
 8004dba:	460e      	mov	r6, r1
 8004dbc:	4617      	mov	r7, r2
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004dbe:	200c      	movs	r0, #12
 8004dc0:	f005 f9b1 	bl	800a126 <_Znwj>
 8004dc4:	4604      	mov	r4, r0
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8004dc6:	9500      	str	r5, [sp, #0]
 8004dc8:	9001      	str	r0, [sp, #4]
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	6083      	str	r3, [r0, #8]

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	9301      	str	r3, [sp, #4]
      __tmp->_M_hook(__position._M_const_cast()._M_node);
 8004dd2:	4631      	mov	r1, r6
 8004dd4:	f005 f9bb 	bl	800a14e <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 8004dd8:	68ab      	ldr	r3, [r5, #8]
 8004dda:	3301      	adds	r3, #1
 8004ddc:	60ab      	str	r3, [r5, #8]
    }
 8004dde:	4620      	mov	r0, r4
 8004de0:	b003      	add	sp, #12
 8004de2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004de4 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout>:
{
 8004de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004de6:	b085      	sub	sp, #20
 8004de8:	4606      	mov	r6, r0
 8004dea:	9101      	str	r1, [sp, #4]
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 8004dec:	4605      	mov	r5, r0
 8004dee:	f855 3f08 	ldr.w	r3, [r5, #8]!
    if (!timeouts_.empty())
 8004df2:	429d      	cmp	r5, r3
 8004df4:	d045      	beq.n	8004e82 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x9e>
        pMutex_->lock();
 8004df6:	6940      	ldr	r0, [r0, #20]
 8004df8:	6803      	ldr	r3, [r0, #0]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	4798      	blx	r3
            TimeoutList::iterator i = timeouts_.begin();
 8004dfe:	68b3      	ldr	r3, [r6, #8]
      { return __x._M_node != __y._M_node; }
 8004e00:	461c      	mov	r4, r3
            while (i != timeouts_.end() &&
 8004e02:	42ab      	cmp	r3, r5
 8004e04:	d009      	beq.n	8004e1a <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x36>
                   (*i)->getRelTicks() < pNewTimeout->getRelTicks())
 8004e06:	689b      	ldr	r3, [r3, #8]
    inline int getRelTicks() const { return relTicks_; }                                            ///< Returns remaining ticks.
 8004e08:	6959      	ldr	r1, [r3, #20]
 8004e0a:	9a01      	ldr	r2, [sp, #4]
 8004e0c:	6953      	ldr	r3, [r2, #20]
            while (i != timeouts_.end() &&
 8004e0e:	4299      	cmp	r1, r3
 8004e10:	da03      	bge.n	8004e1a <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x36>
    inline void substractFromRelTicks(int ticksToSubstract) { relTicks_ -= ticksToSubstract; }      ///< Substracts `ticksToSubstract` from remaining ticks.
 8004e12:	1a5b      	subs	r3, r3, r1
 8004e14:	6153      	str	r3, [r2, #20]
	_M_node = _M_node->_M_next;
 8004e16:	6823      	ldr	r3, [r4, #0]
 8004e18:	e7f2      	b.n	8004e00 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x1c>
            if (i != timeouts_.end())
 8004e1a:	42ac      	cmp	r4, r5
 8004e1c:	d02a      	beq.n	8004e74 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x90>
                if ((*i)->getRelTicks() != pNewTimeout->getRelTicks())
 8004e1e:	68a3      	ldr	r3, [r4, #8]
    inline int getRelTicks() const { return relTicks_; }                                            ///< Returns remaining ticks.
 8004e20:	695f      	ldr	r7, [r3, #20]
 8004e22:	9b01      	ldr	r3, [sp, #4]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	42bb      	cmp	r3, r7
 8004e28:	d108      	bne.n	8004e3c <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x58>
 8004e2a:	6823      	ldr	r3, [r4, #0]
      { return __x._M_node != __y._M_node; }
 8004e2c:	4619      	mov	r1, r3
                    while(i != timeouts_.end() && (*i)->getRelTicks() == 0)
 8004e2e:	429d      	cmp	r5, r3
 8004e30:	d011      	beq.n	8004e56 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x72>
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	b973      	cbnz	r3, 8004e56 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x72>
	_M_node = _M_node->_M_next;
 8004e38:	680b      	ldr	r3, [r1, #0]
	return __tmp;
 8004e3a:	e7f7      	b.n	8004e2c <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x48>
                    timeouts_.insert(i, pNewTimeout);
 8004e3c:	aa01      	add	r2, sp, #4
 8004e3e:	4621      	mov	r1, r4
 8004e40:	f106 0008 	add.w	r0, r6, #8
 8004e44:	f7ff ffb6 	bl	8004db4 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>
                    (*i)->substractFromRelTicks(pNewTimeout->getRelTicks());
 8004e48:	68a2      	ldr	r2, [r4, #8]
 8004e4a:	9b01      	ldr	r3, [sp, #4]
 8004e4c:	6959      	ldr	r1, [r3, #20]
    inline void substractFromRelTicks(int ticksToSubstract) { relTicks_ -= ticksToSubstract; }      ///< Substracts `ticksToSubstract` from remaining ticks.
 8004e4e:	6953      	ldr	r3, [r2, #20]
 8004e50:	1a5b      	subs	r3, r3, r1
 8004e52:	6153      	str	r3, [r2, #20]
 8004e54:	e008      	b.n	8004e68 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x84>
                    timeouts_.insert(i, pNewTimeout);
 8004e56:	aa01      	add	r2, sp, #4
 8004e58:	f106 0008 	add.w	r0, r6, #8
 8004e5c:	f7ff ffaa 	bl	8004db4 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>
                    pNewTimeout->substractFromRelTicks(relTicks);
 8004e60:	9a01      	ldr	r2, [sp, #4]
 8004e62:	6953      	ldr	r3, [r2, #20]
 8004e64:	1bdb      	subs	r3, r3, r7
 8004e66:	6153      	str	r3, [r2, #20]
        pMutex_->unlock();
 8004e68:	6970      	ldr	r0, [r6, #20]
 8004e6a:	6803      	ldr	r3, [r0, #0]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	4798      	blx	r3
}
 8004e70:	b005      	add	sp, #20
 8004e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
                timeouts_.insert(timeouts_.end(), pNewTimeout);
 8004e74:	aa01      	add	r2, sp, #4
 8004e76:	4629      	mov	r1, r5
 8004e78:	f106 0008 	add.w	r0, r6, #8
 8004e7c:	f7ff ff9a 	bl	8004db4 <_ZNSt7__cxx114listIP9XFTimeoutSaIS2_EE6insertESt20_List_const_iteratorIS2_ERKS2_>
 8004e80:	e7f2      	b.n	8004e68 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x84>
        timeouts_.push_front(pNewTimeout);
 8004e82:	f100 0408 	add.w	r4, r0, #8
      { return iterator(this->_M_impl._M_node._M_next); }
 8004e86:	6885      	ldr	r5, [r0, #8]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004e88:	200c      	movs	r0, #12
 8004e8a:	f005 f94c 	bl	800a126 <_Znwj>
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 8004e8e:	9402      	str	r4, [sp, #8]
 8004e90:	9003      	str	r0, [sp, #12]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004e92:	9b01      	ldr	r3, [sp, #4]
 8004e94:	6083      	str	r3, [r0, #8]
	_M_ptr = nullptr;
 8004e96:	2300      	movs	r3, #0
 8004e98:	9303      	str	r3, [sp, #12]
	 __tmp->_M_hook(__position._M_node);
 8004e9a:	4629      	mov	r1, r5
 8004e9c:	f005 f957 	bl	800a14e <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 8004ea0:	6933      	ldr	r3, [r6, #16]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	6133      	str	r3, [r6, #16]
}
 8004ea6:	e7e3      	b.n	8004e70 <_ZN23XFTimeoutManagerDefault10addTimeoutEP9XFTimeout+0x8c>

08004ea8 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv>:
    _List_base<_Tp, _Alloc>::
 8004ea8:	b538      	push	{r3, r4, r5, lr}
 8004eaa:	4605      	mov	r5, r0
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 8004eac:	6800      	ldr	r0, [r0, #0]
 8004eae:	e004      	b.n	8004eba <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv+0x12>
	  __cur = __tmp->_M_next;
 8004eb0:	6804      	ldr	r4, [r0, #0]
	::operator delete(__p
 8004eb2:	210c      	movs	r1, #12
 8004eb4:	f005 f926 	bl	800a104 <_ZdlPvj>
 8004eb8:	4620      	mov	r0, r4
      while (__cur != &_M_impl._M_node)
 8004eba:	4285      	cmp	r5, r0
 8004ebc:	d1f8      	bne.n	8004eb0 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv+0x8>
    }
 8004ebe:	bd38      	pop	{r3, r4, r5, pc}

08004ec0 <_ZN23XFTimeoutManagerDefaultD1Ev>:
XFTimeoutManagerDefault::~XFTimeoutManagerDefault()
 8004ec0:	b510      	push	{r4, lr}
 8004ec2:	4604      	mov	r4, r0
 8004ec4:	4b04      	ldr	r3, [pc, #16]	; (8004ed8 <_ZN23XFTimeoutManagerDefaultD1Ev+0x18>)
 8004ec6:	f840 3b08 	str.w	r3, [r0], #8
      { _M_clear(); }
 8004eca:	f7ff ffed 	bl	8004ea8 <_ZNSt7__cxx1110_List_baseIP9XFTimeoutSaIS2_EE8_M_clearEv>
    virtual ~XFTimeoutManager() = default;
 8004ece:	4b03      	ldr	r3, [pc, #12]	; (8004edc <_ZN23XFTimeoutManagerDefaultD1Ev+0x1c>)
 8004ed0:	6023      	str	r3, [r4, #0]
}
 8004ed2:	4620      	mov	r0, r4
 8004ed4:	bd10      	pop	{r4, pc}
 8004ed6:	bf00      	nop
 8004ed8:	0800b72c 	.word	0x0800b72c
 8004edc:	0800c060 	.word	0x0800c060

08004ee0 <__tcf_0>:
    static XFTimeoutManagerDefault timeoutManager;
 8004ee0:	b508      	push	{r3, lr}
 8004ee2:	4802      	ldr	r0, [pc, #8]	; (8004eec <__tcf_0+0xc>)
 8004ee4:	f7ff ffec 	bl	8004ec0 <_ZN23XFTimeoutManagerDefaultD1Ev>
 8004ee8:	bd08      	pop	{r3, pc}
 8004eea:	bf00      	nop
 8004eec:	20001304 	.word	0x20001304

08004ef0 <_ZN23XFTimeoutManagerDefaultD0Ev>:
XFTimeoutManagerDefault::~XFTimeoutManagerDefault()
 8004ef0:	b510      	push	{r4, lr}
 8004ef2:	4604      	mov	r4, r0
}
 8004ef4:	f7ff ffe4 	bl	8004ec0 <_ZN23XFTimeoutManagerDefaultD1Ev>
 8004ef8:	2118      	movs	r1, #24
 8004efa:	4620      	mov	r0, r4
 8004efc:	f005 f902 	bl	800a104 <_ZdlPvj>
 8004f00:	4620      	mov	r0, r4
 8004f02:	bd10      	pop	{r4, pc}

08004f04 <_ZN2XF10initializeEiiPPc>:
    XF::execOnce();
}

void XF::initialize(int timeInterval /* = 10 */, int argc /* = 0 */, char * argv[] /* = nullptr */)
{
    if (!isInitialized_)
 8004f04:	4b07      	ldr	r3, [pc, #28]	; (8004f24 <_ZN2XF10initializeEiiPPc+0x20>)
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	b103      	cbz	r3, 8004f0c <_ZN2XF10initializeEiiPPc+0x8>
 8004f0a:	4770      	bx	lr
{
 8004f0c:	b510      	push	{r4, lr}
 8004f0e:	4604      	mov	r4, r0
    {
        // Create and initialize TimeoutManager
        XFTimeoutManager::getInstance()->initialize(timeInterval);
 8004f10:	f7ff fe9c 	bl	8004c4c <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8004f14:	6803      	ldr	r3, [r0, #0]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	4621      	mov	r1, r4
 8004f1a:	4798      	blx	r3

        isInitialized_ = true;
 8004f1c:	4b01      	ldr	r3, [pc, #4]	; (8004f24 <_ZN2XF10initializeEiiPPc+0x20>)
 8004f1e:	2201      	movs	r2, #1
 8004f20:	701a      	strb	r2, [r3, #0]
    }
}
 8004f22:	bd10      	pop	{r4, pc}
 8004f24:	2000131c 	.word	0x2000131c

08004f28 <XF_initialize>:
{
 8004f28:	b508      	push	{r3, lr}
    XF::initialize(timeInterval);
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	4611      	mov	r1, r2
 8004f2e:	f7ff ffe9 	bl	8004f04 <_ZN2XF10initializeEiiPPc>
}
 8004f32:	bd08      	pop	{r3, pc}

08004f34 <_ZN2XF4execEv>:

int XF::exec()
{
 8004f34:	b508      	push	{r3, lr}
	// Start timeout manager
	XFTimeoutManager::getInstance()->start();
 8004f36:	f7ff fe89 	bl	8004c4c <_ZN9interface16XFTimeoutManager11getInstanceEv>
 8004f3a:	6803      	ldr	r3, [r0, #0]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	4798      	blx	r3

	// Start default dispatcher
	XFResourceFactory::getInstance()->getDefaultDispatcher()->start();
 8004f40:	f7ff fe06 	bl	8004b50 <_ZN9interface17XFResourceFactory11getInstanceEv>
 8004f44:	6803      	ldr	r3, [r0, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4798      	blx	r3
 8004f4a:	6803      	ldr	r3, [r0, #0]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	4798      	blx	r3

	isRunning_ = true;     // From here the XF is running
 8004f50:	4b0b      	ldr	r3, [pc, #44]	; (8004f80 <_ZN2XF4execEv+0x4c>)
 8004f52:	2201      	movs	r2, #1
 8004f54:	705a      	strb	r2, [r3, #1]

	// In case default dispatcher does not have a thread executing it,
	// call it with this thread
	if (!XFResourceFactory::getInstance()->getDefaultDispatcher()->isActive())
 8004f56:	f7ff fdfb 	bl	8004b50 <_ZN9interface17XFResourceFactory11getInstanceEv>
 8004f5a:	6803      	ldr	r3, [r0, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4798      	blx	r3
 8004f60:	6803      	ldr	r3, [r0, #0]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	4798      	blx	r3
 8004f66:	b108      	cbz	r0, 8004f6c <_ZN2XF4execEv+0x38>
	{
		XFResourceFactory::getInstance()->getDefaultDispatcher()->execute();
	}
    return 0;
}
 8004f68:	2000      	movs	r0, #0
 8004f6a:	bd08      	pop	{r3, pc}
		XFResourceFactory::getInstance()->getDefaultDispatcher()->execute();
 8004f6c:	f7ff fdf0 	bl	8004b50 <_ZN9interface17XFResourceFactory11getInstanceEv>
 8004f70:	6803      	ldr	r3, [r0, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4798      	blx	r3
 8004f76:	6803      	ldr	r3, [r0, #0]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	4798      	blx	r3
 8004f7e:	e7f3      	b.n	8004f68 <_ZN2XF4execEv+0x34>
 8004f80:	2000131c 	.word	0x2000131c

08004f84 <XF_exec>:
{
 8004f84:	b508      	push	{r3, lr}
    XF::exec();
 8004f86:	f7ff ffd5 	bl	8004f34 <_ZN2XF4execEv>
}
 8004f8a:	bd08      	pop	{r3, pc}

08004f8c <_ZN2XF9isRunningEv>:
}

bool XF::isRunning()
{
    return isRunning_;
}
 8004f8c:	4b01      	ldr	r3, [pc, #4]	; (8004f94 <_ZN2XF9isRunningEv+0x8>)
 8004f8e:	7858      	ldrb	r0, [r3, #1]
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	2000131c 	.word	0x2000131c

08004f98 <_ZNK19XFEventQueueDefault5emptyEv>:
	_M_last = _M_first + difference_type(_S_buffer_size());
      }

      friend bool
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      { return __x._M_cur == __y._M_cur; }
 8004f98:	6a03      	ldr	r3, [r0, #32]
 8004f9a:	6900      	ldr	r0, [r0, #16]
}

bool XFEventQueueDefault::empty() const
{
    return _queue.empty();
}
 8004f9c:	4298      	cmp	r0, r3
 8004f9e:	bf14      	ite	ne
 8004fa0:	2000      	movne	r0, #0
 8004fa2:	2001      	moveq	r0, #1
 8004fa4:	4770      	bx	lr

08004fa6 <_ZN19XFEventQueueDefault4pendEv>:
bool XFEventQueueDefault::pend()
{
    // Method cannot be used in an IDF! Waiting within
    // this method would block the whole XF
    return false;
}
 8004fa6:	2000      	movs	r0, #0
 8004fa8:	4770      	bx	lr

08004faa <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_>:
	}
    }

  template<typename _Tp, typename _Alloc>
    void
    _Deque_base<_Tp, _Alloc>::
 8004faa:	b538      	push	{r3, r4, r5, lr}
 8004fac:	460c      	mov	r4, r1
 8004fae:	4615      	mov	r5, r2
 8004fb0:	e005      	b.n	8004fbe <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_+0x14>
 8004fb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004fb6:	f854 0b04 	ldr.w	r0, [r4], #4
 8004fba:	f005 f8a3 	bl	800a104 <_ZdlPvj>
    _M_destroy_nodes(_Map_pointer __nstart,
		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
    {
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8004fbe:	42ac      	cmp	r4, r5
 8004fc0:	d3f7      	bcc.n	8004fb2 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_+0x8>
	_M_deallocate_node(*__n);
    }
 8004fc2:	bd38      	pop	{r3, r4, r5, pc}

08004fc4 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8004fc4:	b510      	push	{r4, lr}
 8004fc6:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
 8004fc8:	6803      	ldr	r3, [r0, #0]
 8004fca:	b14b      	cbz	r3, 8004fe0 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EED1Ev+0x1c>
			   this->_M_impl._M_finish._M_node + 1);
 8004fcc:	6a42      	ldr	r2, [r0, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8004fce:	3204      	adds	r2, #4
 8004fd0:	6941      	ldr	r1, [r0, #20]
 8004fd2:	f7ff ffea 	bl	8004faa <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE16_M_destroy_nodesEPPS2_S6_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8004fd6:	6861      	ldr	r1, [r4, #4]
 8004fd8:	0089      	lsls	r1, r1, #2
 8004fda:	6820      	ldr	r0, [r4, #0]
 8004fdc:	f005 f892 	bl	800a104 <_ZdlPvj>
    }
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	bd10      	pop	{r4, pc}

08004fe4 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8004fe4:	b510      	push	{r4, lr}
 8004fe6:	4604      	mov	r4, r0
 8004fe8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004fec:	68c0      	ldr	r0, [r0, #12]
 8004fee:	f005 f889 	bl	800a104 <_ZdlPvj>
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8004ff2:	6963      	ldr	r3, [r4, #20]
 8004ff4:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
 8004ff6:	6162      	str	r2, [r4, #20]
	_M_first = *__new_node;
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8004ffc:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8005000:	6122      	str	r2, [r4, #16]
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8005002:	60a3      	str	r3, [r4, #8]
    }
 8005004:	bd10      	pop	{r4, pc}

08005006 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_>:
    _Deque_base<_Tp, _Alloc>::
 8005006:	b538      	push	{r3, r4, r5, lr}
 8005008:	460c      	mov	r4, r1
 800500a:	4615      	mov	r5, r2
 800500c:	e005      	b.n	800501a <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_+0x14>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800500e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005012:	f005 f888 	bl	800a126 <_Znwj>
	    *__cur = this->_M_allocate_node();
 8005016:	f844 0b04 	str.w	r0, [r4], #4
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 800501a:	42ac      	cmp	r4, r5
 800501c:	d3f7      	bcc.n	800500e <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_+0x8>
    }
 800501e:	bd38      	pop	{r3, r4, r5, pc}

08005020 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8005020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005024:	b083      	sub	sp, #12
 8005026:	4604      	mov	r4, r0
 8005028:	460d      	mov	r5, r1
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 800502a:	09cb      	lsrs	r3, r1, #7
 800502c:	1c5e      	adds	r6, r3, #1
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 800502e:	2208      	movs	r2, #8
 8005030:	9200      	str	r2, [sp, #0]
					   size_t(__num_nodes + 2));
 8005032:	3303      	adds	r3, #3
 8005034:	9301      	str	r3, [sp, #4]
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8005036:	4293      	cmp	r3, r2
 8005038:	d82f      	bhi.n	800509a <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_initialize_mapEj+0x7a>
	return __b;
      return __a;
 800503a:	466b      	mov	r3, sp
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 800503c:	6818      	ldr	r0, [r3, #0]
 800503e:	6060      	str	r0, [r4, #4]
	if (__n > this->_M_max_size())
 8005040:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 8005044:	d22b      	bcs.n	800509e <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_initialize_mapEj+0x7e>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005046:	0080      	lsls	r0, r0, #2
 8005048:	f005 f86d 	bl	800a126 <_Znwj>
 800504c:	4680      	mov	r8, r0
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 800504e:	6020      	str	r0, [r4, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8005050:	6867      	ldr	r7, [r4, #4]
 8005052:	1bbf      	subs	r7, r7, r6
 8005054:	087f      	lsrs	r7, r7, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
 8005056:	eb00 0987 	add.w	r9, r0, r7, lsl #2
      _Map_pointer __nfinish = __nstart + __num_nodes;
 800505a:	eb09 0686 	add.w	r6, r9, r6, lsl #2
	{ _M_create_nodes(__nstart, __nfinish); }
 800505e:	4632      	mov	r2, r6
 8005060:	4649      	mov	r1, r9
 8005062:	4620      	mov	r0, r4
 8005064:	f7ff ffcf 	bl	8005006 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE15_M_create_nodesEPPS2_S6_>
	_M_node = __new_node;
 8005068:	f8c4 9014 	str.w	r9, [r4, #20]
	_M_first = *__new_node;
 800506c:	f858 2027 	ldr.w	r2, [r8, r7, lsl #2]
 8005070:	60e2      	str	r2, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8005072:	f502 7300 	add.w	r3, r2, #512	; 0x200
 8005076:	6123      	str	r3, [r4, #16]
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8005078:	1f33      	subs	r3, r6, #4
	_M_node = __new_node;
 800507a:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
 800507c:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8005080:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8005082:	f503 7100 	add.w	r1, r3, #512	; 0x200
 8005086:	6221      	str	r1, [r4, #32]
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8005088:	60a2      	str	r2, [r4, #8]
					% __deque_buf_size(sizeof(_Tp)));
 800508a:	f005 057f 	and.w	r5, r5, #127	; 0x7f
					+ __num_elements
 800508e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8005092:	61a3      	str	r3, [r4, #24]
    }
 8005094:	b003      	add	sp, #12
 8005096:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return __b;
 800509a:	ab01      	add	r3, sp, #4
 800509c:	e7ce      	b.n	800503c <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_initialize_mapEj+0x1c>
	  std::__throw_bad_alloc();
 800509e:	f005 f862 	bl	800a166 <_ZSt17__throw_bad_allocv>
	...

080050a4 <_ZN19XFEventQueueDefaultC1Ev>:
XFEventQueueDefault::XFEventQueueDefault()
 80050a4:	b538      	push	{r3, r4, r5, lr}
 80050a6:	4605      	mov	r5, r0
    virtual const XFEvent * front() = 0;			///< Returns pointer to next event to pop.
    virtual void pop() = 0;							///< Pops the next event from the queue.
    virtual bool pend() = 0;						///< Wait for the next event to arrive. Returns true if an event is in the queue.

public:
    XFEventQueue() = default;
 80050a8:	4b0e      	ldr	r3, [pc, #56]	; (80050e4 <_ZN19XFEventQueueDefaultC1Ev+0x40>)
 80050aa:	6003      	str	r3, [r0, #0]
 80050ac:	4b0e      	ldr	r3, [pc, #56]	; (80050e8 <_ZN19XFEventQueueDefaultC1Ev+0x44>)
 80050ae:	f840 3b04 	str.w	r3, [r0], #4
 80050b2:	f000 f965 	bl	8005380 <_ZN14XFMutexDefaultC1Ev>
 80050b6:	f105 0408 	add.w	r4, r5, #8
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	queue()
	: c() { }
 80050ba:	2228      	movs	r2, #40	; 0x28
 80050bc:	2100      	movs	r1, #0
 80050be:	4620      	mov	r0, r4
 80050c0:	f005 f900 	bl	800a2c4 <memset>
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 80050c4:	2100      	movs	r1, #0
 80050c6:	60a9      	str	r1, [r5, #8]
 80050c8:	60e9      	str	r1, [r5, #12]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 80050ca:	6129      	str	r1, [r5, #16]
 80050cc:	6169      	str	r1, [r5, #20]
 80050ce:	61a9      	str	r1, [r5, #24]
 80050d0:	61e9      	str	r1, [r5, #28]
 80050d2:	6229      	str	r1, [r5, #32]
 80050d4:	6269      	str	r1, [r5, #36]	; 0x24
 80050d6:	62a9      	str	r1, [r5, #40]	; 0x28
 80050d8:	62e9      	str	r1, [r5, #44]	; 0x2c
      { _M_initialize_map(0); }
 80050da:	4620      	mov	r0, r4
 80050dc:	f7ff ffa0 	bl	8005020 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EE17_M_initialize_mapEj>
}
 80050e0:	4628      	mov	r0, r5
 80050e2:	bd38      	pop	{r3, r4, r5, pc}
 80050e4:	0800c0bc 	.word	0x0800c0bc
 80050e8:	0800b758 	.word	0x0800b758

080050ec <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 80050ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050f0:	b082      	sub	sp, #8
 80050f2:	4606      	mov	r6, r0
 80050f4:	9101      	str	r1, [sp, #4]
 80050f6:	4690      	mov	r8, r2
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 80050f8:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80050fa:	6940      	ldr	r0, [r0, #20]
 80050fc:	1a17      	subs	r7, r2, r0
 80050fe:	10bd      	asrs	r5, r7, #2
 8005100:	3501      	adds	r5, #1
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8005102:	440d      	add	r5, r1

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8005104:	6873      	ldr	r3, [r6, #4]
 8005106:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
 800510a:	d922      	bls.n	8005152 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x66>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800510c:	f8d6 c000 	ldr.w	ip, [r6]
					 - __new_num_nodes) / 2
 8005110:	1b5c      	subs	r4, r3, r5
 8005112:	0864      	lsrs	r4, r4, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8005114:	00a4      	lsls	r4, r4, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8005116:	f1b8 0f00 	cmp.w	r8, #0
 800511a:	d001      	beq.n	8005120 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x34>
 800511c:	0089      	lsls	r1, r1, #2
 800511e:	e000      	b.n	8005122 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x36>
 8005120:	2100      	movs	r1, #0
 8005122:	440c      	add	r4, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8005124:	4464      	add	r4, ip
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8005126:	42a0      	cmp	r0, r4
 8005128:	d908      	bls.n	800513c <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x50>
	    std::copy(this->_M_impl._M_start._M_node,
 800512a:	1d13      	adds	r3, r2, #4
					   is_move_assignable<_Tp>,
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
 800512c:	1a1a      	subs	r2, r3, r0
	  if (_Num)
 800512e:	4298      	cmp	r0, r3
 8005130:	d03b      	beq.n	80051aa <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xbe>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8005132:	4601      	mov	r1, r0
 8005134:	4620      	mov	r0, r4
 8005136:	f005 f8ab 	bl	800a290 <memmove>
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800513a:	e036      	b.n	80051aa <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xbe>
		      this->_M_impl._M_finish._M_node + 1,
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800513c:	1d13      	adds	r3, r2, #4
 800513e:	1d3a      	adds	r2, r7, #4
 8005140:	18a5      	adds	r5, r4, r2
					   is_move_assignable<_Tp>,
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
 8005142:	1a1a      	subs	r2, r3, r0
	  if (_Num)
 8005144:	4298      	cmp	r0, r3
 8005146:	d030      	beq.n	80051aa <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xbe>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8005148:	4601      	mov	r1, r0
 800514a:	1aa8      	subs	r0, r5, r2
 800514c:	f005 f8a0 	bl	800a290 <memmove>
	  return __result - _Num;
 8005150:	e02b      	b.n	80051aa <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xbe>
			       __new_nstart + __old_num_nodes);
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
				     + std::max(this->_M_impl._M_map_size,
 8005152:	1d32      	adds	r2, r6, #4
      if (__a < __b)
 8005154:	4299      	cmp	r1, r3
 8005156:	d838      	bhi.n	80051ca <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xde>
 8005158:	6812      	ldr	r2, [r2, #0]
 800515a:	4413      	add	r3, r2
	  size_type __new_map_size = this->_M_impl._M_map_size
 800515c:	f103 0902 	add.w	r9, r3, #2
	if (__n > this->_M_max_size())
 8005160:	f1b9 5f00 	cmp.w	r9, #536870912	; 0x20000000
 8005164:	d233      	bcs.n	80051ce <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xe2>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005166:	ea4f 0089 	mov.w	r0, r9, lsl #2
 800516a:	f004 ffdc 	bl	800a126 <_Znwj>
 800516e:	4682      	mov	sl, r0
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8005170:	eba9 0405 	sub.w	r4, r9, r5
 8005174:	0864      	lsrs	r4, r4, #1
 8005176:	00a4      	lsls	r4, r4, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8005178:	f1b8 0f00 	cmp.w	r8, #0
 800517c:	d029      	beq.n	80051d2 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xe6>
 800517e:	9d01      	ldr	r5, [sp, #4]
 8005180:	00ad      	lsls	r5, r5, #2
 8005182:	442c      	add	r4, r5
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8005184:	4454      	add	r4, sl
	  std::copy(this->_M_impl._M_start._M_node,
 8005186:	6971      	ldr	r1, [r6, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8005188:	6a73      	ldr	r3, [r6, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 800518a:	3304      	adds	r3, #4
	  const ptrdiff_t _Num = __last - __first;
 800518c:	1a5a      	subs	r2, r3, r1
	  if (_Num)
 800518e:	4299      	cmp	r1, r3
 8005190:	d002      	beq.n	8005198 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0xac>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8005192:	4620      	mov	r0, r4
 8005194:	f005 f87c 	bl	800a290 <memmove>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8005198:	6871      	ldr	r1, [r6, #4]
	::operator delete(__p
 800519a:	0089      	lsls	r1, r1, #2
 800519c:	6830      	ldr	r0, [r6, #0]
 800519e:	f004 ffb1 	bl	800a104 <_ZdlPvj>

	  this->_M_impl._M_map = __new_map;
 80051a2:	f8c6 a000 	str.w	sl, [r6]
	  this->_M_impl._M_map_size = __new_map_size;
 80051a6:	f8c6 9004 	str.w	r9, [r6, #4]
	_M_node = __new_node;
 80051aa:	6174      	str	r4, [r6, #20]
	_M_first = *__new_node;
 80051ac:	6823      	ldr	r3, [r4, #0]
 80051ae:	60f3      	str	r3, [r6, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80051b0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80051b4:	6133      	str	r3, [r6, #16]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 80051b6:	19e3      	adds	r3, r4, r7
	_M_node = __new_node;
 80051b8:	6273      	str	r3, [r6, #36]	; 0x24
	_M_first = *__new_node;
 80051ba:	59e3      	ldr	r3, [r4, r7]
 80051bc:	61f3      	str	r3, [r6, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80051be:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80051c2:	6233      	str	r3, [r6, #32]
    }
 80051c4:	b002      	add	sp, #8
 80051c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return __b;
 80051ca:	aa01      	add	r2, sp, #4
 80051cc:	e7c4      	b.n	8005158 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x6c>
	  std::__throw_bad_alloc();
 80051ce:	f004 ffca 	bl	800a166 <_ZSt17__throw_bad_allocv>
			 + (__add_at_front ? __nodes_to_add : 0);
 80051d2:	2500      	movs	r5, #0
 80051d4:	e7d5      	b.n	8005182 <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb+0x96>
	...

080051d8 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_>:
      deque<_Tp, _Alloc>::
 80051d8:	b570      	push	{r4, r5, r6, lr}
 80051da:	4604      	mov	r4, r0
 80051dc:	460d      	mov	r5, r1
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 80051de:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80051e0:	6942      	ldr	r2, [r0, #20]
 80051e2:	1a9b      	subs	r3, r3, r2
 80051e4:	109b      	asrs	r3, r3, #2
 80051e6:	1e5a      	subs	r2, r3, #1
 80051e8:	6983      	ldr	r3, [r0, #24]
 80051ea:	69c0      	ldr	r0, [r0, #28]
 80051ec:	1a1b      	subs	r3, r3, r0
 80051ee:	109b      	asrs	r3, r3, #2
 80051f0:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
 80051f4:	6922      	ldr	r2, [r4, #16]
 80051f6:	68a1      	ldr	r1, [r4, #8]
 80051f8:	1a52      	subs	r2, r2, r1
 80051fa:	eb03 03a2 	add.w	r3, r3, r2, asr #2
	if (size() == max_size())
 80051fe:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8005202:	4293      	cmp	r3, r2
 8005204:	d01a      	beq.n	800523c <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_+0x64>
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8005206:	6863      	ldr	r3, [r4, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8005208:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800520a:	6821      	ldr	r1, [r4, #0]
 800520c:	1a52      	subs	r2, r2, r1
 800520e:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8005212:	2b01      	cmp	r3, #1
 8005214:	d915      	bls.n	8005242 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_+0x6a>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8005216:	6a66      	ldr	r6, [r4, #36]	; 0x24
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005218:	f44f 7000 	mov.w	r0, #512	; 0x200
 800521c:	f004 ff83 	bl	800a126 <_Znwj>
 8005220:	6070      	str	r0, [r6, #4]
	    _Alloc_traits::construct(this->_M_impl,
 8005222:	69a3      	ldr	r3, [r4, #24]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8005224:	682a      	ldr	r2, [r5, #0]
 8005226:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8005228:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800522a:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
 800522c:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8005232:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8005236:	6222      	str	r2, [r4, #32]
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8005238:	61a3      	str	r3, [r4, #24]
      }
 800523a:	bd70      	pop	{r4, r5, r6, pc}
	  __throw_length_error(
 800523c:	4804      	ldr	r0, [pc, #16]	; (8005250 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_+0x78>)
 800523e:	f004 ff95 	bl	800a16c <_ZSt20__throw_length_errorPKc>
	  _M_reallocate_map(__nodes_to_add, false);
 8005242:	2200      	movs	r2, #0
 8005244:	2101      	movs	r1, #1
 8005246:	4620      	mov	r0, r4
 8005248:	f7ff ff50 	bl	80050ec <_ZNSt5dequeIPK7XFEventSaIS2_EE17_M_reallocate_mapEjb>
 800524c:	e7e3      	b.n	8005216 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_+0x3e>
 800524e:	bf00      	nop
 8005250:	0800c084 	.word	0x0800c084

08005254 <_ZN19XFEventQueueDefaultD1Ev>:
XFEventQueueDefault::~XFEventQueueDefault()
 8005254:	b510      	push	{r4, lr}
 8005256:	b088      	sub	sp, #32
 8005258:	4604      	mov	r4, r0
 800525a:	4b0e      	ldr	r3, [pc, #56]	; (8005294 <_ZN19XFEventQueueDefaultD1Ev+0x40>)
 800525c:	f840 3b08 	str.w	r3, [r0], #8
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8005260:	6883      	ldr	r3, [r0, #8]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8005262:	9304      	str	r3, [sp, #16]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8005264:	68c3      	ldr	r3, [r0, #12]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8005266:	9305      	str	r3, [sp, #20]
 8005268:	6903      	ldr	r3, [r0, #16]
 800526a:	9306      	str	r3, [sp, #24]
 800526c:	6943      	ldr	r3, [r0, #20]
 800526e:	9307      	str	r3, [sp, #28]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8005270:	6983      	ldr	r3, [r0, #24]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8005272:	9300      	str	r3, [sp, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8005274:	69c3      	ldr	r3, [r0, #28]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8005276:	9301      	str	r3, [sp, #4]
 8005278:	6a03      	ldr	r3, [r0, #32]
 800527a:	9302      	str	r3, [sp, #8]
 800527c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800527e:	9303      	str	r3, [sp, #12]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8005280:	f7ff fea0 	bl	8004fc4 <_ZNSt11_Deque_baseIPK7XFEventSaIS2_EED1Ev>
 8005284:	1d20      	adds	r0, r4, #4
 8005286:	f000 f85d 	bl	8005344 <_ZN14XFMutexDefaultD1Ev>
    virtual ~XFEventQueue() = default;
 800528a:	4b03      	ldr	r3, [pc, #12]	; (8005298 <_ZN19XFEventQueueDefaultD1Ev+0x44>)
 800528c:	6023      	str	r3, [r4, #0]
}
 800528e:	4620      	mov	r0, r4
 8005290:	b008      	add	sp, #32
 8005292:	bd10      	pop	{r4, pc}
 8005294:	0800b758 	.word	0x0800b758
 8005298:	0800c0bc 	.word	0x0800c0bc

0800529c <_ZN19XFEventQueueDefaultD0Ev>:
XFEventQueueDefault::~XFEventQueueDefault()
 800529c:	b510      	push	{r4, lr}
 800529e:	4604      	mov	r4, r0
}
 80052a0:	f7ff ffd8 	bl	8005254 <_ZN19XFEventQueueDefaultD1Ev>
 80052a4:	2130      	movs	r1, #48	; 0x30
 80052a6:	4620      	mov	r0, r4
 80052a8:	f004 ff2c 	bl	800a104 <_ZdlPvj>
 80052ac:	4620      	mov	r0, r4
 80052ae:	bd10      	pop	{r4, pc}

080052b0 <_ZN19XFEventQueueDefault4pushEPK7XFEventb>:
{
 80052b0:	b530      	push	{r4, r5, lr}
 80052b2:	b083      	sub	sp, #12
 80052b4:	4604      	mov	r4, r0
 80052b6:	9101      	str	r1, [sp, #4]
    _mutex.lock();
 80052b8:	1d05      	adds	r5, r0, #4
 80052ba:	4628      	mov	r0, r5
 80052bc:	f000 f858 	bl	8005370 <_ZN14XFMutexDefault4lockEv>
       *  to it.  The time complexity of the operation depends on the
       *  underlying sequence.
       */
      void
      push(const value_type& __x)
      { c.push_back(__x); }
 80052c0:	f104 0008 	add.w	r0, r4, #8
	if (this->_M_impl._M_finish._M_cur
 80052c4:	6982      	ldr	r2, [r0, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 80052c6:	6a03      	ldr	r3, [r0, #32]
 80052c8:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d00a      	beq.n	80052e4 <_ZN19XFEventQueueDefault4pushEPK7XFEventb+0x34>
 80052ce:	9b01      	ldr	r3, [sp, #4]
 80052d0:	6013      	str	r3, [r2, #0]
	    ++this->_M_impl._M_finish._M_cur;
 80052d2:	6983      	ldr	r3, [r0, #24]
 80052d4:	3304      	adds	r3, #4
 80052d6:	6183      	str	r3, [r0, #24]
    _mutex.unlock();
 80052d8:	4628      	mov	r0, r5
 80052da:	f000 f84d 	bl	8005378 <_ZN14XFMutexDefault6unlockEv>
}
 80052de:	2001      	movs	r0, #1
 80052e0:	b003      	add	sp, #12
 80052e2:	bd30      	pop	{r4, r5, pc}
	  _M_push_back_aux(__x);
 80052e4:	a901      	add	r1, sp, #4
 80052e6:	f7ff ff77 	bl	80051d8 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_push_back_auxIJRKS2_EEEvDpOT_>
 80052ea:	e7f5      	b.n	80052d8 <_ZN19XFEventQueueDefault4pushEPK7XFEventb+0x28>

080052ec <_ZN19XFEventQueueDefault5frontEv>:
{
 80052ec:	b530      	push	{r4, r5, lr}
 80052ee:	b085      	sub	sp, #20
 80052f0:	4604      	mov	r4, r0
    _mutex.lock();
 80052f2:	1d05      	adds	r5, r0, #4
 80052f4:	4628      	mov	r0, r5
 80052f6:	f000 f83b 	bl	8005370 <_ZN14XFMutexDefault4lockEv>
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80052fa:	6923      	ldr	r3, [r4, #16]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80052fc:	9300      	str	r3, [sp, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80052fe:	6962      	ldr	r2, [r4, #20]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8005300:	9201      	str	r2, [sp, #4]
 8005302:	69a2      	ldr	r2, [r4, #24]
 8005304:	9202      	str	r2, [sp, #8]
 8005306:	69e2      	ldr	r2, [r4, #28]
 8005308:	9203      	str	r2, [sp, #12]
        event =  _queue.front();
 800530a:	681c      	ldr	r4, [r3, #0]
    _mutex.unlock();
 800530c:	4628      	mov	r0, r5
 800530e:	f000 f833 	bl	8005378 <_ZN14XFMutexDefault6unlockEv>
}
 8005312:	4620      	mov	r0, r4
 8005314:	b005      	add	sp, #20
 8005316:	bd30      	pop	{r4, r5, pc}

08005318 <_ZN19XFEventQueueDefault3popEv>:
{
 8005318:	b538      	push	{r3, r4, r5, lr}
 800531a:	4604      	mov	r4, r0
    _mutex.lock();
 800531c:	1d05      	adds	r5, r0, #4
 800531e:	4628      	mov	r0, r5
 8005320:	f000 f826 	bl	8005370 <_ZN14XFMutexDefault4lockEv>
       */
      void
      pop()
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 8005324:	f104 0008 	add.w	r0, r4, #8
	if (this->_M_impl._M_start._M_cur
 8005328:	6883      	ldr	r3, [r0, #8]
	    != this->_M_impl._M_start._M_last - 1)
 800532a:	6902      	ldr	r2, [r0, #16]
 800532c:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
 800532e:	4293      	cmp	r3, r2
 8005330:	d005      	beq.n	800533e <_ZN19XFEventQueueDefault3popEv+0x26>
	    ++this->_M_impl._M_start._M_cur;
 8005332:	3304      	adds	r3, #4
 8005334:	6083      	str	r3, [r0, #8]
    _mutex.unlock();
 8005336:	4628      	mov	r0, r5
 8005338:	f000 f81e 	bl	8005378 <_ZN14XFMutexDefault6unlockEv>
}
 800533c:	bd38      	pop	{r3, r4, r5, pc}
	  _M_pop_front_aux();
 800533e:	f7ff fe51 	bl	8004fe4 <_ZNSt5dequeIPK7XFEventSaIS2_EE16_M_pop_front_auxEv>
 8005342:	e7f8      	b.n	8005336 <_ZN19XFEventQueueDefault3popEv+0x1e>

08005344 <_ZN14XFMutexDefaultD1Ev>:

XFMutexDefault::XFMutexDefault()
{
}

XFMutexDefault::~XFMutexDefault()
 8005344:	4a02      	ldr	r2, [pc, #8]	; (8005350 <_ZN14XFMutexDefaultD1Ev+0xc>)
 8005346:	6002      	str	r2, [r0, #0]
 * A non-recursive mutex needs to be implemented.
 */
class XFMutex
{
public:
    virtual ~XFMutex() = default;
 8005348:	4a02      	ldr	r2, [pc, #8]	; (8005354 <_ZN14XFMutexDefaultD1Ev+0x10>)
 800534a:	6002      	str	r2, [r0, #0]
{
}
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	0800b77c 	.word	0x0800b77c
 8005354:	0800c0e0 	.word	0x0800c0e0

08005358 <_ZN14XFMutexDefault7tryLockEl>:
}

bool XFMutexDefault::tryLock(int32_t timeout /* = 0 */)
{
	return true;	// Always allow
}
 8005358:	2001      	movs	r0, #1
 800535a:	4770      	bx	lr

0800535c <_ZN14XFMutexDefaultD0Ev>:
XFMutexDefault::~XFMutexDefault()
 800535c:	b510      	push	{r4, lr}
 800535e:	4604      	mov	r4, r0
}
 8005360:	f7ff fff0 	bl	8005344 <_ZN14XFMutexDefaultD1Ev>
 8005364:	2104      	movs	r1, #4
 8005366:	4620      	mov	r0, r4
 8005368:	f004 fecc 	bl	800a104 <_ZdlPvj>
 800536c:	4620      	mov	r0, r4
 800536e:	bd10      	pop	{r4, pc}

08005370 <_ZN14XFMutexDefault4lockEv>:
{
 8005370:	b508      	push	{r3, lr}
    critical_enter();
 8005372:	f7ff f9b1 	bl	80046d8 <critical_enter>
}
 8005376:	bd08      	pop	{r3, pc}

08005378 <_ZN14XFMutexDefault6unlockEv>:
{
 8005378:	b508      	push	{r3, lr}
    critical_exit();
 800537a:	f7ff f9bd 	bl	80046f8 <critical_exit>
}
 800537e:	bd08      	pop	{r3, pc}

08005380 <_ZN14XFMutexDefaultC1Ev>:
     *   You cannot instanciate an object of an abstract class!
     */
    static XFMutex * create();

protected:
    XFMutex() = default;
 8005380:	4a02      	ldr	r2, [pc, #8]	; (800538c <_ZN14XFMutexDefaultC1Ev+0xc>)
 8005382:	6002      	str	r2, [r0, #0]
XFMutexDefault::XFMutexDefault()
 8005384:	4a02      	ldr	r2, [pc, #8]	; (8005390 <_ZN14XFMutexDefaultC1Ev+0x10>)
 8005386:	6002      	str	r2, [r0, #0]
}
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	0800c0e0 	.word	0x0800c0e0
 8005390:	0800b77c 	.word	0x0800b77c

08005394 <_ZN9interface7XFMutex6createEv>:
{
 8005394:	b510      	push	{r4, lr}
    return new XFMutexDefault;
 8005396:	2004      	movs	r0, #4
 8005398:	f004 fec5 	bl	800a126 <_Znwj>
 800539c:	4604      	mov	r4, r0
 800539e:	f7ff ffef 	bl	8005380 <_ZN14XFMutexDefaultC1Ev>
}
 80053a2:	4620      	mov	r0, r4
 80053a4:	bd10      	pop	{r4, pc}

080053a6 <XF_startTimeoutManagerTimer>:
{
    (void)tickInterval;

    // SysTick gets already started by the STM32CubeMX HAL.
    // So nothing to do here.
}
 80053a6:	4770      	bx	lr

080053a8 <XF_tick>:
 * SysTick_Handler() function is already implemented in the STM32CubeMX generated
 * code (see Src/stm32fxxx_it.c file). Therefore, we must provide here a function
 * which can be explicitly called in SysTick_Handler() to tick the XF.
 */
void XF_tick()
{
 80053a8:	b508      	push	{r3, lr}
    critical_setInIsr(true);			            // Tell critical section we are in an ISR
 80053aa:	2001      	movs	r0, #1
 80053ac:	f7ff f9b2 	bl	8004714 <critical_setInIsr>
	if (XF::isRunning())                            // Call tick only if XF is running
 80053b0:	f7ff fdec 	bl	8004f8c <_ZN2XF9isRunningEv>
 80053b4:	b918      	cbnz	r0, 80053be <XF_tick+0x16>
	{
	    XFTimeoutManager::getInstance()->tick();    // Call framework hook tick function
	}
	critical_setInIsr(false);
 80053b6:	2000      	movs	r0, #0
 80053b8:	f7ff f9ac 	bl	8004714 <critical_setInIsr>
}
 80053bc:	bd08      	pop	{r3, pc}
	    XFTimeoutManager::getInstance()->tick();    // Call framework hook tick function
 80053be:	f7ff fc45 	bl	8004c4c <_ZN9interface16XFTimeoutManager11getInstanceEv>
 80053c2:	6803      	ldr	r3, [r0, #0]
 80053c4:	69db      	ldr	r3, [r3, #28]
 80053c6:	4798      	blx	r3
 80053c8:	e7f5      	b.n	80053b6 <XF_tick+0xe>

080053ca <XF_tickIntervalInMilliseconds>:

/**
 * C function wrapping getTickInterval() method of XFTimeoutManager.
 */
int32_t XF_tickIntervalInMilliseconds()
{
 80053ca:	b508      	push	{r3, lr}
    return XFTimeoutManager::getInstance()->getTickInterval();
 80053cc:	f7ff fc3e 	bl	8004c4c <_ZN9interface16XFTimeoutManager11getInstanceEv>
 80053d0:	6803      	ldr	r3, [r0, #0]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	4798      	blx	r3
}
 80053d6:	bd08      	pop	{r3, pc}

080053d8 <XF_isRunning>:

bool XF_isRunning()
{
 80053d8:	b508      	push	{r3, lr}
    return XF::isRunning();
 80053da:	f7ff fdd7 	bl	8004f8c <_ZN2XF9isRunningEv>
}
 80053de:	bd08      	pop	{r3, pc}

080053e0 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 80053e0:	4770      	bx	lr

080053e2 <_ZN8touchgfx3HAL10FlushCacheEv>:
 80053e2:	4770      	bx	lr

080053e4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80053e4:	6803      	ldr	r3, [r0, #0]
 80053e6:	b513      	push	{r0, r1, r4, lr}
 80053e8:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 80053ec:	2300      	movs	r3, #0
 80053ee:	e9cd 3300 	strd	r3, r3, [sp]
 80053f2:	466b      	mov	r3, sp
 80053f4:	47a0      	blx	r4
 80053f6:	b002      	add	sp, #8
 80053f8:	bd10      	pop	{r4, pc}

080053fa <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80053fa:	2301      	movs	r3, #1
 80053fc:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8005400:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8005404:	4770      	bx	lr

08005406 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8005406:	2301      	movs	r3, #1
 8005408:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800540c:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8005410:	4770      	bx	lr

08005412 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8005412:	6843      	ldr	r3, [r0, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	725a      	strb	r2, [r3, #9]
 8005418:	6840      	ldr	r0, [r0, #4]
 800541a:	6803      	ldr	r3, [r0, #0]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	4718      	bx	r3

08005420 <_ZN8touchgfx3HAL8flushDMAEv>:
 8005420:	6840      	ldr	r0, [r0, #4]
 8005422:	6803      	ldr	r3, [r0, #0]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	4718      	bx	r3

08005428 <_ZN8touchgfx3HAL10beginFrameEv>:
 8005428:	4b04      	ldr	r3, [pc, #16]	; (800543c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	b123      	cbz	r3, 8005438 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800542e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8005432:	f080 0001 	eor.w	r0, r0, #1
 8005436:	4770      	bx	lr
 8005438:	2001      	movs	r0, #1
 800543a:	4770      	bx	lr
 800543c:	2000132a 	.word	0x2000132a

08005440 <_ZN8touchgfx3HAL8endFrameEv>:
 8005440:	b510      	push	{r4, lr}
 8005442:	4604      	mov	r4, r0
 8005444:	6840      	ldr	r0, [r0, #4]
 8005446:	6803      	ldr	r3, [r0, #0]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	4798      	blx	r3
 800544c:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8005450:	b113      	cbz	r3, 8005458 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8005452:	2301      	movs	r3, #1
 8005454:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8005458:	bd10      	pop	{r4, pc}

0800545a <_ZN8touchgfx3HAL9taskEntryEv>:
 800545a:	b508      	push	{r3, lr}
 800545c:	6803      	ldr	r3, [r0, #0]
 800545e:	4604      	mov	r4, r0
 8005460:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005462:	4798      	blx	r3
 8005464:	6823      	ldr	r3, [r4, #0]
 8005466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005468:	4620      	mov	r0, r4
 800546a:	4798      	blx	r3
 800546c:	f7fe fcc6 	bl	8003dfc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8005470:	6823      	ldr	r3, [r4, #0]
 8005472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005474:	e7f8      	b.n	8005468 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08005478 <_ZN8touchgfx3HAL4tickEv>:
 8005478:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800547a:	6803      	ldr	r3, [r0, #0]
 800547c:	4604      	mov	r4, r0
 800547e:	4d5c      	ldr	r5, [pc, #368]	; (80055f0 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8005480:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005484:	4798      	blx	r3
 8005486:	2800      	cmp	r0, #0
 8005488:	f000 8097 	beq.w	80055ba <_ZN8touchgfx3HAL4tickEv+0x142>
 800548c:	2001      	movs	r0, #1
 800548e:	2600      	movs	r6, #0
 8005490:	f7fe fb5a 	bl	8003b48 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8005494:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8005498:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 800549c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80054a0:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 80054a4:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 80054a8:	b133      	cbz	r3, 80054b8 <_ZN8touchgfx3HAL4tickEv+0x40>
 80054aa:	6823      	ldr	r3, [r4, #0]
 80054ac:	4620      	mov	r0, r4
 80054ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80054b2:	4798      	blx	r3
 80054b4:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 80054b8:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80054bc:	2601      	movs	r6, #1
 80054be:	6862      	ldr	r2, [r4, #4]
 80054c0:	f083 0301 	eor.w	r3, r3, #1
 80054c4:	702e      	strb	r6, [r5, #0]
 80054c6:	7253      	strb	r3, [r2, #9]
 80054c8:	f001 fd8a 	bl	8006fe0 <_ZN8touchgfx11Application11getInstanceEv>
 80054cc:	6803      	ldr	r3, [r0, #0]
 80054ce:	4631      	mov	r1, r6
 80054d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d2:	4798      	blx	r3
 80054d4:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80054d8:	b90b      	cbnz	r3, 80054de <_ZN8touchgfx3HAL4tickEv+0x66>
 80054da:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 80054de:	f001 fd7f 	bl	8006fe0 <_ZN8touchgfx11Application11getInstanceEv>
 80054e2:	6803      	ldr	r3, [r0, #0]
 80054e4:	695b      	ldr	r3, [r3, #20]
 80054e6:	4798      	blx	r3
 80054e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054ea:	6803      	ldr	r3, [r0, #0]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	4798      	blx	r3
 80054f0:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80054f4:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 80054f8:	3b01      	subs	r3, #1
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8005500:	b10a      	cbz	r2, 8005506 <_ZN8touchgfx3HAL4tickEv+0x8e>
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1eb      	bne.n	80054de <_ZN8touchgfx3HAL4tickEv+0x66>
 8005506:	4a3b      	ldr	r2, [pc, #236]	; (80055f4 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8005508:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 800550c:	7813      	ldrb	r3, [r2, #0]
 800550e:	3301      	adds	r3, #1
 8005510:	b25b      	sxtb	r3, r3
 8005512:	4299      	cmp	r1, r3
 8005514:	7013      	strb	r3, [r2, #0]
 8005516:	dc10      	bgt.n	800553a <_ZN8touchgfx3HAL4tickEv+0xc2>
 8005518:	2300      	movs	r3, #0
 800551a:	68e0      	ldr	r0, [r4, #12]
 800551c:	a902      	add	r1, sp, #8
 800551e:	7013      	strb	r3, [r2, #0]
 8005520:	aa03      	add	r2, sp, #12
 8005522:	6803      	ldr	r3, [r0, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	4798      	blx	r3
 8005528:	6823      	ldr	r3, [r4, #0]
 800552a:	2800      	cmp	r0, #0
 800552c:	d051      	beq.n	80055d2 <_ZN8touchgfx3HAL4tickEv+0x15a>
 800552e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005532:	4620      	mov	r0, r4
 8005534:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8005538:	4798      	blx	r3
 800553a:	2300      	movs	r3, #0
 800553c:	6960      	ldr	r0, [r4, #20]
 800553e:	f88d 3007 	strb.w	r3, [sp, #7]
 8005542:	b158      	cbz	r0, 800555c <_ZN8touchgfx3HAL4tickEv+0xe4>
 8005544:	6803      	ldr	r3, [r0, #0]
 8005546:	f10d 0107 	add.w	r1, sp, #7
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	4798      	blx	r3
 800554e:	b128      	cbz	r0, 800555c <_ZN8touchgfx3HAL4tickEv+0xe4>
 8005550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005552:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8005556:	6803      	ldr	r3, [r0, #0]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	4798      	blx	r3
 800555c:	f104 001c 	add.w	r0, r4, #28
 8005560:	f004 fd1c 	bl	8009f9c <_ZN8touchgfx8Gestures4tickEv>
 8005564:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8005568:	b30b      	cbz	r3, 80055ae <_ZN8touchgfx3HAL4tickEv+0x136>
 800556a:	6920      	ldr	r0, [r4, #16]
 800556c:	6803      	ldr	r3, [r0, #0]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	4798      	blx	r3
 8005572:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005574:	4606      	mov	r6, r0
 8005576:	b903      	cbnz	r3, 800557a <_ZN8touchgfx3HAL4tickEv+0x102>
 8005578:	6720      	str	r0, [r4, #112]	; 0x70
 800557a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800557c:	4a1e      	ldr	r2, [pc, #120]	; (80055f8 <_ZN8touchgfx3HAL4tickEv+0x180>)
 800557e:	1af3      	subs	r3, r6, r3
 8005580:	4293      	cmp	r3, r2
 8005582:	d914      	bls.n	80055ae <_ZN8touchgfx3HAL4tickEv+0x136>
 8005584:	6920      	ldr	r0, [r4, #16]
 8005586:	6803      	ldr	r3, [r0, #0]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	4798      	blx	r3
 800558c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800558e:	2264      	movs	r2, #100	; 0x64
 8005590:	1af3      	subs	r3, r6, r3
 8005592:	fbb3 f3f2 	udiv	r3, r3, r2
 8005596:	fbb0 f0f3 	udiv	r0, r0, r3
 800559a:	2800      	cmp	r0, #0
 800559c:	dc1e      	bgt.n	80055dc <_ZN8touchgfx3HAL4tickEv+0x164>
 800559e:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80055a2:	6920      	ldr	r0, [r4, #16]
 80055a4:	2100      	movs	r1, #0
 80055a6:	6803      	ldr	r3, [r0, #0]
 80055a8:	69db      	ldr	r3, [r3, #28]
 80055aa:	4798      	blx	r3
 80055ac:	6726      	str	r6, [r4, #112]	; 0x70
 80055ae:	f001 fd17 	bl	8006fe0 <_ZN8touchgfx11Application11getInstanceEv>
 80055b2:	6803      	ldr	r3, [r0, #0]
 80055b4:	2100      	movs	r1, #0
 80055b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b8:	4798      	blx	r3
 80055ba:	6823      	ldr	r3, [r4, #0]
 80055bc:	4620      	mov	r0, r4
 80055be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055c2:	4798      	blx	r3
 80055c4:	2001      	movs	r0, #1
 80055c6:	f7fe fac0 	bl	8003b4a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80055ca:	2300      	movs	r3, #0
 80055cc:	702b      	strb	r3, [r5, #0]
 80055ce:	b004      	add	sp, #16
 80055d0:	bd70      	pop	{r4, r5, r6, pc}
 80055d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80055d6:	4620      	mov	r0, r4
 80055d8:	4798      	blx	r3
 80055da:	e7ae      	b.n	800553a <_ZN8touchgfx3HAL4tickEv+0xc2>
 80055dc:	2863      	cmp	r0, #99	; 0x63
 80055de:	bfcb      	itete	gt
 80055e0:	2300      	movgt	r3, #0
 80055e2:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 80055e6:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 80055ea:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 80055ee:	e7d8      	b.n	80055a2 <_ZN8touchgfx3HAL4tickEv+0x12a>
 80055f0:	20001330 	.word	0x20001330
 80055f4:	20001331 	.word	0x20001331
 80055f8:	05f5e100 	.word	0x05f5e100

080055fc <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 80055fc:	f7fe bbe6 	b.w	8003dcc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08005600 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8005600:	6581      	str	r1, [r0, #88]	; 0x58
 8005602:	301c      	adds	r0, #28
 8005604:	f004 bcc8 	b.w	8009f98 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08005608 <_ZN8touchgfx3HAL5touchEll>:
 8005608:	b530      	push	{r4, r5, lr}
 800560a:	b087      	sub	sp, #28
 800560c:	4604      	mov	r4, r0
 800560e:	a804      	add	r0, sp, #16
 8005610:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8005614:	f001 fc2c 	bl	8006e70 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8005618:	9b04      	ldr	r3, [sp, #16]
 800561a:	a906      	add	r1, sp, #24
 800561c:	a803      	add	r0, sp, #12
 800561e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005622:	9b05      	ldr	r3, [sp, #20]
 8005624:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8005628:	f001 fc60 	bl	8006eec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800562c:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8005630:	f104 001c 	add.w	r0, r4, #28
 8005634:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8005638:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800563c:	b189      	cbz	r1, 8005662 <_ZN8touchgfx3HAL5touchEll+0x5a>
 800563e:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	4613      	mov	r3, r2
 8005646:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800564a:	462a      	mov	r2, r5
 800564c:	f004 fcb4 	bl	8009fb8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8005650:	b128      	cbz	r0, 800565e <_ZN8touchgfx3HAL5touchEll+0x56>
 8005652:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8005656:	65e3      	str	r3, [r4, #92]	; 0x5c
 8005658:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800565c:	6623      	str	r3, [r4, #96]	; 0x60
 800565e:	b007      	add	sp, #28
 8005660:	bd30      	pop	{r4, r5, pc}
 8005662:	f004 fced 	bl	800a040 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8005666:	2301      	movs	r3, #1
 8005668:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800566c:	e7f1      	b.n	8005652 <_ZN8touchgfx3HAL5touchEll+0x4a>

0800566e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800566e:	b570      	push	{r4, r5, r6, lr}
 8005670:	2b00      	cmp	r3, #0
 8005672:	d050      	beq.n	8005716 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8005674:	ea81 0002 	eor.w	r0, r1, r2
 8005678:	07c6      	lsls	r6, r0, #31
 800567a:	d508      	bpl.n	800568e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800567c:	3a01      	subs	r2, #1
 800567e:	18cc      	adds	r4, r1, r3
 8005680:	42a1      	cmp	r1, r4
 8005682:	d048      	beq.n	8005716 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8005684:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8005688:	f801 0b01 	strb.w	r0, [r1], #1
 800568c:	e7f8      	b.n	8005680 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800568e:	07d5      	lsls	r5, r2, #31
 8005690:	bf42      	ittt	mi
 8005692:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8005696:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800569a:	f801 0b01 	strbmi.w	r0, [r1], #1
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d915      	bls.n	80056ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80056a2:	ea82 0001 	eor.w	r0, r2, r1
 80056a6:	0784      	lsls	r4, r0, #30
 80056a8:	d02d      	beq.n	8005706 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 80056aa:	1e94      	subs	r4, r2, #2
 80056ac:	4608      	mov	r0, r1
 80056ae:	18ce      	adds	r6, r1, r3
 80056b0:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 80056b4:	f820 5b02 	strh.w	r5, [r0], #2
 80056b8:	1a35      	subs	r5, r6, r0
 80056ba:	2d01      	cmp	r5, #1
 80056bc:	d8f8      	bhi.n	80056b0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 80056be:	1e98      	subs	r0, r3, #2
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	f020 0001 	bic.w	r0, r0, #1
 80056c8:	3002      	adds	r0, #2
 80056ca:	4401      	add	r1, r0
 80056cc:	4402      	add	r2, r0
 80056ce:	1f14      	subs	r4, r2, #4
 80056d0:	4608      	mov	r0, r1
 80056d2:	18ce      	adds	r6, r1, r3
 80056d4:	1a35      	subs	r5, r6, r0
 80056d6:	2d03      	cmp	r5, #3
 80056d8:	d810      	bhi.n	80056fc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 80056da:	089c      	lsrs	r4, r3, #2
 80056dc:	00a0      	lsls	r0, r4, #2
 80056de:	4401      	add	r1, r0
 80056e0:	3801      	subs	r0, #1
 80056e2:	4402      	add	r2, r0
 80056e4:	f06f 0003 	mvn.w	r0, #3
 80056e8:	fb00 3404 	mla	r4, r0, r4, r3
 80056ec:	440c      	add	r4, r1
 80056ee:	42a1      	cmp	r1, r4
 80056f0:	d011      	beq.n	8005716 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80056f2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80056f6:	f801 3b01 	strb.w	r3, [r1], #1
 80056fa:	e7f8      	b.n	80056ee <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 80056fc:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8005700:	f840 5b04 	str.w	r5, [r0], #4
 8005704:	e7e6      	b.n	80056d4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 8005706:	0790      	lsls	r0, r2, #30
 8005708:	d0e1      	beq.n	80056ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 800570a:	f832 0b02 	ldrh.w	r0, [r2], #2
 800570e:	3b02      	subs	r3, #2
 8005710:	f821 0b02 	strh.w	r0, [r1], #2
 8005714:	e7db      	b.n	80056ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8005716:	2001      	movs	r0, #1
 8005718:	bd70      	pop	{r4, r5, r6, pc}

0800571a <_ZN8touchgfx3HAL7noTouchEv>:
 800571a:	b510      	push	{r4, lr}
 800571c:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8005720:	4604      	mov	r4, r0
 8005722:	b153      	cbz	r3, 800573a <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8005724:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8005728:	2101      	movs	r1, #1
 800572a:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 800572e:	301c      	adds	r0, #28
 8005730:	f004 fc86 	bl	800a040 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8005734:	2300      	movs	r3, #0
 8005736:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800573a:	bd10      	pop	{r4, pc}

0800573c <_ZN8touchgfx4RectaNERKS0_>:
 800573c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005740:	f9b1 7000 	ldrsh.w	r7, [r1]
 8005744:	888c      	ldrh	r4, [r1, #4]
 8005746:	f9b0 9000 	ldrsh.w	r9, [r0]
 800574a:	443c      	add	r4, r7
 800574c:	b2a4      	uxth	r4, r4
 800574e:	fa0f f884 	sxth.w	r8, r4
 8005752:	45c1      	cmp	r9, r8
 8005754:	da2f      	bge.n	80057b6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8005756:	8882      	ldrh	r2, [r0, #4]
 8005758:	444a      	add	r2, r9
 800575a:	b292      	uxth	r2, r2
 800575c:	fa0f fe82 	sxth.w	lr, r2
 8005760:	4577      	cmp	r7, lr
 8005762:	da28      	bge.n	80057b6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8005764:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8005768:	88cb      	ldrh	r3, [r1, #6]
 800576a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800576e:	442b      	add	r3, r5
 8005770:	b21b      	sxth	r3, r3
 8005772:	429e      	cmp	r6, r3
 8005774:	da1f      	bge.n	80057b6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8005776:	88c3      	ldrh	r3, [r0, #6]
 8005778:	4433      	add	r3, r6
 800577a:	b29b      	uxth	r3, r3
 800577c:	fa0f fc83 	sxth.w	ip, r3
 8005780:	4565      	cmp	r5, ip
 8005782:	da18      	bge.n	80057b6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8005784:	454f      	cmp	r7, r9
 8005786:	bfb8      	it	lt
 8005788:	464f      	movlt	r7, r9
 800578a:	42b5      	cmp	r5, r6
 800578c:	bfb8      	it	lt
 800578e:	4635      	movlt	r5, r6
 8005790:	45f0      	cmp	r8, lr
 8005792:	bfd8      	it	le
 8005794:	4622      	movle	r2, r4
 8005796:	1bd2      	subs	r2, r2, r7
 8005798:	8082      	strh	r2, [r0, #4]
 800579a:	884a      	ldrh	r2, [r1, #2]
 800579c:	88c9      	ldrh	r1, [r1, #6]
 800579e:	8007      	strh	r7, [r0, #0]
 80057a0:	440a      	add	r2, r1
 80057a2:	8045      	strh	r5, [r0, #2]
 80057a4:	b292      	uxth	r2, r2
 80057a6:	b211      	sxth	r1, r2
 80057a8:	458c      	cmp	ip, r1
 80057aa:	bfa8      	it	ge
 80057ac:	4613      	movge	r3, r2
 80057ae:	1b5b      	subs	r3, r3, r5
 80057b0:	80c3      	strh	r3, [r0, #6]
 80057b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80057b6:	2300      	movs	r3, #0
 80057b8:	8003      	strh	r3, [r0, #0]
 80057ba:	8043      	strh	r3, [r0, #2]
 80057bc:	8083      	strh	r3, [r0, #4]
 80057be:	80c3      	strh	r3, [r0, #6]
 80057c0:	e7f7      	b.n	80057b2 <_ZN8touchgfx4RectaNERKS0_+0x76>

080057c2 <_ZN8touchgfx8Drawable5setXYEss>:
 80057c2:	b570      	push	{r4, r5, r6, lr}
 80057c4:	6803      	ldr	r3, [r0, #0]
 80057c6:	4604      	mov	r4, r0
 80057c8:	4615      	mov	r5, r2
 80057ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057cc:	4798      	blx	r3
 80057ce:	6823      	ldr	r3, [r4, #0]
 80057d0:	4629      	mov	r1, r5
 80057d2:	4620      	mov	r0, r4
 80057d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80057da:	4718      	bx	r3

080057dc <_ZN8touchgfx3HAL3lcdEv>:
 80057dc:	4b04      	ldr	r3, [pc, #16]	; (80057f0 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80057e4:	b10a      	cbz	r2, 80057ea <_ZN8touchgfx3HAL3lcdEv+0xe>
 80057e6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80057e8:	b900      	cbnz	r0, 80057ec <_ZN8touchgfx3HAL3lcdEv+0x10>
 80057ea:	6898      	ldr	r0, [r3, #8]
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	2000132c 	.word	0x2000132c

080057f4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80057f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80057f8:	4604      	mov	r4, r0
 80057fa:	6980      	ldr	r0, [r0, #24]
 80057fc:	b085      	sub	sp, #20
 80057fe:	460f      	mov	r7, r1
 8005800:	4690      	mov	r8, r2
 8005802:	4699      	mov	r9, r3
 8005804:	b930      	cbnz	r0, 8005814 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8005806:	4b1c      	ldr	r3, [pc, #112]	; (8005878 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 8005808:	f44f 71a1 	mov.w	r1, #322	; 0x142
 800580c:	4a1b      	ldr	r2, [pc, #108]	; (800587c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 800580e:	481c      	ldr	r0, [pc, #112]	; (8005880 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 8005810:	f004 fcd4 	bl	800a1bc <__assert_func>
 8005814:	ad04      	add	r5, sp, #16
 8005816:	2600      	movs	r6, #0
 8005818:	f845 6d04 	str.w	r6, [r5, #-4]!
 800581c:	6806      	ldr	r6, [r0, #0]
 800581e:	9501      	str	r5, [sp, #4]
 8005820:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8005824:	9500      	str	r5, [sp, #0]
 8005826:	6835      	ldr	r5, [r6, #0]
 8005828:	47a8      	blx	r5
 800582a:	4d16      	ldr	r5, [pc, #88]	; (8005884 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 800582c:	4606      	mov	r6, r0
 800582e:	f8a5 9000 	strh.w	r9, [r5]
 8005832:	f7ff ffd3 	bl	80057dc <_ZN8touchgfx3HAL3lcdEv>
 8005836:	6803      	ldr	r3, [r0, #0]
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	4798      	blx	r3
 800583c:	2801      	cmp	r0, #1
 800583e:	d012      	beq.n	8005866 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 8005840:	d306      	bcc.n	8005850 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 8005842:	280d      	cmp	r0, #13
 8005844:	d80b      	bhi.n	800585e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8005846:	4b10      	ldr	r3, [pc, #64]	; (8005888 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8005848:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800584c:	4a0b      	ldr	r2, [pc, #44]	; (800587c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 800584e:	e7de      	b.n	800580e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8005850:	882b      	ldrh	r3, [r5, #0]
 8005852:	fb08 7203 	mla	r2, r8, r3, r7
 8005856:	9b03      	ldr	r3, [sp, #12]
 8005858:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800585c:	63e3      	str	r3, [r4, #60]	; 0x3c
 800585e:	4630      	mov	r0, r6
 8005860:	b005      	add	sp, #20
 8005862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005866:	882a      	ldrh	r2, [r5, #0]
 8005868:	9b03      	ldr	r3, [sp, #12]
 800586a:	fb08 7202 	mla	r2, r8, r2, r7
 800586e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005872:	1a9a      	subs	r2, r3, r2
 8005874:	63e2      	str	r2, [r4, #60]	; 0x3c
 8005876:	e7f2      	b.n	800585e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8005878:	0800c162 	.word	0x0800c162
 800587c:	0800c47a 	.word	0x0800c47a
 8005880:	0800c1a7 	.word	0x0800c1a7
 8005884:	20001326 	.word	0x20001326
 8005888:	0800c1cd 	.word	0x0800c1cd

0800588c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 800588c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005890:	4698      	mov	r8, r3
 8005892:	6803      	ldr	r3, [r0, #0]
 8005894:	b087      	sub	sp, #28
 8005896:	460e      	mov	r6, r1
 8005898:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 800589a:	4617      	mov	r7, r2
 800589c:	4b0d      	ldr	r3, [pc, #52]	; (80058d4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 800589e:	4604      	mov	r4, r0
 80058a0:	f8b3 9000 	ldrh.w	r9, [r3]
 80058a4:	f7ff ff9a 	bl	80057dc <_ZN8touchgfx3HAL3lcdEv>
 80058a8:	6803      	ldr	r3, [r0, #0]
 80058aa:	6a1b      	ldr	r3, [r3, #32]
 80058ac:	4798      	blx	r3
 80058ae:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80058b2:	463a      	mov	r2, r7
 80058b4:	4631      	mov	r1, r6
 80058b6:	9302      	str	r3, [sp, #8]
 80058b8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80058bc:	9301      	str	r3, [sp, #4]
 80058be:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80058c2:	e9cd 9003 	strd	r9, r0, [sp, #12]
 80058c6:	9300      	str	r3, [sp, #0]
 80058c8:	4620      	mov	r0, r4
 80058ca:	4643      	mov	r3, r8
 80058cc:	47a8      	blx	r5
 80058ce:	b007      	add	sp, #28
 80058d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80058d4:	20001326 	.word	0x20001326

080058d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 80058d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058dc:	4604      	mov	r4, r0
 80058de:	b08b      	sub	sp, #44	; 0x2c
 80058e0:	4610      	mov	r0, r2
 80058e2:	460d      	mov	r5, r1
 80058e4:	4691      	mov	r9, r2
 80058e6:	461e      	mov	r6, r3
 80058e8:	f002 fc7c 	bl	80081e4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80058ec:	2800      	cmp	r0, #0
 80058ee:	f000 80a0 	beq.w	8005a32 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 80058f2:	6823      	ldr	r3, [r4, #0]
 80058f4:	4620      	mov	r0, r4
 80058f6:	f8df b170 	ldr.w	fp, [pc, #368]	; 8005a68 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x190>
 80058fa:	af0a      	add	r7, sp, #40	; 0x28
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	4798      	blx	r3
 8005900:	6823      	ldr	r3, [r4, #0]
 8005902:	4620      	mov	r0, r4
 8005904:	f8df a164 	ldr.w	sl, [pc, #356]	; 8005a6c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x194>
 8005908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590a:	4798      	blx	r3
 800590c:	f8bb 3000 	ldrh.w	r3, [fp]
 8005910:	f827 9d0c 	strh.w	r9, [r7, #-12]!
 8005914:	4638      	mov	r0, r7
 8005916:	9301      	str	r3, [sp, #4]
 8005918:	f8ba 3000 	ldrh.w	r3, [sl]
 800591c:	9302      	str	r3, [sp, #8]
 800591e:	4b4f      	ldr	r3, [pc, #316]	; (8005a5c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x184>)
 8005920:	881a      	ldrh	r2, [r3, #0]
 8005922:	4698      	mov	r8, r3
 8005924:	9203      	str	r2, [sp, #12]
 8005926:	4a4e      	ldr	r2, [pc, #312]	; (8005a60 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 8005928:	8812      	ldrh	r2, [r2, #0]
 800592a:	9204      	str	r2, [sp, #16]
 800592c:	4a4d      	ldr	r2, [pc, #308]	; (8005a64 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x18c>)
 800592e:	7812      	ldrb	r2, [r2, #0]
 8005930:	2a00      	cmp	r2, #0
 8005932:	f040 8081 	bne.w	8005a38 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x160>
 8005936:	f002 fc61 	bl	80081fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 800593a:	f8ab 0000 	strh.w	r0, [fp]
 800593e:	4638      	mov	r0, r7
 8005940:	f002 fc96 	bl	8008270 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8005944:	f8aa 0000 	strh.w	r0, [sl]
 8005948:	4638      	mov	r0, r7
 800594a:	f002 fc57 	bl	80081fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 800594e:	f8a8 0000 	strh.w	r0, [r8]
 8005952:	4638      	mov	r0, r7
 8005954:	f002 fc8c 	bl	8008270 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8005958:	4b41      	ldr	r3, [pc, #260]	; (8005a60 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 800595a:	8018      	strh	r0, [r3, #0]
 800595c:	4648      	mov	r0, r9
 800595e:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8005962:	f002 fc3f 	bl	80081e4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8005966:	2200      	movs	r2, #0
 8005968:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 800596c:	4611      	mov	r1, r2
 800596e:	4628      	mov	r0, r5
 8005970:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8005974:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8005978:	f7ff ff23 	bl	80057c2 <_ZN8touchgfx8Drawable5setXYEss>
 800597c:	2301      	movs	r3, #1
 800597e:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8005982:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8005986:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	dd5c      	ble.n	8005a48 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x170>
 800598e:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8005992:	2b00      	cmp	r3, #0
 8005994:	dd58      	ble.n	8005a48 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x170>
 8005996:	462a      	mov	r2, r5
 8005998:	ab08      	add	r3, sp, #32
 800599a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800599e:	6851      	ldr	r1, [r2, #4]
 80059a0:	c303      	stmia	r3!, {r0, r1}
 80059a2:	4631      	mov	r1, r6
 80059a4:	a808      	add	r0, sp, #32
 80059a6:	f7ff fec9 	bl	800573c <_ZN8touchgfx4RectaNERKS0_>
 80059aa:	a807      	add	r0, sp, #28
 80059ac:	f002 fdb8 	bl	8008520 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80059b0:	4606      	mov	r6, r0
 80059b2:	f7ff ff13 	bl	80057dc <_ZN8touchgfx3HAL3lcdEv>
 80059b6:	6803      	ldr	r3, [r0, #0]
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	4798      	blx	r3
 80059bc:	4286      	cmp	r6, r0
 80059be:	d04a      	beq.n	8005a56 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x17e>
 80059c0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80059c2:	b150      	cbz	r0, 80059da <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x102>
 80059c4:	a807      	add	r0, sp, #28
 80059c6:	f002 fdab 	bl	8008520 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80059ca:	4606      	mov	r6, r0
 80059cc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80059ce:	6803      	ldr	r3, [r0, #0]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	4798      	blx	r3
 80059d4:	1a33      	subs	r3, r6, r0
 80059d6:	4258      	negs	r0, r3
 80059d8:	4158      	adcs	r0, r3
 80059da:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 80059de:	2600      	movs	r6, #0
 80059e0:	696b      	ldr	r3, [r5, #20]
 80059e2:	a908      	add	r1, sp, #32
 80059e4:	682a      	ldr	r2, [r5, #0]
 80059e6:	4628      	mov	r0, r5
 80059e8:	9305      	str	r3, [sp, #20]
 80059ea:	616e      	str	r6, [r5, #20]
 80059ec:	6892      	ldr	r2, [r2, #8]
 80059ee:	4790      	blx	r2
 80059f0:	9b05      	ldr	r3, [sp, #20]
 80059f2:	4652      	mov	r2, sl
 80059f4:	4649      	mov	r1, r9
 80059f6:	616b      	str	r3, [r5, #20]
 80059f8:	4628      	mov	r0, r5
 80059fa:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 80059fe:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8005a02:	f7ff fede 	bl	80057c2 <_ZN8touchgfx8Drawable5setXYEss>
 8005a06:	9a01      	ldr	r2, [sp, #4]
 8005a08:	4b17      	ldr	r3, [pc, #92]	; (8005a68 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x190>)
 8005a0a:	4620      	mov	r0, r4
 8005a0c:	801a      	strh	r2, [r3, #0]
 8005a0e:	9a02      	ldr	r2, [sp, #8]
 8005a10:	4b16      	ldr	r3, [pc, #88]	; (8005a6c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x194>)
 8005a12:	801a      	strh	r2, [r3, #0]
 8005a14:	9a03      	ldr	r2, [sp, #12]
 8005a16:	4b11      	ldr	r3, [pc, #68]	; (8005a5c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x184>)
 8005a18:	801a      	strh	r2, [r3, #0]
 8005a1a:	4b11      	ldr	r3, [pc, #68]	; (8005a60 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x188>)
 8005a1c:	9a04      	ldr	r2, [sp, #16]
 8005a1e:	801a      	strh	r2, [r3, #0]
 8005a20:	6823      	ldr	r3, [r4, #0]
 8005a22:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8005a26:	6a1b      	ldr	r3, [r3, #32]
 8005a28:	4798      	blx	r3
 8005a2a:	6823      	ldr	r3, [r4, #0]
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a30:	4798      	blx	r3
 8005a32:	b00b      	add	sp, #44	; 0x2c
 8005a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a38:	f002 fc1a 	bl	8008270 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8005a3c:	f8ab 0000 	strh.w	r0, [fp]
 8005a40:	4638      	mov	r0, r7
 8005a42:	f002 fbdb 	bl	80081fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8005a46:	e77d      	b.n	8005944 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x6c>
 8005a48:	462a      	mov	r2, r5
 8005a4a:	ab08      	add	r3, sp, #32
 8005a4c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8005a50:	6851      	ldr	r1, [r2, #4]
 8005a52:	c303      	stmia	r3!, {r0, r1}
 8005a54:	e7a9      	b.n	80059aa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xd2>
 8005a56:	2000      	movs	r0, #0
 8005a58:	e7bf      	b.n	80059da <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x102>
 8005a5a:	bf00      	nop
 8005a5c:	20001320 	.word	0x20001320
 8005a60:	20001322 	.word	0x20001322
 8005a64:	20001324 	.word	0x20001324
 8005a68:	20001326 	.word	0x20001326
 8005a6c:	20001328 	.word	0x20001328

08005a70 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8005a70:	4b07      	ldr	r3, [pc, #28]	; (8005a90 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8005a72:	b510      	push	{r4, lr}
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	4604      	mov	r4, r0
 8005a78:	b13b      	cbz	r3, 8005a8a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8005a7a:	6803      	ldr	r3, [r0, #0]
 8005a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7e:	4798      	blx	r3
 8005a80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005a82:	4283      	cmp	r3, r0
 8005a84:	d101      	bne.n	8005a8a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8005a86:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8005a88:	bd10      	pop	{r4, pc}
 8005a8a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005a8c:	e7fc      	b.n	8005a88 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8005a8e:	bf00      	nop
 8005a90:	2000132a 	.word	0x2000132a

08005a94 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8005a94:	b508      	push	{r3, lr}
 8005a96:	290d      	cmp	r1, #13
 8005a98:	d817      	bhi.n	8005aca <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8005a9a:	e8df f001 	tbb	[pc, r1]
 8005a9e:	090b      	.short	0x090b
 8005aa0:	0d0d0d07 	.word	0x0d0d0d07
 8005aa4:	1414140d 	.word	0x1414140d
 8005aa8:	0d0d1414 	.word	0x0d0d1414
 8005aac:	2020      	movs	r0, #32
 8005aae:	bd08      	pop	{r3, pc}
 8005ab0:	2018      	movs	r0, #24
 8005ab2:	e7fc      	b.n	8005aae <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8005ab4:	2010      	movs	r0, #16
 8005ab6:	e7fa      	b.n	8005aae <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8005ab8:	4b05      	ldr	r3, [pc, #20]	; (8005ad0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8005aba:	f44f 7111 	mov.w	r1, #580	; 0x244
 8005abe:	4a05      	ldr	r2, [pc, #20]	; (8005ad4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8005ac0:	4805      	ldr	r0, [pc, #20]	; (8005ad8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8005ac2:	f004 fb7b 	bl	800a1bc <__assert_func>
 8005ac6:	2008      	movs	r0, #8
 8005ac8:	e7f1      	b.n	8005aae <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8005aca:	2000      	movs	r0, #0
 8005acc:	e7ef      	b.n	8005aae <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8005ace:	bf00      	nop
 8005ad0:	0800c2a0 	.word	0x0800c2a0
 8005ad4:	0800c63c 	.word	0x0800c63c
 8005ad8:	0800c1a7 	.word	0x0800c1a7

08005adc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8005adc:	b570      	push	{r4, r5, r6, lr}
 8005ade:	460d      	mov	r5, r1
 8005ae0:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8005ae4:	4616      	mov	r6, r2
 8005ae6:	461c      	mov	r4, r3
 8005ae8:	f7ff ffd4 	bl	8005a94 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8005aec:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8005af0:	10c0      	asrs	r0, r0, #3
 8005af2:	fb06 5101 	mla	r1, r6, r1, r5
 8005af6:	fb00 4001 	mla	r0, r0, r1, r4
 8005afa:	bd70      	pop	{r4, r5, r6, pc}

08005afc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 8005afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b00:	b08a      	sub	sp, #40	; 0x28
 8005b02:	f04f 0c00 	mov.w	ip, #0
 8005b06:	4604      	mov	r4, r0
 8005b08:	469a      	mov	sl, r3
 8005b0a:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8005b0e:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8005b12:	f1b8 0f02 	cmp.w	r8, #2
 8005b16:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 8005b1a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8005b1e:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8005b22:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8005b26:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8005b2a:	f8cd c020 	str.w	ip, [sp, #32]
 8005b2e:	d030      	beq.n	8005b92 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 8005b30:	2bff      	cmp	r3, #255	; 0xff
 8005b32:	d12c      	bne.n	8005b8e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 8005b34:	4560      	cmp	r0, ip
 8005b36:	bf14      	ite	ne
 8005b38:	2004      	movne	r0, #4
 8005b3a:	2001      	moveq	r0, #1
 8005b3c:	9204      	str	r2, [sp, #16]
 8005b3e:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8005b42:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8005b46:	f8ad 201c 	strh.w	r2, [sp, #28]
 8005b4a:	f8ad 6018 	strh.w	r6, [sp, #24]
 8005b4e:	f8ad 501a 	strh.w	r5, [sp, #26]
 8005b52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b56:	4620      	mov	r0, r4
 8005b58:	f7ff ff8a 	bl	8005a70 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8005b5c:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8005b60:	4603      	mov	r3, r0
 8005b62:	4651      	mov	r1, sl
 8005b64:	4620      	mov	r0, r4
 8005b66:	e9cd 9700 	strd	r9, r7, [sp]
 8005b6a:	f7ff ffb7 	bl	8005adc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8005b6e:	f8ad 901e 	strh.w	r9, [sp, #30]
 8005b72:	9005      	str	r0, [sp, #20]
 8005b74:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 8005b78:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8005b7c:	b106      	cbz	r6, 8005b80 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 8005b7e:	b98d      	cbnz	r5, 8005ba4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8005b80:	4b12      	ldr	r3, [pc, #72]	; (8005bcc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 8005b82:	f240 11c3 	movw	r1, #451	; 0x1c3
 8005b86:	4a12      	ldr	r2, [pc, #72]	; (8005bd0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8005b88:	4812      	ldr	r0, [pc, #72]	; (8005bd4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8005b8a:	f004 fb17 	bl	800a1bc <__assert_func>
 8005b8e:	2004      	movs	r0, #4
 8005b90:	e7d4      	b.n	8005b3c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8005b92:	2bff      	cmp	r3, #255	; 0xff
 8005b94:	d104      	bne.n	8005ba0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 8005b96:	2800      	cmp	r0, #0
 8005b98:	bf14      	ite	ne
 8005b9a:	2040      	movne	r0, #64	; 0x40
 8005b9c:	2020      	moveq	r0, #32
 8005b9e:	e7cd      	b.n	8005b3c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8005ba0:	2040      	movs	r0, #64	; 0x40
 8005ba2:	e7cb      	b.n	8005b3c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8005ba4:	6823      	ldr	r3, [r4, #0]
 8005ba6:	4620      	mov	r0, r4
 8005ba8:	9d02      	ldr	r5, [sp, #8]
 8005baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bac:	4798      	blx	r3
 8005bae:	4228      	tst	r0, r5
 8005bb0:	d104      	bne.n	8005bbc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 8005bb2:	4b09      	ldr	r3, [pc, #36]	; (8005bd8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8005bb4:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8005bb8:	4a05      	ldr	r2, [pc, #20]	; (8005bd0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8005bba:	e7e5      	b.n	8005b88 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 8005bbc:	6860      	ldr	r0, [r4, #4]
 8005bbe:	a902      	add	r1, sp, #8
 8005bc0:	6803      	ldr	r3, [r0, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	4798      	blx	r3
 8005bc6:	b00a      	add	sp, #40	; 0x28
 8005bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bcc:	0800c223 	.word	0x0800c223
 8005bd0:	0800c4de 	.word	0x0800c4de
 8005bd4:	0800c1a7 	.word	0x0800c1a7
 8005bd8:	0800c25b 	.word	0x0800c25b

08005bdc <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8005bdc:	b510      	push	{r4, lr}
 8005bde:	b08a      	sub	sp, #40	; 0x28
 8005be0:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8005be4:	9408      	str	r4, [sp, #32]
 8005be6:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8005bea:	9407      	str	r4, [sp, #28]
 8005bec:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 8005bf0:	9406      	str	r4, [sp, #24]
 8005bf2:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8005bf6:	9405      	str	r4, [sp, #20]
 8005bf8:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 8005bfc:	9404      	str	r4, [sp, #16]
 8005bfe:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 8005c02:	9403      	str	r4, [sp, #12]
 8005c04:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 8005c08:	9402      	str	r4, [sp, #8]
 8005c0a:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8005c0e:	e9cd 3400 	strd	r3, r4, [sp]
 8005c12:	4613      	mov	r3, r2
 8005c14:	2200      	movs	r2, #0
 8005c16:	f7ff ff71 	bl	8005afc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8005c1a:	b00a      	add	sp, #40	; 0x28
 8005c1c:	bd10      	pop	{r4, pc}
	...

08005c20 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8005c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c22:	b08b      	sub	sp, #44	; 0x2c
 8005c24:	4616      	mov	r6, r2
 8005c26:	460d      	mov	r5, r1
 8005c28:	461f      	mov	r7, r3
 8005c2a:	4604      	mov	r4, r0
 8005c2c:	f7ff fdd6 	bl	80057dc <_ZN8touchgfx3HAL3lcdEv>
 8005c30:	6803      	ldr	r3, [r0, #0]
 8005c32:	6a1b      	ldr	r3, [r3, #32]
 8005c34:	4798      	blx	r3
 8005c36:	4b0e      	ldr	r3, [pc, #56]	; (8005c70 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 8005c38:	2200      	movs	r2, #0
 8005c3a:	4629      	mov	r1, r5
 8005c3c:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8005c40:	881b      	ldrh	r3, [r3, #0]
 8005c42:	4620      	mov	r0, r4
 8005c44:	9306      	str	r3, [sp, #24]
 8005c46:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8005c4a:	9305      	str	r3, [sp, #20]
 8005c4c:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8005c50:	9304      	str	r3, [sp, #16]
 8005c52:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8005c56:	9303      	str	r3, [sp, #12]
 8005c58:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8005c5c:	9302      	str	r3, [sp, #8]
 8005c5e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8005c62:	e9cd 7300 	strd	r7, r3, [sp]
 8005c66:	4633      	mov	r3, r6
 8005c68:	f7ff ff48 	bl	8005afc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8005c6c:	b00b      	add	sp, #44	; 0x2c
 8005c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c70:	20001326 	.word	0x20001326

08005c74 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8005c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c78:	461f      	mov	r7, r3
 8005c7a:	4b14      	ldr	r3, [pc, #80]	; (8005ccc <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8005c7c:	b08a      	sub	sp, #40	; 0x28
 8005c7e:	4616      	mov	r6, r2
 8005c80:	f8b3 8000 	ldrh.w	r8, [r3]
 8005c84:	460d      	mov	r5, r1
 8005c86:	4604      	mov	r4, r0
 8005c88:	f7ff fda8 	bl	80057dc <_ZN8touchgfx3HAL3lcdEv>
 8005c8c:	6803      	ldr	r3, [r0, #0]
 8005c8e:	6a1b      	ldr	r3, [r3, #32]
 8005c90:	4798      	blx	r3
 8005c92:	2302      	movs	r3, #2
 8005c94:	9008      	str	r0, [sp, #32]
 8005c96:	2200      	movs	r2, #0
 8005c98:	4629      	mov	r1, r5
 8005c9a:	4620      	mov	r0, r4
 8005c9c:	e9cd 8306 	strd	r8, r3, [sp, #24]
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	9305      	str	r3, [sp, #20]
 8005ca4:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8005ca8:	9304      	str	r3, [sp, #16]
 8005caa:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8005cae:	9303      	str	r3, [sp, #12]
 8005cb0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8005cb4:	9302      	str	r3, [sp, #8]
 8005cb6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8005cba:	e9cd 7300 	strd	r7, r3, [sp]
 8005cbe:	4633      	mov	r3, r6
 8005cc0:	f7ff ff1c 	bl	8005afc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8005cc4:	b00a      	add	sp, #40	; 0x28
 8005cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cca:	bf00      	nop
 8005ccc:	20001326 	.word	0x20001326

08005cd0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8005cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cd4:	b08b      	sub	sp, #44	; 0x2c
 8005cd6:	469b      	mov	fp, r3
 8005cd8:	4604      	mov	r4, r0
 8005cda:	4692      	mov	sl, r2
 8005cdc:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8005ce0:	2600      	movs	r6, #0
 8005ce2:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8005ce6:	4689      	mov	r9, r1
 8005ce8:	2fff      	cmp	r7, #255	; 0xff
 8005cea:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8005cee:	9608      	str	r6, [sp, #32]
 8005cf0:	bf14      	ite	ne
 8005cf2:	2308      	movne	r3, #8
 8005cf4:	2302      	moveq	r3, #2
 8005cf6:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8005cfa:	f7ff feb9 	bl	8005a70 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8005cfe:	465a      	mov	r2, fp
 8005d00:	4603      	mov	r3, r0
 8005d02:	4651      	mov	r1, sl
 8005d04:	4620      	mov	r0, r4
 8005d06:	e9cd 8500 	strd	r8, r5, [sp]
 8005d0a:	f7ff fee7 	bl	8005adc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8005d0e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8005d12:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8005d16:	f8ad 3018 	strh.w	r3, [sp, #24]
 8005d1a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8005d1e:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8005d22:	f8ad 301a 	strh.w	r3, [sp, #26]
 8005d26:	6823      	ldr	r3, [r4, #0]
 8005d28:	9d02      	ldr	r5, [sp, #8]
 8005d2a:	9005      	str	r0, [sp, #20]
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	f8ad 601c 	strh.w	r6, [sp, #28]
 8005d32:	f8ad 801e 	strh.w	r8, [sp, #30]
 8005d36:	f8cd 9020 	str.w	r9, [sp, #32]
 8005d3a:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8005d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d40:	4798      	blx	r3
 8005d42:	4228      	tst	r0, r5
 8005d44:	d106      	bne.n	8005d54 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 8005d46:	4b07      	ldr	r3, [pc, #28]	; (8005d64 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8005d48:	f240 11fb 	movw	r1, #507	; 0x1fb
 8005d4c:	4a06      	ldr	r2, [pc, #24]	; (8005d68 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8005d4e:	4807      	ldr	r0, [pc, #28]	; (8005d6c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8005d50:	f004 fa34 	bl	800a1bc <__assert_func>
 8005d54:	6860      	ldr	r0, [r4, #4]
 8005d56:	a902      	add	r1, sp, #8
 8005d58:	6803      	ldr	r3, [r0, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	4798      	blx	r3
 8005d5e:	b00b      	add	sp, #44	; 0x2c
 8005d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d64:	0800c25b 	.word	0x0800c25b
 8005d68:	0800c5a7 	.word	0x0800c5a7
 8005d6c:	0800c1a7 	.word	0x0800c1a7

08005d70 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8005d70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005d74:	461f      	mov	r7, r3
 8005d76:	4b0b      	ldr	r3, [pc, #44]	; (8005da4 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8005d78:	460d      	mov	r5, r1
 8005d7a:	4616      	mov	r6, r2
 8005d7c:	f8b3 8000 	ldrh.w	r8, [r3]
 8005d80:	4604      	mov	r4, r0
 8005d82:	f7ff fd2b 	bl	80057dc <_ZN8touchgfx3HAL3lcdEv>
 8005d86:	6803      	ldr	r3, [r0, #0]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	4798      	blx	r3
 8005d8c:	463b      	mov	r3, r7
 8005d8e:	4632      	mov	r2, r6
 8005d90:	4629      	mov	r1, r5
 8005d92:	e9cd 8000 	strd	r8, r0, [sp]
 8005d96:	4620      	mov	r0, r4
 8005d98:	f7ff fea0 	bl	8005adc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8005d9c:	b002      	add	sp, #8
 8005d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005da2:	bf00      	nop
 8005da4:	20001326 	.word	0x20001326

08005da8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 8005da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dac:	4698      	mov	r8, r3
 8005dae:	b088      	sub	sp, #32
 8005db0:	2300      	movs	r3, #0
 8005db2:	4617      	mov	r7, r2
 8005db4:	4604      	mov	r4, r0
 8005db6:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8005dba:	9306      	str	r3, [sp, #24]
 8005dbc:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8005dc0:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8005dc4:	f8ad 6010 	strh.w	r6, [sp, #16]
 8005dc8:	f8ad 5012 	strh.w	r5, [sp, #18]
 8005dcc:	e9cd 3100 	strd	r3, r1, [sp]
 8005dd0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8005dd4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005dd8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8005ddc:	f88d 301c 	strb.w	r3, [sp, #28]
 8005de0:	f7ff fe46 	bl	8005a70 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8005de4:	4642      	mov	r2, r8
 8005de6:	4603      	mov	r3, r0
 8005de8:	4639      	mov	r1, r7
 8005dea:	4620      	mov	r0, r4
 8005dec:	f7ff ffc0 	bl	8005d70 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8005df0:	4b16      	ldr	r3, [pc, #88]	; (8005e4c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 8005df2:	9003      	str	r0, [sp, #12]
 8005df4:	881b      	ldrh	r3, [r3, #0]
 8005df6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005dfa:	f7ff fcef 	bl	80057dc <_ZN8touchgfx3HAL3lcdEv>
 8005dfe:	6803      	ldr	r3, [r0, #0]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	4798      	blx	r3
 8005e04:	f88d 001e 	strb.w	r0, [sp, #30]
 8005e08:	f88d 001d 	strb.w	r0, [sp, #29]
 8005e0c:	b106      	cbz	r6, 8005e10 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 8005e0e:	b935      	cbnz	r5, 8005e1e <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8005e10:	4b0f      	ldr	r3, [pc, #60]	; (8005e50 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 8005e12:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8005e16:	4a0f      	ldr	r2, [pc, #60]	; (8005e54 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8005e18:	480f      	ldr	r0, [pc, #60]	; (8005e58 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 8005e1a:	f004 f9cf 	bl	800a1bc <__assert_func>
 8005e1e:	6823      	ldr	r3, [r4, #0]
 8005e20:	4620      	mov	r0, r4
 8005e22:	9d00      	ldr	r5, [sp, #0]
 8005e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e26:	4798      	blx	r3
 8005e28:	4228      	tst	r0, r5
 8005e2a:	d104      	bne.n	8005e36 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8005e2c:	4b0b      	ldr	r3, [pc, #44]	; (8005e5c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8005e2e:	f240 11e1 	movw	r1, #481	; 0x1e1
 8005e32:	4a08      	ldr	r2, [pc, #32]	; (8005e54 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8005e34:	e7f0      	b.n	8005e18 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 8005e36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e38:	4669      	mov	r1, sp
 8005e3a:	6860      	ldr	r0, [r4, #4]
 8005e3c:	9306      	str	r3, [sp, #24]
 8005e3e:	6803      	ldr	r3, [r0, #0]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	4798      	blx	r3
 8005e44:	b008      	add	sp, #32
 8005e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e4a:	bf00      	nop
 8005e4c:	20001326 	.word	0x20001326
 8005e50:	0800c223 	.word	0x0800c223
 8005e54:	0800c390 	.word	0x0800c390
 8005e58:	0800c1a7 	.word	0x0800c1a7
 8005e5c:	0800c25b 	.word	0x0800c25b

08005e60 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8005e60:	b570      	push	{r4, r5, r6, lr}
 8005e62:	b08a      	sub	sp, #40	; 0x28
 8005e64:	4604      	mov	r4, r0
 8005e66:	466b      	mov	r3, sp
 8005e68:	e883 0006 	stmia.w	r3, {r1, r2}
 8005e6c:	4b1f      	ldr	r3, [pc, #124]	; (8005eec <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	b933      	cbnz	r3, 8005e80 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8005e72:	4b1f      	ldr	r3, [pc, #124]	; (8005ef0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8005e74:	f44f 7103 	mov.w	r1, #524	; 0x20c
 8005e78:	4a1e      	ldr	r2, [pc, #120]	; (8005ef4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8005e7a:	481f      	ldr	r0, [pc, #124]	; (8005ef8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8005e7c:	f004 f99e 	bl	800a1bc <__assert_func>
 8005e80:	2300      	movs	r3, #0
 8005e82:	f8bd 5000 	ldrh.w	r5, [sp]
 8005e86:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8005e8a:	9308      	str	r3, [sp, #32]
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	9302      	str	r3, [sp, #8]
 8005e90:	6803      	ldr	r3, [r0, #0]
 8005e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e94:	4798      	blx	r3
 8005e96:	4632      	mov	r2, r6
 8005e98:	4629      	mov	r1, r5
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	f7ff ff67 	bl	8005d70 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8005ea2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005ea4:	9003      	str	r0, [sp, #12]
 8005ea6:	9305      	str	r3, [sp, #20]
 8005ea8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005eac:	f8ad 3018 	strh.w	r3, [sp, #24]
 8005eb0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005eb4:	f8ad 301a 	strh.w	r3, [sp, #26]
 8005eb8:	4b10      	ldr	r3, [pc, #64]	; (8005efc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8005eba:	881b      	ldrh	r3, [r3, #0]
 8005ebc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8005ec0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005ec4:	f7ff fc8a 	bl	80057dc <_ZN8touchgfx3HAL3lcdEv>
 8005ec8:	6803      	ldr	r3, [r0, #0]
 8005eca:	6a1b      	ldr	r3, [r3, #32]
 8005ecc:	4798      	blx	r3
 8005ece:	23ff      	movs	r3, #255	; 0xff
 8005ed0:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8005ed4:	a902      	add	r1, sp, #8
 8005ed6:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8005eda:	6860      	ldr	r0, [r4, #4]
 8005edc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8005ee0:	6803      	ldr	r3, [r0, #0]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	4798      	blx	r3
 8005ee6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005ee8:	b00a      	add	sp, #40	; 0x28
 8005eea:	bd70      	pop	{r4, r5, r6, pc}
 8005eec:	2000132b 	.word	0x2000132b
 8005ef0:	0800c0f4 	.word	0x0800c0f4
 8005ef4:	0800c434 	.word	0x0800c434
 8005ef8:	0800c1a7 	.word	0x0800c1a7
 8005efc:	20001326 	.word	0x20001326

08005f00 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8005f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f02:	b08b      	sub	sp, #44	; 0x2c
 8005f04:	4604      	mov	r4, r0
 8005f06:	466d      	mov	r5, sp
 8005f08:	e885 0006 	stmia.w	r5, {r1, r2}
 8005f0c:	461d      	mov	r5, r3
 8005f0e:	2300      	movs	r3, #0
 8005f10:	f8bd 6000 	ldrh.w	r6, [sp]
 8005f14:	9308      	str	r3, [sp, #32]
 8005f16:	2301      	movs	r3, #1
 8005f18:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8005f1c:	9302      	str	r3, [sp, #8]
 8005f1e:	6803      	ldr	r3, [r0, #0]
 8005f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f22:	4798      	blx	r3
 8005f24:	463a      	mov	r2, r7
 8005f26:	4631      	mov	r1, r6
 8005f28:	4603      	mov	r3, r0
 8005f2a:	4620      	mov	r0, r4
 8005f2c:	f7ff ff20 	bl	8005d70 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8005f30:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005f34:	9003      	str	r0, [sp, #12]
 8005f36:	f8ad 3018 	strh.w	r3, [sp, #24]
 8005f3a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005f3e:	9505      	str	r5, [sp, #20]
 8005f40:	f8ad 301a 	strh.w	r3, [sp, #26]
 8005f44:	4b0d      	ldr	r3, [pc, #52]	; (8005f7c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 8005f46:	881b      	ldrh	r3, [r3, #0]
 8005f48:	f8ad 301c 	strh.w	r3, [sp, #28]
 8005f4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f4e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005f52:	f7ff fc43 	bl	80057dc <_ZN8touchgfx3HAL3lcdEv>
 8005f56:	6803      	ldr	r3, [r0, #0]
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	4798      	blx	r3
 8005f5c:	23ff      	movs	r3, #255	; 0xff
 8005f5e:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8005f62:	a902      	add	r1, sp, #8
 8005f64:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8005f68:	6860      	ldr	r0, [r4, #4]
 8005f6a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8005f6e:	6803      	ldr	r3, [r0, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	4798      	blx	r3
 8005f74:	4628      	mov	r0, r5
 8005f76:	b00b      	add	sp, #44	; 0x2c
 8005f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	20001326 	.word	0x20001326

08005f80 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8005f80:	b570      	push	{r4, r5, r6, lr}
 8005f82:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8005f86:	4604      	mov	r4, r0
 8005f88:	b19b      	cbz	r3, 8005fb2 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8005f8a:	2002      	movs	r0, #2
 8005f8c:	f7fd fdde 	bl	8003b4c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8005f90:	2300      	movs	r3, #0
 8005f92:	4620      	mov	r0, r4
 8005f94:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8005f98:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8005f9c:	6823      	ldr	r3, [r4, #0]
 8005f9e:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 8005fa2:	f7ff fd65 	bl	8005a70 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8005fa6:	4601      	mov	r1, r0
 8005fa8:	4620      	mov	r0, r4
 8005faa:	462b      	mov	r3, r5
 8005fac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005fb0:	4718      	bx	r3
 8005fb2:	bd70      	pop	{r4, r5, r6, pc}

08005fb4 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>:
 8005fb4:	b538      	push	{r3, r4, r5, lr}
 8005fb6:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 8005fba:	4604      	mov	r4, r0
 8005fbc:	460d      	mov	r5, r1
 8005fbe:	428a      	cmp	r2, r1
 8005fc0:	d008      	beq.n	8005fd4 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x20>
 8005fc2:	2a01      	cmp	r2, #1
 8005fc4:	6803      	ldr	r3, [r0, #0]
 8005fc6:	d106      	bne.n	8005fd6 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x22>
 8005fc8:	b929      	cbnz	r1, 8005fd6 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x22>
 8005fca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005fce:	4798      	blx	r3
 8005fd0:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8005fd4:	bd38      	pop	{r3, r4, r5, pc}
 8005fd6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005fda:	4620      	mov	r0, r4
 8005fdc:	e7f7      	b.n	8005fce <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE+0x1a>
	...

08005fe0 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8005fe0:	4b0d      	ldr	r3, [pc, #52]	; (8006018 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8005fe2:	b510      	push	{r4, lr}
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	4604      	mov	r4, r0
 8005fe8:	b95b      	cbnz	r3, 8006002 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8005fea:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d007      	beq.n	8006002 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8005ff2:	6840      	ldr	r0, [r0, #4]
 8005ff4:	f000 f936 	bl	8006264 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8005ff8:	b118      	cbz	r0, 8006002 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8005ffa:	6862      	ldr	r2, [r4, #4]
 8005ffc:	7a53      	ldrb	r3, [r2, #9]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d0fc      	beq.n	8005ffc <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8006002:	f7fd fed9 	bl	8003db8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8006006:	4620      	mov	r0, r4
 8006008:	2100      	movs	r1, #0
 800600a:	f7ff ffd3 	bl	8005fb4 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>
 800600e:	4620      	mov	r0, r4
 8006010:	f7ff fd2e 	bl	8005a70 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8006014:	bd10      	pop	{r4, pc}
 8006016:	bf00      	nop
 8006018:	2000132a 	.word	0x2000132a

0800601c <_ZN8touchgfx13DMA_Interface10initializeEv>:
 800601c:	4770      	bx	lr

0800601e <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 800601e:	2000      	movs	r0, #0
 8006020:	4770      	bx	lr

08006022 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8006022:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8006026:	1a13      	subs	r3, r2, r0
 8006028:	4258      	negs	r0, r3
 800602a:	4158      	adcs	r0, r3
 800602c:	4770      	bx	lr

0800602e <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800602e:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8006032:	1a9b      	subs	r3, r3, r2
 8006034:	2b00      	cmp	r3, #0
 8006036:	bfdc      	itt	le
 8006038:	6882      	ldrle	r2, [r0, #8]
 800603a:	189b      	addle	r3, r3, r2
 800603c:	2b01      	cmp	r3, #1
 800603e:	bfcc      	ite	gt
 8006040:	2000      	movgt	r0, #0
 8006042:	2001      	movle	r0, #1
 8006044:	4770      	bx	lr

08006046 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8006046:	6902      	ldr	r2, [r0, #16]
 8006048:	6840      	ldr	r0, [r0, #4]
 800604a:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 800604e:	4770      	bx	lr

08006050 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8006050:	6803      	ldr	r3, [r0, #0]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	4718      	bx	r3

08006056 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8006056:	4770      	bx	lr

08006058 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8006058:	4770      	bx	lr

0800605a <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800605a:	4770      	bx	lr

0800605c <_ZN8touchgfx13DMA_Interface7executeEv>:
 800605c:	2301      	movs	r3, #1
 800605e:	b570      	push	{r4, r5, r6, lr}
 8006060:	7203      	strb	r3, [r0, #8]
 8006062:	4604      	mov	r4, r0
 8006064:	6840      	ldr	r0, [r0, #4]
 8006066:	6803      	ldr	r3, [r0, #0]
 8006068:	699b      	ldr	r3, [r3, #24]
 800606a:	4798      	blx	r3
 800606c:	6803      	ldr	r3, [r0, #0]
 800606e:	4605      	mov	r5, r0
 8006070:	2b08      	cmp	r3, #8
 8006072:	d01e      	beq.n	80060b2 <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 8006074:	d80b      	bhi.n	800608e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8006076:	2b02      	cmp	r3, #2
 8006078:	d027      	beq.n	80060ca <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 800607a:	2b04      	cmp	r3, #4
 800607c:	d011      	beq.n	80060a2 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 800607e:	2b01      	cmp	r3, #1
 8006080:	d028      	beq.n	80060d4 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8006082:	4b17      	ldr	r3, [pc, #92]	; (80060e0 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 8006084:	218c      	movs	r1, #140	; 0x8c
 8006086:	4a17      	ldr	r2, [pc, #92]	; (80060e4 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 8006088:	4817      	ldr	r0, [pc, #92]	; (80060e8 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 800608a:	f004 f897 	bl	800a1bc <__assert_func>
 800608e:	2b40      	cmp	r3, #64	; 0x40
 8006090:	d020      	beq.n	80060d4 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8006092:	d801      	bhi.n	8006098 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8006094:	2b20      	cmp	r3, #32
 8006096:	e7f3      	b.n	8006080 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8006098:	2b80      	cmp	r3, #128	; 0x80
 800609a:	d01b      	beq.n	80060d4 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800609c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060a0:	e7ee      	b.n	8006080 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 80060a2:	6823      	ldr	r3, [r4, #0]
 80060a4:	7f01      	ldrb	r1, [r0, #28]
 80060a6:	4620      	mov	r0, r4
 80060a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060aa:	4798      	blx	r3
 80060ac:	6823      	ldr	r3, [r4, #0]
 80060ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b0:	e006      	b.n	80060c0 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 80060b2:	6823      	ldr	r3, [r4, #0]
 80060b4:	7f01      	ldrb	r1, [r0, #28]
 80060b6:	4620      	mov	r0, r4
 80060b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ba:	4798      	blx	r3
 80060bc:	6823      	ldr	r3, [r4, #0]
 80060be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060c0:	4629      	mov	r1, r5
 80060c2:	4620      	mov	r0, r4
 80060c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80060c8:	4718      	bx	r3
 80060ca:	6823      	ldr	r3, [r4, #0]
 80060cc:	4620      	mov	r0, r4
 80060ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060d0:	4798      	blx	r3
 80060d2:	e7f3      	b.n	80060bc <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 80060d4:	6823      	ldr	r3, [r4, #0]
 80060d6:	4620      	mov	r0, r4
 80060d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060da:	4798      	blx	r3
 80060dc:	e7e6      	b.n	80060ac <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 80060de:	bf00      	nop
 80060e0:	0800c685 	.word	0x0800c685
 80060e4:	0800c794 	.word	0x0800c794
 80060e8:	0800c6aa 	.word	0x0800c6aa

080060ec <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80060ec:	b570      	push	{r4, r5, r6, lr}
 80060ee:	4604      	mov	r4, r0
 80060f0:	460e      	mov	r6, r1
 80060f2:	6860      	ldr	r0, [r4, #4]
 80060f4:	6803      	ldr	r3, [r0, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	4798      	blx	r3
 80060fa:	2800      	cmp	r0, #0
 80060fc:	d1f9      	bne.n	80060f2 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80060fe:	4d0d      	ldr	r5, [pc, #52]	; (8006134 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8006100:	6828      	ldr	r0, [r5, #0]
 8006102:	6803      	ldr	r3, [r0, #0]
 8006104:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006106:	4798      	blx	r3
 8006108:	f7fd fe66 	bl	8003dd8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800610c:	6828      	ldr	r0, [r5, #0]
 800610e:	2101      	movs	r1, #1
 8006110:	f7ff ff50 	bl	8005fb4 <_ZN8touchgfx3HAL19setRenderingVariantENS0_16RenderingVariantE>
 8006114:	6860      	ldr	r0, [r4, #4]
 8006116:	4631      	mov	r1, r6
 8006118:	6803      	ldr	r3, [r0, #0]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	4798      	blx	r3
 800611e:	6823      	ldr	r3, [r4, #0]
 8006120:	4620      	mov	r0, r4
 8006122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006124:	4798      	blx	r3
 8006126:	6828      	ldr	r0, [r5, #0]
 8006128:	6803      	ldr	r3, [r0, #0]
 800612a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800612e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006130:	4718      	bx	r3
 8006132:	bf00      	nop
 8006134:	2000132c 	.word	0x2000132c

08006138 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8006138:	b508      	push	{r3, lr}
 800613a:	f7fd fe3d 	bl	8003db8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800613e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006142:	f7fd be43 	b.w	8003dcc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08006146 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8006146:	b510      	push	{r4, lr}
 8006148:	4604      	mov	r4, r0
 800614a:	2114      	movs	r1, #20
 800614c:	f003 ffda 	bl	800a104 <_ZdlPvj>
 8006150:	4620      	mov	r0, r4
 8006152:	bd10      	pop	{r4, pc}

08006154 <_ZN8touchgfx13DMA_Interface5startEv>:
 8006154:	b510      	push	{r4, lr}
 8006156:	4604      	mov	r4, r0
 8006158:	6840      	ldr	r0, [r0, #4]
 800615a:	6803      	ldr	r3, [r0, #0]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4798      	blx	r3
 8006160:	b948      	cbnz	r0, 8006176 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8006162:	7a63      	ldrb	r3, [r4, #9]
 8006164:	b13b      	cbz	r3, 8006176 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8006166:	7a23      	ldrb	r3, [r4, #8]
 8006168:	b92b      	cbnz	r3, 8006176 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800616a:	6823      	ldr	r3, [r4, #0]
 800616c:	4620      	mov	r0, r4
 800616e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006174:	4718      	bx	r3
 8006176:	bd10      	pop	{r4, pc}

08006178 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8006178:	b510      	push	{r4, lr}
 800617a:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 800617e:	1b12      	subs	r2, r2, r4
 8006180:	2a00      	cmp	r2, #0
 8006182:	bfdc      	itt	le
 8006184:	6883      	ldrle	r3, [r0, #8]
 8006186:	18d2      	addle	r2, r2, r3
 8006188:	2a01      	cmp	r2, #1
 800618a:	dd18      	ble.n	80061be <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 800618c:	6843      	ldr	r3, [r0, #4]
 800618e:	f101 021c 	add.w	r2, r1, #28
 8006192:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8006196:	f851 4b04 	ldr.w	r4, [r1], #4
 800619a:	4291      	cmp	r1, r2
 800619c:	f843 4b04 	str.w	r4, [r3], #4
 80061a0:	d1f9      	bne.n	8006196 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 80061a2:	880a      	ldrh	r2, [r1, #0]
 80061a4:	801a      	strh	r2, [r3, #0]
 80061a6:	788a      	ldrb	r2, [r1, #2]
 80061a8:	709a      	strb	r2, [r3, #2]
 80061aa:	68c3      	ldr	r3, [r0, #12]
 80061ac:	6882      	ldr	r2, [r0, #8]
 80061ae:	f3bf 8f5b 	dmb	ish
 80061b2:	3301      	adds	r3, #1
 80061b4:	429a      	cmp	r2, r3
 80061b6:	bfd8      	it	le
 80061b8:	1a9b      	suble	r3, r3, r2
 80061ba:	60c3      	str	r3, [r0, #12]
 80061bc:	bd10      	pop	{r4, pc}
 80061be:	4b03      	ldr	r3, [pc, #12]	; (80061cc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 80061c0:	2139      	movs	r1, #57	; 0x39
 80061c2:	4a03      	ldr	r2, [pc, #12]	; (80061d0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 80061c4:	4803      	ldr	r0, [pc, #12]	; (80061d4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 80061c6:	f003 fff9 	bl	800a1bc <__assert_func>
 80061ca:	bf00      	nop
 80061cc:	0800c6d0 	.word	0x0800c6d0
 80061d0:	0800c7c4 	.word	0x0800c7c4
 80061d4:	0800c6aa 	.word	0x0800c6aa

080061d8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80061d8:	b510      	push	{r4, lr}
 80061da:	6803      	ldr	r3, [r0, #0]
 80061dc:	4604      	mov	r4, r0
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4798      	blx	r3
 80061e2:	b128      	cbz	r0, 80061f0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 80061e4:	4b07      	ldr	r3, [pc, #28]	; (8006204 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 80061e6:	213f      	movs	r1, #63	; 0x3f
 80061e8:	4a07      	ldr	r2, [pc, #28]	; (8006208 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 80061ea:	4808      	ldr	r0, [pc, #32]	; (800620c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 80061ec:	f003 ffe6 	bl	800a1bc <__assert_func>
 80061f0:	6923      	ldr	r3, [r4, #16]
 80061f2:	68a2      	ldr	r2, [r4, #8]
 80061f4:	f3bf 8f5b 	dmb	ish
 80061f8:	3301      	adds	r3, #1
 80061fa:	429a      	cmp	r2, r3
 80061fc:	bfd8      	it	le
 80061fe:	1a9b      	suble	r3, r3, r2
 8006200:	6123      	str	r3, [r4, #16]
 8006202:	bd10      	pop	{r4, pc}
 8006204:	0800c6f3 	.word	0x0800c6f3
 8006208:	0800c812 	.word	0x0800c812
 800620c:	0800c6aa 	.word	0x0800c6aa

08006210 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8006210:	b570      	push	{r4, r5, r6, lr}
 8006212:	4604      	mov	r4, r0
 8006214:	6840      	ldr	r0, [r0, #4]
 8006216:	6803      	ldr	r3, [r0, #0]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4798      	blx	r3
 800621c:	4605      	mov	r5, r0
 800621e:	b930      	cbnz	r0, 800622e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8006220:	7a23      	ldrb	r3, [r4, #8]
 8006222:	b123      	cbz	r3, 800622e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8006224:	6860      	ldr	r0, [r4, #4]
 8006226:	6803      	ldr	r3, [r0, #0]
 8006228:	695b      	ldr	r3, [r3, #20]
 800622a:	4798      	blx	r3
 800622c:	7225      	strb	r5, [r4, #8]
 800622e:	6860      	ldr	r0, [r4, #4]
 8006230:	6803      	ldr	r3, [r0, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4798      	blx	r3
 8006236:	b928      	cbnz	r0, 8006244 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8006238:	6823      	ldr	r3, [r4, #0]
 800623a:	4620      	mov	r0, r4
 800623c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006242:	4718      	bx	r3
 8006244:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006248:	f7fd bdcc 	b.w	8003de4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800624c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800624c:	b510      	push	{r4, lr}
 800624e:	6082      	str	r2, [r0, #8]
 8006250:	2200      	movs	r2, #0
 8006252:	4c03      	ldr	r4, [pc, #12]	; (8006260 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8006254:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8006258:	e9c0 4100 	strd	r4, r1, [r0]
 800625c:	bd10      	pop	{r4, pc}
 800625e:	bf00      	nop
 8006260:	0800c778 	.word	0x0800c778

08006264 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8006264:	6840      	ldr	r0, [r0, #4]
 8006266:	6803      	ldr	r3, [r0, #0]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4718      	bx	r3

0800626c <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800626c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006270:	4696      	mov	lr, r2
 8006272:	b097      	sub	sp, #92	; 0x5c
 8006274:	4605      	mov	r5, r0
 8006276:	4614      	mov	r4, r2
 8006278:	460e      	mov	r6, r1
 800627a:	461f      	mov	r7, r3
 800627c:	f10d 0c1c 	add.w	ip, sp, #28
 8006280:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8006284:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8006288:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 800628c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8006290:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006294:	f8de 3000 	ldr.w	r3, [lr]
 8006298:	f104 0e14 	add.w	lr, r4, #20
 800629c:	f8cc 3000 	str.w	r3, [ip]
 80062a0:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80062a4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80062a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80062ac:	f8de 3000 	ldr.w	r3, [lr]
 80062b0:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80062b4:	f8cc 3000 	str.w	r3, [ip]
 80062b8:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80062bc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80062c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80062c4:	f8de 3000 	ldr.w	r3, [lr]
 80062c8:	4631      	mov	r1, r6
 80062ca:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80062cc:	4628      	mov	r0, r5
 80062ce:	f8cc 3000 	str.w	r3, [ip]
 80062d2:	682b      	ldr	r3, [r5, #0]
 80062d4:	9201      	str	r2, [sp, #4]
 80062d6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80062d8:	f8cd 8008 	str.w	r8, [sp, #8]
 80062dc:	9200      	str	r2, [sp, #0]
 80062de:	aa07      	add	r2, sp, #28
 80062e0:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80062e4:	f8d3 b038 	ldr.w	fp, [r3, #56]	; 0x38
 80062e8:	463b      	mov	r3, r7
 80062ea:	47d8      	blx	fp
 80062ec:	46a6      	mov	lr, r4
 80062ee:	f10d 0c1c 	add.w	ip, sp, #28
 80062f2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80062f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80062fa:	f8de 3000 	ldr.w	r3, [lr]
 80062fe:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8006302:	343c      	adds	r4, #60	; 0x3c
 8006304:	f8cc 3000 	str.w	r3, [ip]
 8006308:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800630c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8006310:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006314:	f8de 3000 	ldr.w	r3, [lr]
 8006318:	f8cc 3000 	str.w	r3, [ip]
 800631c:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8006320:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006322:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006326:	6823      	ldr	r3, [r4, #0]
 8006328:	4631      	mov	r1, r6
 800632a:	4628      	mov	r0, r5
 800632c:	f8cc 3000 	str.w	r3, [ip]
 8006330:	682b      	ldr	r3, [r5, #0]
 8006332:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8006336:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006338:	f8cd 8008 	str.w	r8, [sp, #8]
 800633c:	9201      	str	r2, [sp, #4]
 800633e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006340:	9200      	str	r2, [sp, #0]
 8006342:	aa07      	add	r2, sp, #28
 8006344:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8006346:	463b      	mov	r3, r7
 8006348:	47a0      	blx	r4
 800634a:	b017      	add	sp, #92	; 0x5c
 800634c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006350 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8006350:	2000      	movs	r0, #0
 8006352:	4770      	bx	lr

08006354 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8006354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006358:	b08d      	sub	sp, #52	; 0x34
 800635a:	4688      	mov	r8, r1
 800635c:	f8d3 c000 	ldr.w	ip, [r3]
 8006360:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006362:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8006366:	680f      	ldr	r7, [r1, #0]
 8006368:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 800636c:	eba7 070c 	sub.w	r7, r7, ip
 8006370:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8006374:	edd3 6a07 	vldr	s13, [r3, #28]
 8006378:	42bc      	cmp	r4, r7
 800637a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800637c:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8006380:	bfa8      	it	ge
 8006382:	463c      	movge	r4, r7
 8006384:	f9b1 9000 	ldrsh.w	r9, [r1]
 8006388:	f9ba 1000 	ldrsh.w	r1, [sl]
 800638c:	ee07 4a90 	vmov	s15, r4
 8006390:	eb09 0e0c 	add.w	lr, r9, ip
 8006394:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8006398:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800639c:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80063a0:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 80063a4:	4571      	cmp	r1, lr
 80063a6:	ee25 4a04 	vmul.f32	s8, s10, s8
 80063aa:	ee65 4a24 	vmul.f32	s9, s10, s9
 80063ae:	ee25 5a27 	vmul.f32	s10, s10, s15
 80063b2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80063b6:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80063ba:	ee32 1a05 	vadd.f32	s2, s4, s10
 80063be:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80063c2:	ee36 0a84 	vadd.f32	s0, s13, s8
 80063c6:	ee61 1a87 	vmul.f32	s3, s3, s14
 80063ca:	ee22 2a07 	vmul.f32	s4, s4, s14
 80063ce:	f340 808c 	ble.w	80064ea <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 80063d2:	eba1 060e 	sub.w	r6, r1, lr
 80063d6:	fb96 f5f4 	sdiv	r5, r6, r4
 80063da:	ee07 5a10 	vmov	s14, r5
 80063de:	2d00      	cmp	r5, #0
 80063e0:	fb04 6615 	mls	r6, r4, r5, r6
 80063e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80063e8:	eea7 0a04 	vfma.f32	s0, s14, s8
 80063ec:	eee7 0a24 	vfma.f32	s1, s14, s9
 80063f0:	eea7 1a05 	vfma.f32	s2, s14, s10
 80063f4:	dd12      	ble.n	800641c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 80063f6:	ee70 6a44 	vsub.f32	s13, s0, s8
 80063fa:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80063fe:	ee31 2a45 	vsub.f32	s4, s2, s10
 8006402:	eef5 6a40 	vcmp.f32	s13, #0.0
 8006406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800640a:	bf14      	ite	ne
 800640c:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8006410:	eeb0 7a67 	vmoveq.f32	s14, s15
 8006414:	ee61 1a87 	vmul.f32	s3, s3, s14
 8006418:	ee22 2a07 	vmul.f32	s4, s4, s14
 800641c:	fb05 f204 	mul.w	r2, r5, r4
 8006420:	1abf      	subs	r7, r7, r2
 8006422:	4494      	add	ip, r2
 8006424:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8006428:	4411      	add	r1, r2
 800642a:	eb09 020c 	add.w	r2, r9, ip
 800642e:	b209      	sxth	r1, r1
 8006430:	443a      	add	r2, r7
 8006432:	428a      	cmp	r2, r1
 8006434:	bfc4      	itt	gt
 8006436:	eba1 0209 	subgt.w	r2, r1, r9
 800643a:	eba2 070c 	subgt.w	r7, r2, ip
 800643e:	2f00      	cmp	r7, #0
 8006440:	dd50      	ble.n	80064e4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8006442:	fb97 f1f4 	sdiv	r1, r7, r4
 8006446:	fb04 7211 	mls	r2, r4, r1, r7
 800644a:	b90a      	cbnz	r2, 8006450 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 800644c:	3901      	subs	r1, #1
 800644e:	4622      	mov	r2, r4
 8006450:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8006454:	6840      	ldr	r0, [r0, #4]
 8006456:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 800645a:	44b6      	add	lr, r6
 800645c:	f8d0 a000 	ldr.w	sl, [r0]
 8006460:	2900      	cmp	r1, #0
 8006462:	bfcc      	ite	gt
 8006464:	46a1      	movgt	r9, r4
 8006466:	4691      	movle	r9, r2
 8006468:	900b      	str	r0, [sp, #44]	; 0x2c
 800646a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800646c:	fb04 e505 	mla	r5, r4, r5, lr
 8006470:	eef0 6a42 	vmov.f32	s13, s4
 8006474:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8006478:	9008      	str	r0, [sp, #32]
 800647a:	eeb0 7a61 	vmov.f32	s14, s3
 800647e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8006486:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 800648a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 800648e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006490:	445b      	add	r3, fp
 8006492:	9307      	str	r3, [sp, #28]
 8006494:	ee16 3a90 	vmov	r3, s13
 8006498:	e9cd 8505 	strd	r8, r5, [sp, #20]
 800649c:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80064a0:	ee21 3a23 	vmul.f32	s6, s2, s7
 80064a4:	ee72 7ae1 	vsub.f32	s15, s5, s3
 80064a8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80064ac:	ee17 7a90 	vmov	r7, s15
 80064b0:	ee73 7a42 	vsub.f32	s15, s6, s4
 80064b4:	fb97 f7f4 	sdiv	r7, r7, r4
 80064b8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80064bc:	ee17 ca90 	vmov	ip, s15
 80064c0:	fb9c fcf4 	sdiv	ip, ip, r4
 80064c4:	fb0c 3306 	mla	r3, ip, r6, r3
 80064c8:	9302      	str	r3, [sp, #8]
 80064ca:	ee17 3a10 	vmov	r3, s14
 80064ce:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 80064d2:	fb07 3706 	mla	r7, r7, r6, r3
 80064d6:	eba9 0306 	sub.w	r3, r9, r6
 80064da:	e9cd 4700 	strd	r4, r7, [sp]
 80064de:	f8da 4008 	ldr.w	r4, [sl, #8]
 80064e2:	47a0      	blx	r4
 80064e4:	b00d      	add	sp, #52	; 0x34
 80064e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ea:	2500      	movs	r5, #0
 80064ec:	462e      	mov	r6, r5
 80064ee:	e799      	b.n	8006424 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

080064f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80064f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064f4:	b0db      	sub	sp, #364	; 0x16c
 80064f6:	461d      	mov	r5, r3
 80064f8:	4614      	mov	r4, r2
 80064fa:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 80064fe:	910f      	str	r1, [sp, #60]	; 0x3c
 8006500:	4629      	mov	r1, r5
 8006502:	930a      	str	r3, [sp, #40]	; 0x28
 8006504:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8006508:	9009      	str	r0, [sp, #36]	; 0x24
 800650a:	930b      	str	r3, [sp, #44]	; 0x2c
 800650c:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8006510:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8006514:	9310      	str	r3, [sp, #64]	; 0x40
 8006516:	6803      	ldr	r3, [r0, #0]
 8006518:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 800651a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800651e:	47b8      	blx	r7
 8006520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006522:	6058      	str	r0, [r3, #4]
 8006524:	2800      	cmp	r0, #0
 8006526:	f000 83a1 	beq.w	8006c6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800652a:	682b      	ldr	r3, [r5, #0]
 800652c:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8006530:	ed94 7a02 	vldr	s14, [r4, #8]
 8006534:	9314      	str	r3, [sp, #80]	; 0x50
 8006536:	686b      	ldr	r3, [r5, #4]
 8006538:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800653c:	9315      	str	r3, [sp, #84]	; 0x54
 800653e:	4bc1      	ldr	r3, [pc, #772]	; (8006844 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8006540:	7819      	ldrb	r1, [r3, #0]
 8006542:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8006546:	2900      	cmp	r1, #0
 8006548:	bf16      	itet	ne
 800654a:	4619      	movne	r1, r3
 800654c:	4611      	moveq	r1, r2
 800654e:	4613      	movne	r3, r2
 8006550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006554:	9116      	str	r1, [sp, #88]	; 0x58
 8006556:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 800655a:	f240 8387 	bls.w	8006c6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800655e:	ed94 7a07 	vldr	s14, [r4, #28]
 8006562:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800656a:	f240 837f 	bls.w	8006c6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800656e:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8006572:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800657a:	f240 8377 	bls.w	8006c6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800657e:	6822      	ldr	r2, [r4, #0]
 8006580:	4bb1      	ldr	r3, [pc, #708]	; (8006848 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8006582:	429a      	cmp	r2, r3
 8006584:	f2c0 8372 	blt.w	8006c6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8006588:	49b0      	ldr	r1, [pc, #704]	; (800684c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 800658a:	6963      	ldr	r3, [r4, #20]
 800658c:	428a      	cmp	r2, r1
 800658e:	f300 836d 	bgt.w	8006c6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8006592:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8006596:	48ae      	ldr	r0, [pc, #696]	; (8006850 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8006598:	33ff      	adds	r3, #255	; 0xff
 800659a:	4283      	cmp	r3, r0
 800659c:	f200 8366 	bhi.w	8006c6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80065a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80065a2:	4dac      	ldr	r5, [pc, #688]	; (8006854 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 80065a4:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 80065a8:	33ff      	adds	r3, #255	; 0xff
 80065aa:	42ab      	cmp	r3, r5
 80065ac:	f200 835e 	bhi.w	8006c6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80065b0:	6862      	ldr	r2, [r4, #4]
 80065b2:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 80065b6:	33ff      	adds	r3, #255	; 0xff
 80065b8:	4283      	cmp	r3, r0
 80065ba:	f200 8357 	bhi.w	8006c6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80065be:	69a1      	ldr	r1, [r4, #24]
 80065c0:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 80065c4:	33ff      	adds	r3, #255	; 0xff
 80065c6:	4283      	cmp	r3, r0
 80065c8:	f200 8350 	bhi.w	8006c6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80065cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80065ce:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 80065d2:	30ff      	adds	r0, #255	; 0xff
 80065d4:	42a8      	cmp	r0, r5
 80065d6:	f200 8349 	bhi.w	8006c6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80065da:	428a      	cmp	r2, r1
 80065dc:	f280 8110 	bge.w	8006800 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 80065e0:	429a      	cmp	r2, r3
 80065e2:	f300 8119 	bgt.w	8006818 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 80065e6:	4299      	cmp	r1, r3
 80065e8:	f280 811d 	bge.w	8006826 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 80065ec:	2502      	movs	r5, #2
 80065ee:	2701      	movs	r7, #1
 80065f0:	46a9      	mov	r9, r5
 80065f2:	46b8      	mov	r8, r7
 80065f4:	f04f 0a00 	mov.w	sl, #0
 80065f8:	4621      	mov	r1, r4
 80065fa:	a849      	add	r0, sp, #292	; 0x124
 80065fc:	f001 fc00 	bl	8007e00 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8006600:	4622      	mov	r2, r4
 8006602:	4653      	mov	r3, sl
 8006604:	a949      	add	r1, sp, #292	; 0x124
 8006606:	f8cd 9000 	str.w	r9, [sp]
 800660a:	a819      	add	r0, sp, #100	; 0x64
 800660c:	f001 fd28 	bl	8008060 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8006610:	4622      	mov	r2, r4
 8006612:	4653      	mov	r3, sl
 8006614:	a949      	add	r1, sp, #292	; 0x124
 8006616:	f8cd 8000 	str.w	r8, [sp]
 800661a:	a829      	add	r0, sp, #164	; 0xa4
 800661c:	f001 fd20 	bl	8008060 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8006620:	4643      	mov	r3, r8
 8006622:	4622      	mov	r2, r4
 8006624:	a949      	add	r1, sp, #292	; 0x124
 8006626:	f8cd 9000 	str.w	r9, [sp]
 800662a:	a839      	add	r0, sp, #228	; 0xe4
 800662c:	f001 fd18 	bl	8008060 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8006630:	42af      	cmp	r7, r5
 8006632:	af12      	add	r7, sp, #72	; 0x48
 8006634:	bfb7      	itett	lt
 8006636:	2300      	movlt	r3, #0
 8006638:	2301      	movge	r3, #1
 800663a:	ad29      	addlt	r5, sp, #164	; 0xa4
 800663c:	ac19      	addlt	r4, sp, #100	; 0x64
 800663e:	bfb1      	iteee	lt
 8006640:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006642:	ad19      	addge	r5, sp, #100	; 0x64
 8006644:	930e      	strge	r3, [sp, #56]	; 0x38
 8006646:	ac29      	addge	r4, sp, #164	; 0xa4
 8006648:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800664a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800664e:	e887 0003 	stmia.w	r7, {r0, r1}
 8006652:	b928      	cbnz	r0, 8006660 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8006654:	4b80      	ldr	r3, [pc, #512]	; (8006858 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8006656:	6818      	ldr	r0, [r3, #0]
 8006658:	6803      	ldr	r3, [r0, #0]
 800665a:	6a1b      	ldr	r3, [r3, #32]
 800665c:	4798      	blx	r3
 800665e:	6038      	str	r0, [r7, #0]
 8006660:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8006662:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8006666:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800666a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800666c:	930c      	str	r3, [sp, #48]	; 0x30
 800666e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006670:	6963      	ldr	r3, [r4, #20]
 8006672:	440b      	add	r3, r1
 8006674:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8006678:	4408      	add	r0, r1
 800667a:	b200      	sxth	r0, r0
 800667c:	4283      	cmp	r3, r0
 800667e:	900d      	str	r0, [sp, #52]	; 0x34
 8006680:	f280 80dd 	bge.w	800683e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8006684:	428b      	cmp	r3, r1
 8006686:	da08      	bge.n	800669a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8006688:	2a00      	cmp	r2, #0
 800668a:	dd06      	ble.n	800669a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800668c:	1acb      	subs	r3, r1, r3
 800668e:	429a      	cmp	r2, r3
 8006690:	f2c0 80e4 	blt.w	800685c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8006694:	2b00      	cmp	r3, #0
 8006696:	f300 80e2 	bgt.w	800685e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 800669a:	6967      	ldr	r7, [r4, #20]
 800669c:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80066a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066a2:	443b      	add	r3, r7
 80066a4:	461f      	mov	r7, r3
 80066a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066a8:	1bdf      	subs	r7, r3, r7
 80066aa:	4297      	cmp	r7, r2
 80066ac:	bfa8      	it	ge
 80066ae:	4617      	movge	r7, r2
 80066b0:	2f00      	cmp	r7, #0
 80066b2:	f340 8166 	ble.w	8006982 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 80066b6:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80066b8:	6829      	ldr	r1, [r5, #0]
 80066ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 80066be:	f9bb 3000 	ldrsh.w	r3, [fp]
 80066c2:	4411      	add	r1, r2
 80066c4:	6820      	ldr	r0, [r4, #0]
 80066c6:	4299      	cmp	r1, r3
 80066c8:	dd1a      	ble.n	8006700 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80066ca:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80066ce:	4402      	add	r2, r0
 80066d0:	440b      	add	r3, r1
 80066d2:	b21b      	sxth	r3, r3
 80066d4:	429a      	cmp	r2, r3
 80066d6:	dc13      	bgt.n	8006700 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80066d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80066da:	a912      	add	r1, sp, #72	; 0x48
 80066dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	9206      	str	r2, [sp, #24]
 80066e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80066e6:	9500      	str	r5, [sp, #0]
 80066e8:	9205      	str	r2, [sp, #20]
 80066ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066ec:	e9cd b203 	strd	fp, r2, [sp, #12]
 80066f0:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80066f2:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80066f6:	aa49      	add	r2, sp, #292	; 0x124
 80066f8:	f8d3 9044 	ldr.w	r9, [r3, #68]	; 0x44
 80066fc:	4623      	mov	r3, r4
 80066fe:	47c8      	blx	r9
 8006700:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8006704:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8006708:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800670c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006710:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8006714:	68a1      	ldr	r1, [r4, #8]
 8006716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800671a:	ed94 6a08 	vldr	s12, [r4, #32]
 800671e:	edd4 6a07 	vldr	s13, [r4, #28]
 8006722:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8006726:	ee76 6a86 	vadd.f32	s13, s13, s12
 800672a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800672e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006732:	edc4 6a07 	vstr	s13, [r4, #28]
 8006736:	441a      	add	r2, r3
 8006738:	6963      	ldr	r3, [r4, #20]
 800673a:	3301      	adds	r3, #1
 800673c:	6022      	str	r2, [r4, #0]
 800673e:	6163      	str	r3, [r4, #20]
 8006740:	69a3      	ldr	r3, [r4, #24]
 8006742:	3b01      	subs	r3, #1
 8006744:	61a3      	str	r3, [r4, #24]
 8006746:	6923      	ldr	r3, [r4, #16]
 8006748:	440b      	add	r3, r1
 800674a:	68e1      	ldr	r1, [r4, #12]
 800674c:	428b      	cmp	r3, r1
 800674e:	6123      	str	r3, [r4, #16]
 8006750:	db15      	blt.n	800677e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8006752:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8006756:	3201      	adds	r2, #1
 8006758:	1a5b      	subs	r3, r3, r1
 800675a:	ee76 6a26 	vadd.f32	s13, s12, s13
 800675e:	6022      	str	r2, [r4, #0]
 8006760:	6123      	str	r3, [r4, #16]
 8006762:	edc4 6a07 	vstr	s13, [r4, #28]
 8006766:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800676a:	ee36 7a87 	vadd.f32	s14, s13, s14
 800676e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8006772:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8006776:	ee77 7a27 	vadd.f32	s15, s14, s15
 800677a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800677e:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8006782:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8006786:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800678a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800678e:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8006792:	68a9      	ldr	r1, [r5, #8]
 8006794:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006798:	ed95 6a08 	vldr	s12, [r5, #32]
 800679c:	edd5 6a07 	vldr	s13, [r5, #28]
 80067a0:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80067a4:	ee76 6a86 	vadd.f32	s13, s13, s12
 80067a8:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80067ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 80067b0:	edc5 6a07 	vstr	s13, [r5, #28]
 80067b4:	441a      	add	r2, r3
 80067b6:	696b      	ldr	r3, [r5, #20]
 80067b8:	3301      	adds	r3, #1
 80067ba:	602a      	str	r2, [r5, #0]
 80067bc:	616b      	str	r3, [r5, #20]
 80067be:	69ab      	ldr	r3, [r5, #24]
 80067c0:	3b01      	subs	r3, #1
 80067c2:	61ab      	str	r3, [r5, #24]
 80067c4:	692b      	ldr	r3, [r5, #16]
 80067c6:	440b      	add	r3, r1
 80067c8:	68e9      	ldr	r1, [r5, #12]
 80067ca:	428b      	cmp	r3, r1
 80067cc:	612b      	str	r3, [r5, #16]
 80067ce:	db15      	blt.n	80067fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 80067d0:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80067d4:	3201      	adds	r2, #1
 80067d6:	1a5b      	subs	r3, r3, r1
 80067d8:	ee76 6a26 	vadd.f32	s13, s12, s13
 80067dc:	602a      	str	r2, [r5, #0]
 80067de:	612b      	str	r3, [r5, #16]
 80067e0:	edc5 6a07 	vstr	s13, [r5, #28]
 80067e4:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 80067e8:	ee36 7a87 	vadd.f32	s14, s13, s14
 80067ec:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80067f0:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80067f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067f8:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80067fc:	3f01      	subs	r7, #1
 80067fe:	e757      	b.n	80066b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8006800:	4299      	cmp	r1, r3
 8006802:	dc13      	bgt.n	800682c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8006804:	429a      	cmp	r2, r3
 8006806:	da14      	bge.n	8006832 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8006808:	2502      	movs	r5, #2
 800680a:	2703      	movs	r7, #3
 800680c:	f04f 0800 	mov.w	r8, #0
 8006810:	46a9      	mov	r9, r5
 8006812:	f04f 0a01 	mov.w	sl, #1
 8006816:	e6ef      	b.n	80065f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8006818:	2501      	movs	r5, #1
 800681a:	2700      	movs	r7, #0
 800681c:	46a9      	mov	r9, r5
 800681e:	46b8      	mov	r8, r7
 8006820:	f04f 0a02 	mov.w	sl, #2
 8006824:	e6e8      	b.n	80065f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8006826:	2501      	movs	r5, #1
 8006828:	2702      	movs	r7, #2
 800682a:	e6e1      	b.n	80065f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 800682c:	2500      	movs	r5, #0
 800682e:	2701      	movs	r7, #1
 8006830:	e7f4      	b.n	800681c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8006832:	2702      	movs	r7, #2
 8006834:	2503      	movs	r5, #3
 8006836:	f04f 0900 	mov.w	r9, #0
 800683a:	46b8      	mov	r8, r7
 800683c:	e7e9      	b.n	8006812 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 800683e:	4613      	mov	r3, r2
 8006840:	e728      	b.n	8006694 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8006842:	bf00      	nop
 8006844:	20001324 	.word	0x20001324
 8006848:	fffd8f01 	.word	0xfffd8f01
 800684c:	00027100 	.word	0x00027100
 8006850:	0004e1ff 	.word	0x0004e1ff
 8006854:	0004e1fe 	.word	0x0004e1fe
 8006858:	2000132c 	.word	0x2000132c
 800685c:	4613      	mov	r3, r2
 800685e:	992b      	ldr	r1, [sp, #172]	; 0xac
 8006860:	469e      	mov	lr, r3
 8006862:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8006864:	469c      	mov	ip, r3
 8006866:	9111      	str	r1, [sp, #68]	; 0x44
 8006868:	f04f 0900 	mov.w	r9, #0
 800686c:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8006870:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8006874:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8006878:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 800687c:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8006880:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8006884:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8006888:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 800688c:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8006890:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8006894:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8006898:	f1bc 0f00 	cmp.w	ip, #0
 800689c:	d147      	bne.n	800692e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 800689e:	eb03 0c07 	add.w	ip, r3, r7
 80068a2:	1ad7      	subs	r7, r2, r3
 80068a4:	f1b9 0f00 	cmp.w	r9, #0
 80068a8:	d009      	beq.n	80068be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 80068aa:	9029      	str	r0, [sp, #164]	; 0xa4
 80068ac:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 80068b0:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 80068b4:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 80068b8:	912d      	str	r1, [sp, #180]	; 0xb4
 80068ba:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 80068be:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80068c0:	f04f 0800 	mov.w	r8, #0
 80068c4:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 80068c8:	9111      	str	r1, [sp, #68]	; 0x44
 80068ca:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 80068ce:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 80068d2:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80068d6:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 80068da:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 80068de:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 80068e2:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 80068e6:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80068ea:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80068ee:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 80068f2:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80068f6:	f1be 0f00 	cmp.w	lr, #0
 80068fa:	d031      	beq.n	8006960 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 80068fc:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80068fe:	4450      	add	r0, sl
 8006900:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8006904:	4431      	add	r1, r6
 8006906:	ee37 7a04 	vadd.f32	s14, s14, s8
 800690a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800690e:	4549      	cmp	r1, r9
 8006910:	db08      	blt.n	8006924 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8006912:	ee77 7a85 	vadd.f32	s15, s15, s10
 8006916:	3001      	adds	r0, #1
 8006918:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800691c:	eba1 0109 	sub.w	r1, r1, r9
 8006920:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006924:	f10e 3eff 	add.w	lr, lr, #4294967295
 8006928:	f04f 0801 	mov.w	r8, #1
 800692c:	e7e3      	b.n	80068f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 800692e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8006930:	4450      	add	r0, sl
 8006932:	ee37 7a24 	vadd.f32	s14, s14, s9
 8006936:	4431      	add	r1, r6
 8006938:	ee77 7a84 	vadd.f32	s15, s15, s8
 800693c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8006940:	4541      	cmp	r1, r8
 8006942:	db08      	blt.n	8006956 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8006944:	ee76 6a85 	vadd.f32	s13, s13, s10
 8006948:	3001      	adds	r0, #1
 800694a:	ee37 7a25 	vadd.f32	s14, s14, s11
 800694e:	eba1 0108 	sub.w	r1, r1, r8
 8006952:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006956:	f10c 3cff 	add.w	ip, ip, #4294967295
 800695a:	f04f 0901 	mov.w	r9, #1
 800695e:	e79b      	b.n	8006898 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8006960:	449c      	add	ip, r3
 8006962:	1aff      	subs	r7, r7, r3
 8006964:	f1b8 0f00 	cmp.w	r8, #0
 8006968:	d009      	beq.n	800697e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 800696a:	9019      	str	r0, [sp, #100]	; 0x64
 800696c:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8006970:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8006974:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8006978:	911d      	str	r1, [sp, #116]	; 0x74
 800697a:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800697e:	1ad2      	subs	r2, r2, r3
 8006980:	e68b      	b.n	800669a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8006982:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006984:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8006986:	2b00      	cmp	r3, #0
 8006988:	f000 80d1 	beq.w	8006b2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 800698c:	ad19      	add	r5, sp, #100	; 0x64
 800698e:	ac39      	add	r4, sp, #228	; 0xe4
 8006990:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8006992:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8006996:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800699a:	930c      	str	r3, [sp, #48]	; 0x30
 800699c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800699e:	6963      	ldr	r3, [r4, #20]
 80069a0:	440b      	add	r3, r1
 80069a2:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80069a6:	4408      	add	r0, r1
 80069a8:	b200      	sxth	r0, r0
 80069aa:	4283      	cmp	r3, r0
 80069ac:	900d      	str	r0, [sp, #52]	; 0x34
 80069ae:	f280 80c1 	bge.w	8006b34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 80069b2:	428b      	cmp	r3, r1
 80069b4:	da08      	bge.n	80069c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80069b6:	2a00      	cmp	r2, #0
 80069b8:	dd06      	ble.n	80069c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80069ba:	1acb      	subs	r3, r1, r3
 80069bc:	429a      	cmp	r2, r3
 80069be:	f2c0 80bb 	blt.w	8006b38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	f300 80b9 	bgt.w	8006b3a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 80069c8:	6967      	ldr	r7, [r4, #20]
 80069ca:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80069ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069d0:	443b      	add	r3, r7
 80069d2:	461f      	mov	r7, r3
 80069d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069d6:	1bdf      	subs	r7, r3, r7
 80069d8:	4297      	cmp	r7, r2
 80069da:	bfa8      	it	ge
 80069dc:	4617      	movge	r7, r2
 80069de:	2f00      	cmp	r7, #0
 80069e0:	f340 813c 	ble.w	8006c5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 80069e4:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80069e6:	6829      	ldr	r1, [r5, #0]
 80069e8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80069ec:	f9bb 3000 	ldrsh.w	r3, [fp]
 80069f0:	4411      	add	r1, r2
 80069f2:	6820      	ldr	r0, [r4, #0]
 80069f4:	4299      	cmp	r1, r3
 80069f6:	dd1a      	ble.n	8006a2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80069f8:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80069fc:	4402      	add	r2, r0
 80069fe:	440b      	add	r3, r1
 8006a00:	b21b      	sxth	r3, r3
 8006a02:	429a      	cmp	r2, r3
 8006a04:	dc13      	bgt.n	8006a2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8006a06:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006a08:	a912      	add	r1, sp, #72	; 0x48
 8006a0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	9206      	str	r2, [sp, #24]
 8006a12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a14:	9500      	str	r5, [sp, #0]
 8006a16:	9205      	str	r2, [sp, #20]
 8006a18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a1a:	e9cd b203 	strd	fp, r2, [sp, #12]
 8006a1e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8006a20:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8006a24:	aa49      	add	r2, sp, #292	; 0x124
 8006a26:	f8d3 9044 	ldr.w	r9, [r3, #68]	; 0x44
 8006a2a:	4623      	mov	r3, r4
 8006a2c:	47c8      	blx	r9
 8006a2e:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8006a32:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8006a36:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8006a3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006a3e:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8006a42:	68a1      	ldr	r1, [r4, #8]
 8006a44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a48:	ed94 6a08 	vldr	s12, [r4, #32]
 8006a4c:	edd4 6a07 	vldr	s13, [r4, #28]
 8006a50:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8006a54:	ee76 6a86 	vadd.f32	s13, s13, s12
 8006a58:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8006a5c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006a60:	edc4 6a07 	vstr	s13, [r4, #28]
 8006a64:	441a      	add	r2, r3
 8006a66:	6963      	ldr	r3, [r4, #20]
 8006a68:	3301      	adds	r3, #1
 8006a6a:	6022      	str	r2, [r4, #0]
 8006a6c:	6163      	str	r3, [r4, #20]
 8006a6e:	69a3      	ldr	r3, [r4, #24]
 8006a70:	3b01      	subs	r3, #1
 8006a72:	61a3      	str	r3, [r4, #24]
 8006a74:	6923      	ldr	r3, [r4, #16]
 8006a76:	440b      	add	r3, r1
 8006a78:	68e1      	ldr	r1, [r4, #12]
 8006a7a:	428b      	cmp	r3, r1
 8006a7c:	6123      	str	r3, [r4, #16]
 8006a7e:	db15      	blt.n	8006aac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8006a80:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8006a84:	3201      	adds	r2, #1
 8006a86:	1a5b      	subs	r3, r3, r1
 8006a88:	ee76 6a26 	vadd.f32	s13, s12, s13
 8006a8c:	6022      	str	r2, [r4, #0]
 8006a8e:	6123      	str	r3, [r4, #16]
 8006a90:	edc4 6a07 	vstr	s13, [r4, #28]
 8006a94:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8006a98:	ee36 7a87 	vadd.f32	s14, s13, s14
 8006a9c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8006aa0:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8006aa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006aa8:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8006aac:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8006ab0:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8006ab4:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8006ab8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006abc:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8006ac0:	68a9      	ldr	r1, [r5, #8]
 8006ac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ac6:	ed95 6a08 	vldr	s12, [r5, #32]
 8006aca:	edd5 6a07 	vldr	s13, [r5, #28]
 8006ace:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8006ad2:	ee76 6a86 	vadd.f32	s13, s13, s12
 8006ad6:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8006ada:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006ade:	edc5 6a07 	vstr	s13, [r5, #28]
 8006ae2:	441a      	add	r2, r3
 8006ae4:	696b      	ldr	r3, [r5, #20]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	602a      	str	r2, [r5, #0]
 8006aea:	616b      	str	r3, [r5, #20]
 8006aec:	69ab      	ldr	r3, [r5, #24]
 8006aee:	3b01      	subs	r3, #1
 8006af0:	61ab      	str	r3, [r5, #24]
 8006af2:	692b      	ldr	r3, [r5, #16]
 8006af4:	440b      	add	r3, r1
 8006af6:	68e9      	ldr	r1, [r5, #12]
 8006af8:	428b      	cmp	r3, r1
 8006afa:	612b      	str	r3, [r5, #16]
 8006afc:	db15      	blt.n	8006b2a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8006afe:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8006b02:	3201      	adds	r2, #1
 8006b04:	1a5b      	subs	r3, r3, r1
 8006b06:	ee76 6a26 	vadd.f32	s13, s12, s13
 8006b0a:	602a      	str	r2, [r5, #0]
 8006b0c:	612b      	str	r3, [r5, #16]
 8006b0e:	edc5 6a07 	vstr	s13, [r5, #28]
 8006b12:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8006b16:	ee36 7a87 	vadd.f32	s14, s13, s14
 8006b1a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8006b1e:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8006b22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b26:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8006b2a:	3f01      	subs	r7, #1
 8006b2c:	e757      	b.n	80069de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8006b2e:	ad39      	add	r5, sp, #228	; 0xe4
 8006b30:	ac19      	add	r4, sp, #100	; 0x64
 8006b32:	e72d      	b.n	8006990 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8006b34:	4613      	mov	r3, r2
 8006b36:	e744      	b.n	80069c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8006b38:	4613      	mov	r3, r2
 8006b3a:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8006b3c:	469e      	mov	lr, r3
 8006b3e:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8006b42:	461f      	mov	r7, r3
 8006b44:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8006b48:	f04f 0900 	mov.w	r9, #0
 8006b4c:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8006b50:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8006b54:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8006b58:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8006b5c:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8006b60:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8006b62:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8006b66:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8006b6a:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8006b6e:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8006b72:	960e      	str	r6, [sp, #56]	; 0x38
 8006b74:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8006b78:	2f00      	cmp	r7, #0
 8006b7a:	d146      	bne.n	8006c0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8006b7c:	449c      	add	ip, r3
 8006b7e:	1ad7      	subs	r7, r2, r3
 8006b80:	f1b9 0f00 	cmp.w	r9, #0
 8006b84:	d009      	beq.n	8006b9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8006b86:	9039      	str	r0, [sp, #228]	; 0xe4
 8006b88:	913d      	str	r1, [sp, #244]	; 0xf4
 8006b8a:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8006b8e:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8006b92:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8006b96:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8006b9a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8006b9c:	f04f 0800 	mov.w	r8, #0
 8006ba0:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8006ba4:	910e      	str	r1, [sp, #56]	; 0x38
 8006ba6:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8006baa:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8006bae:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8006bb2:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8006bb6:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8006bba:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8006bbe:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8006bc2:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8006bc6:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8006bca:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8006bce:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8006bd2:	f1be 0f00 	cmp.w	lr, #0
 8006bd6:	d030      	beq.n	8006c3a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8006bd8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8006bda:	4450      	add	r0, sl
 8006bdc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8006be0:	4431      	add	r1, r6
 8006be2:	ee37 7a04 	vadd.f32	s14, s14, s8
 8006be6:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8006bea:	4549      	cmp	r1, r9
 8006bec:	db08      	blt.n	8006c00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8006bee:	ee77 7a85 	vadd.f32	s15, s15, s10
 8006bf2:	3001      	adds	r0, #1
 8006bf4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8006bf8:	eba1 0109 	sub.w	r1, r1, r9
 8006bfc:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006c00:	f10e 3eff 	add.w	lr, lr, #4294967295
 8006c04:	f04f 0801 	mov.w	r8, #1
 8006c08:	e7e3      	b.n	8006bd2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8006c0a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8006c0c:	4450      	add	r0, sl
 8006c0e:	ee37 7a24 	vadd.f32	s14, s14, s9
 8006c12:	4431      	add	r1, r6
 8006c14:	ee77 7a84 	vadd.f32	s15, s15, s8
 8006c18:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8006c1c:	4541      	cmp	r1, r8
 8006c1e:	db08      	blt.n	8006c32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8006c20:	ee76 6a85 	vadd.f32	s13, s13, s10
 8006c24:	3001      	adds	r0, #1
 8006c26:	ee37 7a25 	vadd.f32	s14, s14, s11
 8006c2a:	eba1 0108 	sub.w	r1, r1, r8
 8006c2e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006c32:	3f01      	subs	r7, #1
 8006c34:	f04f 0901 	mov.w	r9, #1
 8006c38:	e79e      	b.n	8006b78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8006c3a:	449c      	add	ip, r3
 8006c3c:	1aff      	subs	r7, r7, r3
 8006c3e:	f1b8 0f00 	cmp.w	r8, #0
 8006c42:	d009      	beq.n	8006c58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8006c44:	9019      	str	r0, [sp, #100]	; 0x64
 8006c46:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8006c4a:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8006c4e:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8006c52:	911d      	str	r1, [sp, #116]	; 0x74
 8006c54:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8006c58:	1ad2      	subs	r2, r2, r3
 8006c5a:	e6b5      	b.n	80069c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8006c5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	b923      	cbnz	r3, 8006c6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8006c62:	4b04      	ldr	r3, [pc, #16]	; (8006c74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8006c64:	6818      	ldr	r0, [r3, #0]
 8006c66:	6803      	ldr	r3, [r0, #0]
 8006c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6a:	4798      	blx	r3
 8006c6c:	b05b      	add	sp, #364	; 0x16c
 8006c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c72:	bf00      	nop
 8006c74:	2000132c 	.word	0x2000132c

08006c78 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	b510      	push	{r4, lr}
 8006c7c:	f9b0 4000 	ldrsh.w	r4, [r0]
 8006c80:	d00b      	beq.n	8006c9a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8006c82:	2b03      	cmp	r3, #3
 8006c84:	d00e      	beq.n	8006ca4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d001      	beq.n	8006c8e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8006c8a:	1860      	adds	r0, r4, r1
 8006c8c:	bd10      	pop	{r4, pc}
 8006c8e:	8880      	ldrh	r0, [r0, #4]
 8006c90:	4420      	add	r0, r4
 8006c92:	b200      	sxth	r0, r0
 8006c94:	1a80      	subs	r0, r0, r2
 8006c96:	3801      	subs	r0, #1
 8006c98:	e7f8      	b.n	8006c8c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8006c9a:	8880      	ldrh	r0, [r0, #4]
 8006c9c:	4420      	add	r0, r4
 8006c9e:	b200      	sxth	r0, r0
 8006ca0:	1a40      	subs	r0, r0, r1
 8006ca2:	e7f8      	b.n	8006c96 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8006ca4:	18a0      	adds	r0, r4, r2
 8006ca6:	e7f1      	b.n	8006c8c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08006ca8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	b510      	push	{r4, lr}
 8006cac:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8006cb0:	d006      	beq.n	8006cc0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 8006cb2:	2b03      	cmp	r3, #3
 8006cb4:	d00a      	beq.n	8006ccc <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	bf14      	ite	ne
 8006cba:	18a0      	addne	r0, r4, r2
 8006cbc:	1860      	addeq	r0, r4, r1
 8006cbe:	bd10      	pop	{r4, pc}
 8006cc0:	88c0      	ldrh	r0, [r0, #6]
 8006cc2:	4420      	add	r0, r4
 8006cc4:	b200      	sxth	r0, r0
 8006cc6:	1a80      	subs	r0, r0, r2
 8006cc8:	3801      	subs	r0, #1
 8006cca:	e7f8      	b.n	8006cbe <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8006ccc:	88c0      	ldrh	r0, [r0, #6]
 8006cce:	4420      	add	r0, r4
 8006cd0:	b200      	sxth	r0, r0
 8006cd2:	1a40      	subs	r0, r0, r1
 8006cd4:	e7f8      	b.n	8006cc8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

08006cd8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8006cd8:	4b01      	ldr	r3, [pc, #4]	; (8006ce0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8006cda:	2200      	movs	r2, #0
 8006cdc:	601a      	str	r2, [r3, #0]
 8006cde:	4770      	bx	lr
 8006ce0:	20001334 	.word	0x20001334

08006ce4 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	b1c8      	cbz	r0, 8006d1c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8006ce8:	0c02      	lsrs	r2, r0, #16
 8006cea:	0412      	lsls	r2, r2, #16
 8006cec:	b9a2      	cbnz	r2, 8006d18 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8006cee:	0403      	lsls	r3, r0, #16
 8006cf0:	2010      	movs	r0, #16
 8006cf2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006cf6:	bf04      	itt	eq
 8006cf8:	021b      	lsleq	r3, r3, #8
 8006cfa:	3008      	addeq	r0, #8
 8006cfc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006d00:	bf04      	itt	eq
 8006d02:	011b      	lsleq	r3, r3, #4
 8006d04:	3004      	addeq	r0, #4
 8006d06:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006d0a:	bf04      	itt	eq
 8006d0c:	009b      	lsleq	r3, r3, #2
 8006d0e:	3002      	addeq	r0, #2
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	db04      	blt.n	8006d1e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8006d14:	3001      	adds	r0, #1
 8006d16:	4770      	bx	lr
 8006d18:	2000      	movs	r0, #0
 8006d1a:	e7ea      	b.n	8006cf2 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8006d1c:	2020      	movs	r0, #32
 8006d1e:	4770      	bx	lr

08006d20 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8006d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d24:	b087      	sub	sp, #28
 8006d26:	4681      	mov	r9, r0
 8006d28:	4698      	mov	r8, r3
 8006d2a:	4610      	mov	r0, r2
 8006d2c:	460d      	mov	r5, r1
 8006d2e:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8006d32:	b981      	cbnz	r1, 8006d56 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8006d34:	b14b      	cbz	r3, 8006d4a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8006d36:	460b      	mov	r3, r1
 8006d38:	464a      	mov	r2, r9
 8006d3a:	4641      	mov	r1, r8
 8006d3c:	e9cd 4700 	strd	r4, r7, [sp]
 8006d40:	f7ff ffee 	bl	8006d20 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8006d44:	b007      	add	sp, #28
 8006d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d4e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8006d52:	603b      	str	r3, [r7, #0]
 8006d54:	e7f6      	b.n	8006d44 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8006d56:	fa32 fa01 	lsrs.w	sl, r2, r1
 8006d5a:	d107      	bne.n	8006d6c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8006d5c:	fb09 f602 	mul.w	r6, r9, r2
 8006d60:	fbb6 f0f4 	udiv	r0, r6, r4
 8006d64:	fb04 6610 	mls	r6, r4, r0, r6
 8006d68:	603e      	str	r6, [r7, #0]
 8006d6a:	e7eb      	b.n	8006d44 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8006d6c:	2601      	movs	r6, #1
 8006d6e:	fa09 fb01 	lsl.w	fp, r9, r1
 8006d72:	408e      	lsls	r6, r1
 8006d74:	fbbb f3f4 	udiv	r3, fp, r4
 8006d78:	3e01      	subs	r6, #1
 8006d7a:	9302      	str	r3, [sp, #8]
 8006d7c:	fb0a f303 	mul.w	r3, sl, r3
 8006d80:	4016      	ands	r6, r2
 8006d82:	9303      	str	r3, [sp, #12]
 8006d84:	4630      	mov	r0, r6
 8006d86:	f7ff ffad 	bl	8006ce4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8006d8a:	464a      	mov	r2, r9
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	4601      	mov	r1, r0
 8006d90:	4630      	mov	r0, r6
 8006d92:	e9cd 4700 	strd	r4, r7, [sp]
 8006d96:	f7ff ffc3 	bl	8006d20 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8006d9a:	9b02      	ldr	r3, [sp, #8]
 8006d9c:	4606      	mov	r6, r0
 8006d9e:	eb05 0108 	add.w	r1, r5, r8
 8006da2:	fb04 bb13 	mls	fp, r4, r3, fp
 8006da6:	4658      	mov	r0, fp
 8006da8:	f7ff ff9c 	bl	8006ce4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8006dac:	ab05      	add	r3, sp, #20
 8006dae:	465a      	mov	r2, fp
 8006db0:	e9cd 4300 	strd	r4, r3, [sp]
 8006db4:	4603      	mov	r3, r0
 8006db6:	4650      	mov	r0, sl
 8006db8:	f7ff ffb2 	bl	8006d20 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8006dbc:	6839      	ldr	r1, [r7, #0]
 8006dbe:	9a05      	ldr	r2, [sp, #20]
 8006dc0:	9b03      	ldr	r3, [sp, #12]
 8006dc2:	4411      	add	r1, r2
 8006dc4:	fbb1 f2f4 	udiv	r2, r1, r4
 8006dc8:	18d3      	adds	r3, r2, r3
 8006dca:	fb04 1412 	mls	r4, r4, r2, r1
 8006dce:	441e      	add	r6, r3
 8006dd0:	603c      	str	r4, [r7, #0]
 8006dd2:	4430      	add	r0, r6
 8006dd4:	e7b6      	b.n	8006d44 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08006dd6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8006dd6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	f1b0 0900 	subs.w	r9, r0, #0
 8006de0:	461d      	mov	r5, r3
 8006de2:	4617      	mov	r7, r2
 8006de4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006de6:	bfbb      	ittet	lt
 8006de8:	f1c9 0900 	rsblt	r9, r9, #0
 8006dec:	f04f 36ff 	movlt.w	r6, #4294967295
 8006df0:	2601      	movge	r6, #1
 8006df2:	6823      	ldrlt	r3, [r4, #0]
 8006df4:	bfbc      	itt	lt
 8006df6:	425b      	neglt	r3, r3
 8006df8:	6023      	strlt	r3, [r4, #0]
 8006dfa:	2a00      	cmp	r2, #0
 8006dfc:	da04      	bge.n	8006e08 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8006dfe:	6823      	ldr	r3, [r4, #0]
 8006e00:	4257      	negs	r7, r2
 8006e02:	4276      	negs	r6, r6
 8006e04:	425b      	negs	r3, r3
 8006e06:	6023      	str	r3, [r4, #0]
 8006e08:	2d00      	cmp	r5, #0
 8006e0a:	4638      	mov	r0, r7
 8006e0c:	bfba      	itte	lt
 8006e0e:	426d      	neglt	r5, r5
 8006e10:	f04f 38ff 	movlt.w	r8, #4294967295
 8006e14:	f04f 0801 	movge.w	r8, #1
 8006e18:	f7ff ff64 	bl	8006ce4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8006e1c:	ab03      	add	r3, sp, #12
 8006e1e:	463a      	mov	r2, r7
 8006e20:	e9cd 5300 	strd	r5, r3, [sp]
 8006e24:	4603      	mov	r3, r0
 8006e26:	4648      	mov	r0, r9
 8006e28:	f7ff ff7a 	bl	8006d20 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8006e2c:	6823      	ldr	r3, [r4, #0]
 8006e2e:	9a03      	ldr	r2, [sp, #12]
 8006e30:	4546      	cmp	r6, r8
 8006e32:	441a      	add	r2, r3
 8006e34:	fb92 f3f5 	sdiv	r3, r2, r5
 8006e38:	4418      	add	r0, r3
 8006e3a:	fb05 2313 	mls	r3, r5, r3, r2
 8006e3e:	bf18      	it	ne
 8006e40:	4240      	negne	r0, r0
 8006e42:	1c72      	adds	r2, r6, #1
 8006e44:	6023      	str	r3, [r4, #0]
 8006e46:	d105      	bne.n	8006e54 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f1c3 0200 	rsb	r2, r3, #0
 8006e4e:	db0b      	blt.n	8006e68 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8006e50:	6022      	str	r2, [r4, #0]
 8006e52:	e006      	b.n	8006e62 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8006e54:	2e01      	cmp	r6, #1
 8006e56:	d104      	bne.n	8006e62 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	da02      	bge.n	8006e62 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8006e5c:	442b      	add	r3, r5
 8006e5e:	3801      	subs	r0, #1
 8006e60:	6023      	str	r3, [r4, #0]
 8006e62:	b005      	add	sp, #20
 8006e64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e68:	3801      	subs	r0, #1
 8006e6a:	1b52      	subs	r2, r2, r5
 8006e6c:	e7f0      	b.n	8006e50 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08006e70 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8006e70:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006e74:	4c1c      	ldr	r4, [pc, #112]	; (8006ee8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8006e76:	4605      	mov	r5, r0
 8006e78:	6807      	ldr	r7, [r0, #0]
 8006e7a:	69a3      	ldr	r3, [r4, #24]
 8006e7c:	b92b      	cbnz	r3, 8006e8a <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8006e7e:	6840      	ldr	r0, [r0, #4]
 8006e80:	e9c5 7000 	strd	r7, r0, [r5]
 8006e84:	b004      	add	sp, #16
 8006e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e8a:	f04f 0802 	mov.w	r8, #2
 8006e8e:	68a2      	ldr	r2, [r4, #8]
 8006e90:	ae04      	add	r6, sp, #16
 8006e92:	6820      	ldr	r0, [r4, #0]
 8006e94:	fb93 f1f8 	sdiv	r1, r3, r8
 8006e98:	440a      	add	r2, r1
 8006e9a:	69e1      	ldr	r1, [r4, #28]
 8006e9c:	f846 2d04 	str.w	r2, [r6, #-4]!
 8006ea0:	463a      	mov	r2, r7
 8006ea2:	9600      	str	r6, [sp, #0]
 8006ea4:	f7ff ff97 	bl	8006dd6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8006ea8:	69a3      	ldr	r3, [r4, #24]
 8006eaa:	4607      	mov	r7, r0
 8006eac:	686a      	ldr	r2, [r5, #4]
 8006eae:	6a21      	ldr	r1, [r4, #32]
 8006eb0:	9600      	str	r6, [sp, #0]
 8006eb2:	6860      	ldr	r0, [r4, #4]
 8006eb4:	f7ff ff8f 	bl	8006dd6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8006eb8:	69a3      	ldr	r3, [r4, #24]
 8006eba:	6962      	ldr	r2, [r4, #20]
 8006ebc:	4407      	add	r7, r0
 8006ebe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006ec0:	9600      	str	r6, [sp, #0]
 8006ec2:	68e0      	ldr	r0, [r4, #12]
 8006ec4:	fb93 f8f8 	sdiv	r8, r3, r8
 8006ec8:	4442      	add	r2, r8
 8006eca:	9203      	str	r2, [sp, #12]
 8006ecc:	682a      	ldr	r2, [r5, #0]
 8006ece:	f7ff ff82 	bl	8006dd6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8006ed2:	4680      	mov	r8, r0
 8006ed4:	9600      	str	r6, [sp, #0]
 8006ed6:	69a3      	ldr	r3, [r4, #24]
 8006ed8:	686a      	ldr	r2, [r5, #4]
 8006eda:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006edc:	6920      	ldr	r0, [r4, #16]
 8006ede:	f7ff ff7a 	bl	8006dd6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8006ee2:	4440      	add	r0, r8
 8006ee4:	e7cc      	b.n	8006e80 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8006ee6:	bf00      	nop
 8006ee8:	20001338 	.word	0x20001338

08006eec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8006eec:	4b07      	ldr	r3, [pc, #28]	; (8006f0c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8006eee:	b510      	push	{r4, lr}
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d108      	bne.n	8006f08 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8006ef6:	4b06      	ldr	r3, [pc, #24]	; (8006f10 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8006ef8:	880c      	ldrh	r4, [r1, #0]
 8006efa:	881b      	ldrh	r3, [r3, #0]
 8006efc:	f9b0 2000 	ldrsh.w	r2, [r0]
 8006f00:	3b01      	subs	r3, #1
 8006f02:	1b1b      	subs	r3, r3, r4
 8006f04:	8003      	strh	r3, [r0, #0]
 8006f06:	800a      	strh	r2, [r1, #0]
 8006f08:	bd10      	pop	{r4, pc}
 8006f0a:	bf00      	nop
 8006f0c:	20001324 	.word	0x20001324
 8006f10:	20001328 	.word	0x20001328

08006f14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8006f14:	4b07      	ldr	r3, [pc, #28]	; (8006f34 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8006f16:	b510      	push	{r4, lr}
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d108      	bne.n	8006f30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8006f1e:	f9b1 3000 	ldrsh.w	r3, [r1]
 8006f22:	f9b0 4000 	ldrsh.w	r4, [r0]
 8006f26:	8003      	strh	r3, [r0, #0]
 8006f28:	8893      	ldrh	r3, [r2, #4]
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	1b1b      	subs	r3, r3, r4
 8006f2e:	800b      	strh	r3, [r1, #0]
 8006f30:	bd10      	pop	{r4, pc}
 8006f32:	bf00      	nop
 8006f34:	20001324 	.word	0x20001324

08006f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8006f38:	4b08      	ldr	r3, [pc, #32]	; (8006f5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8006f3a:	b513      	push	{r0, r1, r4, lr}
 8006f3c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006f40:	2400      	movs	r4, #0
 8006f42:	4b07      	ldr	r3, [pc, #28]	; (8006f60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 8006f44:	f8ad 2004 	strh.w	r2, [sp, #4]
 8006f48:	466a      	mov	r2, sp
 8006f4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f4e:	9400      	str	r4, [sp, #0]
 8006f50:	f8ad 3006 	strh.w	r3, [sp, #6]
 8006f54:	f7ff ffde 	bl	8006f14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8006f58:	b002      	add	sp, #8
 8006f5a:	bd10      	pop	{r4, pc}
 8006f5c:	20001320 	.word	0x20001320
 8006f60:	20001322 	.word	0x20001322

08006f64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8006f64:	4b0a      	ldr	r3, [pc, #40]	; (8006f90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8006f66:	460a      	mov	r2, r1
 8006f68:	b510      	push	{r4, lr}
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d10d      	bne.n	8006f8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8006f70:	8881      	ldrh	r1, [r0, #4]
 8006f72:	8803      	ldrh	r3, [r0, #0]
 8006f74:	440b      	add	r3, r1
 8006f76:	4601      	mov	r1, r0
 8006f78:	3b01      	subs	r3, #1
 8006f7a:	f821 3b02 	strh.w	r3, [r1], #2
 8006f7e:	f7ff ffc9 	bl	8006f14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8006f82:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8006f86:	88c2      	ldrh	r2, [r0, #6]
 8006f88:	80c3      	strh	r3, [r0, #6]
 8006f8a:	8082      	strh	r2, [r0, #4]
 8006f8c:	bd10      	pop	{r4, pc}
 8006f8e:	bf00      	nop
 8006f90:	20001324 	.word	0x20001324

08006f94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8006f94:	4b09      	ldr	r3, [pc, #36]	; (8006fbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8006f96:	b507      	push	{r0, r1, r2, lr}
 8006f98:	2100      	movs	r1, #0
 8006f9a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006f9e:	4b08      	ldr	r3, [pc, #32]	; (8006fc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 8006fa0:	9100      	str	r1, [sp, #0]
 8006fa2:	4669      	mov	r1, sp
 8006fa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006fa8:	f8ad 2004 	strh.w	r2, [sp, #4]
 8006fac:	f8ad 3006 	strh.w	r3, [sp, #6]
 8006fb0:	f7ff ffd8 	bl	8006f64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8006fb4:	b003      	add	sp, #12
 8006fb6:	f85d fb04 	ldr.w	pc, [sp], #4
 8006fba:	bf00      	nop
 8006fbc:	20001320 	.word	0x20001320
 8006fc0:	20001322 	.word	0x20001322

08006fc4 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8006fc4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	dd06      	ble.n	8006fda <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8006fcc:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8006fd0:	2800      	cmp	r0, #0
 8006fd2:	bfcc      	ite	gt
 8006fd4:	2000      	movgt	r0, #0
 8006fd6:	2001      	movle	r0, #1
 8006fd8:	4770      	bx	lr
 8006fda:	2001      	movs	r0, #1
 8006fdc:	4770      	bx	lr
	...

08006fe0 <_ZN8touchgfx11Application11getInstanceEv>:
 8006fe0:	4b01      	ldr	r3, [pc, #4]	; (8006fe8 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8006fe2:	6818      	ldr	r0, [r3, #0]
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	2000136c 	.word	0x2000136c

08006fec <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8006fec:	4b03      	ldr	r3, [pc, #12]	; (8006ffc <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8006fee:	2200      	movs	r2, #0
 8006ff0:	801a      	strh	r2, [r3, #0]
 8006ff2:	805a      	strh	r2, [r3, #2]
 8006ff4:	809a      	strh	r2, [r3, #4]
 8006ff6:	80da      	strh	r2, [r3, #6]
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	20001364 	.word	0x20001364

08007000 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8007000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007004:	b099      	sub	sp, #100	; 0x64
 8007006:	4607      	mov	r7, r0
 8007008:	4614      	mov	r4, r2
 800700a:	461d      	mov	r5, r3
 800700c:	a802      	add	r0, sp, #8
 800700e:	468a      	mov	sl, r1
 8007010:	f000 f996 	bl	8007340 <_ZN8touchgfx12TextProviderC1Ev>
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	4638      	mov	r0, r7
 8007018:	f242 0b0b 	movw	fp, #8203	; 0x200b
 800701c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800701e:	4798      	blx	r3
 8007020:	462a      	mov	r2, r5
 8007022:	2500      	movs	r5, #0
 8007024:	4621      	mov	r1, r4
 8007026:	4603      	mov	r3, r0
 8007028:	a802      	add	r0, sp, #8
 800702a:	462c      	mov	r4, r5
 800702c:	46a9      	mov	r9, r5
 800702e:	46a8      	mov	r8, r5
 8007030:	f000 f9cb 	bl	80073ca <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8007034:	2300      	movs	r3, #0
 8007036:	9301      	str	r3, [sp, #4]
 8007038:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800703c:	429c      	cmp	r4, r3
 800703e:	d002      	beq.n	8007046 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x46>
 8007040:	455c      	cmp	r4, fp
 8007042:	bf18      	it	ne
 8007044:	4625      	movne	r5, r4
 8007046:	ab01      	add	r3, sp, #4
 8007048:	463a      	mov	r2, r7
 800704a:	4651      	mov	r1, sl
 800704c:	a802      	add	r0, sp, #8
 800704e:	f000 fcb7 	bl	80079c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8007052:	4604      	mov	r4, r0
 8007054:	b108      	cbz	r0, 800705a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5a>
 8007056:	280a      	cmp	r0, #10
 8007058:	d10a      	bne.n	8007070 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>
 800705a:	45c1      	cmp	r9, r8
 800705c:	bf38      	it	cc
 800705e:	46c1      	movcc	r9, r8
 8007060:	f04f 0800 	mov.w	r8, #0
 8007064:	2c00      	cmp	r4, #0
 8007066:	d1e5      	bne.n	8007034 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 8007068:	4648      	mov	r0, r9
 800706a:	b019      	add	sp, #100	; 0x64
 800706c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007070:	9a01      	ldr	r2, [sp, #4]
 8007072:	2a00      	cmp	r2, #0
 8007074:	d0de      	beq.n	8007034 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x34>
 8007076:	7b56      	ldrb	r6, [r2, #13]
 8007078:	4629      	mov	r1, r5
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	0076      	lsls	r6, r6, #1
 800707e:	8894      	ldrh	r4, [r2, #4]
 8007080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007082:	f406 7080 	and.w	r0, r6, #256	; 0x100
 8007086:	7a96      	ldrb	r6, [r2, #10]
 8007088:	4306      	orrs	r6, r0
 800708a:	4638      	mov	r0, r7
 800708c:	4798      	blx	r3
 800708e:	4430      	add	r0, r6
 8007090:	4480      	add	r8, r0
 8007092:	fa1f f888 	uxth.w	r8, r8
 8007096:	e7e5      	b.n	8007064 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x64>

08007098 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8007098:	b508      	push	{r3, lr}
 800709a:	6803      	ldr	r3, [r0, #0]
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	4798      	blx	r3
 80070a0:	b128      	cbz	r0, 80070ae <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 80070a2:	7b43      	ldrb	r3, [r0, #13]
 80070a4:	7a80      	ldrb	r0, [r0, #10]
 80070a6:	005b      	lsls	r3, r3, #1
 80070a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ac:	4318      	orrs	r0, r3
 80070ae:	bd08      	pop	{r3, pc}

080070b0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80070b0:	b40e      	push	{r1, r2, r3}
 80070b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070b4:	b098      	sub	sp, #96	; 0x60
 80070b6:	4605      	mov	r5, r0
 80070b8:	ab1d      	add	r3, sp, #116	; 0x74
 80070ba:	a802      	add	r0, sp, #8
 80070bc:	ae18      	add	r6, sp, #96	; 0x60
 80070be:	f853 4b04 	ldr.w	r4, [r3], #4
 80070c2:	9300      	str	r3, [sp, #0]
 80070c4:	f000 f93c 	bl	8007340 <_ZN8touchgfx12TextProviderC1Ev>
 80070c8:	682b      	ldr	r3, [r5, #0]
 80070ca:	4628      	mov	r0, r5
 80070cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ce:	4798      	blx	r3
 80070d0:	4621      	mov	r1, r4
 80070d2:	2400      	movs	r4, #0
 80070d4:	4603      	mov	r3, r0
 80070d6:	9a00      	ldr	r2, [sp, #0]
 80070d8:	a802      	add	r0, sp, #8
 80070da:	f000 f976 	bl	80073ca <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80070de:	f846 4d5c 	str.w	r4, [r6, #-92]!
 80070e2:	462a      	mov	r2, r5
 80070e4:	4633      	mov	r3, r6
 80070e6:	4621      	mov	r1, r4
 80070e8:	a802      	add	r0, sp, #8
 80070ea:	f000 fc69 	bl	80079c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80070ee:	b300      	cbz	r0, 8007132 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 80070f0:	280a      	cmp	r0, #10
 80070f2:	d01a      	beq.n	800712a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
 80070f4:	9f01      	ldr	r7, [sp, #4]
 80070f6:	b1c7      	cbz	r7, 800712a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x7a>
 80070f8:	7b78      	ldrb	r0, [r7, #13]
 80070fa:	7a3b      	ldrb	r3, [r7, #8]
 80070fc:	00c1      	lsls	r1, r0, #3
 80070fe:	88aa      	ldrh	r2, [r5, #4]
 8007100:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8007104:	4319      	orrs	r1, r3
 8007106:	0643      	lsls	r3, r0, #25
 8007108:	ea4f 1000 	mov.w	r0, r0, lsl #4
 800710c:	bf48      	it	mi
 800710e:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8007112:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8007116:	bf48      	it	mi
 8007118:	b219      	sxthmi	r1, r3
 800711a:	79fb      	ldrb	r3, [r7, #7]
 800711c:	4303      	orrs	r3, r0
 800711e:	4413      	add	r3, r2
 8007120:	1a5b      	subs	r3, r3, r1
 8007122:	b29b      	uxth	r3, r3
 8007124:	42a3      	cmp	r3, r4
 8007126:	bfc8      	it	gt
 8007128:	b21c      	sxthgt	r4, r3
 800712a:	4633      	mov	r3, r6
 800712c:	462a      	mov	r2, r5
 800712e:	2100      	movs	r1, #0
 8007130:	e7da      	b.n	80070e8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x38>
 8007132:	b2a0      	uxth	r0, r4
 8007134:	b018      	add	sp, #96	; 0x60
 8007136:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800713a:	b003      	add	sp, #12
 800713c:	4770      	bx	lr

0800713e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 800713e:	b40e      	push	{r1, r2, r3}
 8007140:	b530      	push	{r4, r5, lr}
 8007142:	b098      	sub	sp, #96	; 0x60
 8007144:	4604      	mov	r4, r0
 8007146:	ab1b      	add	r3, sp, #108	; 0x6c
 8007148:	a802      	add	r0, sp, #8
 800714a:	f853 5b04 	ldr.w	r5, [r3], #4
 800714e:	9301      	str	r3, [sp, #4]
 8007150:	f000 f8f6 	bl	8007340 <_ZN8touchgfx12TextProviderC1Ev>
 8007154:	6823      	ldr	r3, [r4, #0]
 8007156:	4620      	mov	r0, r4
 8007158:	2401      	movs	r4, #1
 800715a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800715c:	4798      	blx	r3
 800715e:	9a01      	ldr	r2, [sp, #4]
 8007160:	4603      	mov	r3, r0
 8007162:	4629      	mov	r1, r5
 8007164:	a802      	add	r0, sp, #8
 8007166:	f000 f930 	bl	80073ca <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 800716a:	a802      	add	r0, sp, #8
 800716c:	f000 fcc6 	bl	8007afc <_ZN8touchgfx12TextProvider11getNextCharEv>
 8007170:	b2a3      	uxth	r3, r4
 8007172:	b138      	cbz	r0, 8007184 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 8007174:	280a      	cmp	r0, #10
 8007176:	a802      	add	r0, sp, #8
 8007178:	bf04      	itt	eq
 800717a:	3301      	addeq	r3, #1
 800717c:	b21c      	sxtheq	r4, r3
 800717e:	f000 fcbd 	bl	8007afc <_ZN8touchgfx12TextProvider11getNextCharEv>
 8007182:	e7f5      	b.n	8007170 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 8007184:	4618      	mov	r0, r3
 8007186:	b018      	add	sp, #96	; 0x60
 8007188:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800718c:	b003      	add	sp, #12
 800718e:	4770      	bx	lr

08007190 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8007190:	b40e      	push	{r1, r2, r3}
 8007192:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007194:	b098      	sub	sp, #96	; 0x60
 8007196:	4604      	mov	r4, r0
 8007198:	26ff      	movs	r6, #255	; 0xff
 800719a:	ab1d      	add	r3, sp, #116	; 0x74
 800719c:	a802      	add	r0, sp, #8
 800719e:	f853 5b04 	ldr.w	r5, [r3], #4
 80071a2:	9300      	str	r3, [sp, #0]
 80071a4:	f000 f8cc 	bl	8007340 <_ZN8touchgfx12TextProviderC1Ev>
 80071a8:	6823      	ldr	r3, [r4, #0]
 80071aa:	4620      	mov	r0, r4
 80071ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ae:	4798      	blx	r3
 80071b0:	4629      	mov	r1, r5
 80071b2:	4603      	mov	r3, r0
 80071b4:	9a00      	ldr	r2, [sp, #0]
 80071b6:	a802      	add	r0, sp, #8
 80071b8:	ad18      	add	r5, sp, #96	; 0x60
 80071ba:	f000 f906 	bl	80073ca <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 80071be:	2100      	movs	r1, #0
 80071c0:	4622      	mov	r2, r4
 80071c2:	a802      	add	r0, sp, #8
 80071c4:	f845 1d5c 	str.w	r1, [r5, #-92]!
 80071c8:	462b      	mov	r3, r5
 80071ca:	f000 fbf9 	bl	80079c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80071ce:	b1d8      	cbz	r0, 8007208 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 80071d0:	280a      	cmp	r0, #10
 80071d2:	d012      	beq.n	80071fa <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 80071d4:	9801      	ldr	r0, [sp, #4]
 80071d6:	b180      	cbz	r0, 80071fa <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x6a>
 80071d8:	7b47      	ldrb	r7, [r0, #13]
 80071da:	7922      	ldrb	r2, [r4, #4]
 80071dc:	00fb      	lsls	r3, r7, #3
 80071de:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80071e2:	7a03      	ldrb	r3, [r0, #8]
 80071e4:	430b      	orrs	r3, r1
 80071e6:	0679      	lsls	r1, r7, #25
 80071e8:	bf44      	itt	mi
 80071ea:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80071ee:	b21b      	sxthmi	r3, r3
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	429e      	cmp	r6, r3
 80071f6:	bf28      	it	cs
 80071f8:	461e      	movcs	r6, r3
 80071fa:	462b      	mov	r3, r5
 80071fc:	4622      	mov	r2, r4
 80071fe:	2100      	movs	r1, #0
 8007200:	a802      	add	r0, sp, #8
 8007202:	f000 fbdd 	bl	80079c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8007206:	e7e2      	b.n	80071ce <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 8007208:	4630      	mov	r0, r6
 800720a:	b018      	add	sp, #96	; 0x60
 800720c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007210:	b003      	add	sp, #12
 8007212:	4770      	bx	lr

08007214 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8007214:	b530      	push	{r4, r5, lr}
 8007216:	8083      	strh	r3, [r0, #4]
 8007218:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800721c:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8007220:	7183      	strb	r3, [r0, #6]
 8007222:	79c3      	ldrb	r3, [r0, #7]
 8007224:	6101      	str	r1, [r0, #16]
 8007226:	f365 0306 	bfi	r3, r5, #0, #7
 800722a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 800722e:	8282      	strh	r2, [r0, #20]
 8007230:	f365 13c7 	bfi	r3, r5, #7, #1
 8007234:	71c3      	strb	r3, [r0, #7]
 8007236:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800723a:	7203      	strb	r3, [r0, #8]
 800723c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8007240:	7243      	strb	r3, [r0, #9]
 8007242:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8007246:	8143      	strh	r3, [r0, #10]
 8007248:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800724c:	8183      	strh	r3, [r0, #12]
 800724e:	4b01      	ldr	r3, [pc, #4]	; (8007254 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8007250:	6003      	str	r3, [r0, #0]
 8007252:	bd30      	pop	{r4, r5, pc}
 8007254:	0800c8a0 	.word	0x0800c8a0

08007258 <_ZNK8touchgfx9ConstFont4findEt>:
 8007258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800725a:	6904      	ldr	r4, [r0, #16]
 800725c:	b3bc      	cbz	r4, 80072ce <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800725e:	88a3      	ldrh	r3, [r4, #4]
 8007260:	8a82      	ldrh	r2, [r0, #20]
 8007262:	1acb      	subs	r3, r1, r3
 8007264:	f102 32ff 	add.w	r2, r2, #4294967295
 8007268:	d431      	bmi.n	80072ce <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800726a:	4293      	cmp	r3, r2
 800726c:	dd0c      	ble.n	8007288 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 800726e:	230e      	movs	r3, #14
 8007270:	fb03 4302 	mla	r3, r3, r2, r4
 8007274:	889b      	ldrh	r3, [r3, #4]
 8007276:	1a5b      	subs	r3, r3, r1
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	429a      	cmp	r2, r3
 800727c:	db27      	blt.n	80072ce <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800727e:	2b00      	cmp	r3, #0
 8007280:	bfbc      	itt	lt
 8007282:	2302      	movlt	r3, #2
 8007284:	fb92 f3f3 	sdivlt	r3, r2, r3
 8007288:	2500      	movs	r5, #0
 800728a:	260e      	movs	r6, #14
 800728c:	4295      	cmp	r5, r2
 800728e:	dc1e      	bgt.n	80072ce <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8007290:	fb06 4003 	mla	r0, r6, r3, r4
 8007294:	8887      	ldrh	r7, [r0, #4]
 8007296:	42b9      	cmp	r1, r7
 8007298:	d01a      	beq.n	80072d0 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 800729a:	d20d      	bcs.n	80072b8 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 800729c:	1e5a      	subs	r2, r3, #1
 800729e:	4295      	cmp	r5, r2
 80072a0:	dc15      	bgt.n	80072ce <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80072a2:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 80072a6:	1a5b      	subs	r3, r3, r1
 80072a8:	1ad3      	subs	r3, r2, r3
 80072aa:	429a      	cmp	r2, r3
 80072ac:	db0f      	blt.n	80072ce <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80072ae:	429d      	cmp	r5, r3
 80072b0:	ddec      	ble.n	800728c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80072b2:	1953      	adds	r3, r2, r5
 80072b4:	105b      	asrs	r3, r3, #1
 80072b6:	e7e9      	b.n	800728c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80072b8:	1c5d      	adds	r5, r3, #1
 80072ba:	42aa      	cmp	r2, r5
 80072bc:	db07      	blt.n	80072ce <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80072be:	8a43      	ldrh	r3, [r0, #18]
 80072c0:	1acb      	subs	r3, r1, r3
 80072c2:	442b      	add	r3, r5
 80072c4:	429d      	cmp	r5, r3
 80072c6:	dc02      	bgt.n	80072ce <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80072c8:	429a      	cmp	r2, r3
 80072ca:	dadf      	bge.n	800728c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80072cc:	e7f1      	b.n	80072b2 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 80072ce:	2000      	movs	r0, #0
 80072d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080072d2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 80072d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072d4:	4604      	mov	r4, r0
 80072d6:	4617      	mov	r7, r2
 80072d8:	461e      	mov	r6, r3
 80072da:	b911      	cbnz	r1, 80072e2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 80072dc:	2500      	movs	r5, #0
 80072de:	4628      	mov	r0, r5
 80072e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072e2:	290a      	cmp	r1, #10
 80072e4:	d0fa      	beq.n	80072dc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80072e6:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80072ea:	4291      	cmp	r1, r2
 80072ec:	d0f6      	beq.n	80072dc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80072ee:	f242 020b 	movw	r2, #8203	; 0x200b
 80072f2:	4291      	cmp	r1, r2
 80072f4:	d0f2      	beq.n	80072dc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80072f6:	f7ff ffaf 	bl	8007258 <_ZNK8touchgfx9ConstFont4findEt>
 80072fa:	4605      	mov	r5, r0
 80072fc:	b950      	cbnz	r0, 8007314 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 80072fe:	6823      	ldr	r3, [r4, #0]
 8007300:	4620      	mov	r0, r4
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	4798      	blx	r3
 8007306:	4601      	mov	r1, r0
 8007308:	4620      	mov	r0, r4
 800730a:	f7ff ffa5 	bl	8007258 <_ZNK8touchgfx9ConstFont4findEt>
 800730e:	4605      	mov	r5, r0
 8007310:	2800      	cmp	r0, #0
 8007312:	d0e3      	beq.n	80072dc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8007314:	6823      	ldr	r3, [r4, #0]
 8007316:	4629      	mov	r1, r5
 8007318:	4620      	mov	r0, r4
 800731a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800731c:	4798      	blx	r3
 800731e:	6038      	str	r0, [r7, #0]
 8007320:	6823      	ldr	r3, [r4, #0]
 8007322:	4620      	mov	r0, r4
 8007324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007326:	4798      	blx	r3
 8007328:	7030      	strb	r0, [r6, #0]
 800732a:	e7d8      	b.n	80072de <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0800732c <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 800732c:	2002      	movs	r0, #2
 800732e:	4770      	bx	lr

08007330 <_ZN8touchgfx12GestureEventD1Ev>:
 8007330:	4770      	bx	lr

08007332 <_ZN8touchgfx12GestureEventD0Ev>:
 8007332:	b510      	push	{r4, lr}
 8007334:	4604      	mov	r4, r0
 8007336:	210c      	movs	r1, #12
 8007338:	f002 fee4 	bl	800a104 <_ZdlPvj>
 800733c:	4620      	mov	r0, r4
 800733e:	bd10      	pop	{r4, pc}

08007340 <_ZN8touchgfx12TextProviderC1Ev>:
 8007340:	2300      	movs	r3, #0
 8007342:	2201      	movs	r2, #1
 8007344:	b510      	push	{r4, lr}
 8007346:	4604      	mov	r4, r0
 8007348:	60c3      	str	r3, [r0, #12]
 800734a:	7403      	strb	r3, [r0, #16]
 800734c:	82c3      	strh	r3, [r0, #22]
 800734e:	8303      	strh	r3, [r0, #24]
 8007350:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8007352:	8603      	strh	r3, [r0, #48]	; 0x30
 8007354:	86c3      	strh	r3, [r0, #54]	; 0x36
 8007356:	8703      	strh	r3, [r0, #56]	; 0x38
 8007358:	63c3      	str	r3, [r0, #60]	; 0x3c
 800735a:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 800735e:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 8007362:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 8007366:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 800736a:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 800736e:	e9c0 3300 	strd	r3, r3, [r0]
 8007372:	f7fc fabf 	bl	80038f4 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8007376:	4620      	mov	r0, r4
 8007378:	bd10      	pop	{r4, pc}

0800737a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 800737a:	b530      	push	{r4, r5, lr}
 800737c:	2500      	movs	r5, #0
 800737e:	2401      	movs	r4, #1
 8007380:	6843      	ldr	r3, [r0, #4]
 8007382:	b913      	cbnz	r3, 800738a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8007384:	6803      	ldr	r3, [r0, #0]
 8007386:	b1f3      	cbz	r3, 80073c6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8007388:	6043      	str	r3, [r0, #4]
 800738a:	7c03      	ldrb	r3, [r0, #16]
 800738c:	b143      	cbz	r3, 80073a0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 800738e:	68c3      	ldr	r3, [r0, #12]
 8007390:	b12b      	cbz	r3, 800739e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8007392:	881a      	ldrh	r2, [r3, #0]
 8007394:	b11a      	cbz	r2, 800739e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8007396:	1c9a      	adds	r2, r3, #2
 8007398:	60c2      	str	r2, [r0, #12]
 800739a:	8818      	ldrh	r0, [r3, #0]
 800739c:	bd30      	pop	{r4, r5, pc}
 800739e:	7405      	strb	r5, [r0, #16]
 80073a0:	6843      	ldr	r3, [r0, #4]
 80073a2:	8819      	ldrh	r1, [r3, #0]
 80073a4:	b179      	cbz	r1, 80073c6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 80073a6:	1c9a      	adds	r2, r3, #2
 80073a8:	2902      	cmp	r1, #2
 80073aa:	6042      	str	r2, [r0, #4]
 80073ac:	d1f5      	bne.n	800739a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 80073ae:	6883      	ldr	r3, [r0, #8]
 80073b0:	1d1a      	adds	r2, r3, #4
 80073b2:	6082      	str	r2, [r0, #8]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	60c3      	str	r3, [r0, #12]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d0e1      	beq.n	8007380 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80073bc:	881b      	ldrh	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d0de      	beq.n	8007380 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80073c2:	7404      	strb	r4, [r0, #16]
 80073c4:	e7dc      	b.n	8007380 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80073c6:	2000      	movs	r0, #0
 80073c8:	e7e8      	b.n	800739c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

080073ca <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 80073ca:	63c3      	str	r3, [r0, #60]	; 0x3c
 80073cc:	2300      	movs	r3, #0
 80073ce:	6082      	str	r2, [r0, #8]
 80073d0:	6001      	str	r1, [r0, #0]
 80073d2:	6043      	str	r3, [r0, #4]
 80073d4:	60c3      	str	r3, [r0, #12]
 80073d6:	7403      	strb	r3, [r0, #16]
 80073d8:	8603      	strh	r3, [r0, #48]	; 0x30
 80073da:	8303      	strh	r3, [r0, #24]
 80073dc:	8703      	strh	r3, [r0, #56]	; 0x38
 80073de:	b410      	push	{r4}
 80073e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073e4:	f7fc ba86 	b.w	80038f4 <_ZN8touchgfx12TextProvider18initializeInternalEv>

080073e8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 80073e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073ea:	4605      	mov	r5, r0
 80073ec:	4608      	mov	r0, r1
 80073ee:	b1f1      	cbz	r1, 800742e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 80073f0:	f105 0440 	add.w	r4, r5, #64	; 0x40
 80073f4:	460b      	mov	r3, r1
 80073f6:	f101 0708 	add.w	r7, r1, #8
 80073fa:	4622      	mov	r2, r4
 80073fc:	6818      	ldr	r0, [r3, #0]
 80073fe:	3308      	adds	r3, #8
 8007400:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8007404:	4626      	mov	r6, r4
 8007406:	42bb      	cmp	r3, r7
 8007408:	c603      	stmia	r6!, {r0, r1}
 800740a:	4634      	mov	r4, r6
 800740c:	d1f6      	bne.n	80073fc <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 800740e:	6818      	ldr	r0, [r3, #0]
 8007410:	6030      	str	r0, [r6, #0]
 8007412:	4610      	mov	r0, r2
 8007414:	889b      	ldrh	r3, [r3, #4]
 8007416:	80b3      	strh	r3, [r6, #4]
 8007418:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 800741c:	015b      	lsls	r3, r3, #5
 800741e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8007422:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 8007426:	430b      	orrs	r3, r1
 8007428:	425b      	negs	r3, r3
 800742a:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 800742e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007430 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8007430:	b538      	push	{r3, r4, r5, lr}
 8007432:	460c      	mov	r4, r1
 8007434:	6811      	ldr	r1, [r2, #0]
 8007436:	4610      	mov	r0, r2
 8007438:	68cd      	ldr	r5, [r1, #12]
 800743a:	4619      	mov	r1, r3
 800743c:	47a8      	blx	r5
 800743e:	2800      	cmp	r0, #0
 8007440:	bf08      	it	eq
 8007442:	4620      	moveq	r0, r4
 8007444:	bd38      	pop	{r3, r4, r5, pc}
	...

08007448 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8007448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800744a:	4604      	mov	r4, r0
 800744c:	4615      	mov	r5, r2
 800744e:	4608      	mov	r0, r1
 8007450:	b93a      	cbnz	r2, 8007462 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8007452:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 8007456:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 800745a:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 800745e:	4628      	mov	r0, r5
 8007460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007462:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8007466:	8893      	ldrh	r3, [r2, #4]
 8007468:	ea4f 160c 	mov.w	r6, ip, lsl #4
 800746c:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8007470:	79ee      	ldrb	r6, [r5, #7]
 8007472:	4316      	orrs	r6, r2
 8007474:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 8007478:	189a      	adds	r2, r3, r2
 800747a:	b2b7      	uxth	r7, r6
 800747c:	b291      	uxth	r1, r2
 800747e:	291d      	cmp	r1, #29
 8007480:	f200 8084 	bhi.w	800758c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 8007484:	2201      	movs	r2, #1
 8007486:	10f6      	asrs	r6, r6, #3
 8007488:	408a      	lsls	r2, r1
 800748a:	4978      	ldr	r1, [pc, #480]	; (800766c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 800748c:	420a      	tst	r2, r1
 800748e:	d12e      	bne.n	80074ee <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 8007490:	f412 7f60 	tst.w	r2, #896	; 0x380
 8007494:	d07a      	beq.n	800758c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 8007496:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800749a:	462b      	mov	r3, r5
 800749c:	f105 0e08 	add.w	lr, r5, #8
 80074a0:	4615      	mov	r5, r2
 80074a2:	6818      	ldr	r0, [r3, #0]
 80074a4:	3308      	adds	r3, #8
 80074a6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80074aa:	4694      	mov	ip, r2
 80074ac:	4573      	cmp	r3, lr
 80074ae:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80074b2:	4662      	mov	r2, ip
 80074b4:	d1f5      	bne.n	80074a2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 80074b6:	6818      	ldr	r0, [r3, #0]
 80074b8:	f8cc 0000 	str.w	r0, [ip]
 80074bc:	889b      	ldrh	r3, [r3, #4]
 80074be:	f8ac 3004 	strh.w	r3, [ip, #4]
 80074c2:	b2b3      	uxth	r3, r6
 80074c4:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 80074c8:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 80074cc:	1aca      	subs	r2, r1, r3
 80074ce:	1bcf      	subs	r7, r1, r7
 80074d0:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 80074d4:	b292      	uxth	r2, r2
 80074d6:	1afb      	subs	r3, r7, r3
 80074d8:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 80074dc:	10d2      	asrs	r2, r2, #3
 80074de:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80074e2:	4302      	orrs	r2, r0
 80074e4:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
 80074e8:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 80074ec:	e7b7      	b.n	800745e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80074ee:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80074f0:	b92b      	cbnz	r3, 80074fe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 80074f2:	4b5f      	ldr	r3, [pc, #380]	; (8007670 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 80074f4:	21c0      	movs	r1, #192	; 0xc0
 80074f6:	4a5f      	ldr	r2, [pc, #380]	; (8007674 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 80074f8:	485f      	ldr	r0, [pc, #380]	; (8007678 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 80074fa:	f002 fe5f 	bl	800a1bc <__assert_func>
 80074fe:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8007500:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8007504:	8b59      	ldrh	r1, [r3, #26]
 8007506:	f640 6333 	movw	r3, #3635	; 0xe33
 800750a:	4299      	cmp	r1, r3
 800750c:	d110      	bne.n	8007530 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 800750e:	6803      	ldr	r3, [r0, #0]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	4798      	blx	r3
 8007514:	7b41      	ldrb	r1, [r0, #13]
 8007516:	00cb      	lsls	r3, r1, #3
 8007518:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800751c:	7a03      	ldrb	r3, [r0, #8]
 800751e:	0648      	lsls	r0, r1, #25
 8007520:	ea43 0302 	orr.w	r3, r3, r2
 8007524:	bf44      	itt	mi
 8007526:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800752a:	b21b      	sxthmi	r3, r3
 800752c:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8007530:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 8007534:	462a      	mov	r2, r5
 8007536:	f105 0c08 	add.w	ip, r5, #8
 800753a:	443b      	add	r3, r7
 800753c:	4433      	add	r3, r6
 800753e:	f104 0640 	add.w	r6, r4, #64	; 0x40
 8007542:	b29b      	uxth	r3, r3
 8007544:	4635      	mov	r5, r6
 8007546:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 800754a:	6810      	ldr	r0, [r2, #0]
 800754c:	3208      	adds	r2, #8
 800754e:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8007552:	4637      	mov	r7, r6
 8007554:	4562      	cmp	r2, ip
 8007556:	c703      	stmia	r7!, {r0, r1}
 8007558:	463e      	mov	r6, r7
 800755a:	d1f6      	bne.n	800754a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 800755c:	6810      	ldr	r0, [r2, #0]
 800755e:	6038      	str	r0, [r7, #0]
 8007560:	8892      	ldrh	r2, [r2, #4]
 8007562:	80ba      	strh	r2, [r7, #4]
 8007564:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8007568:	10db      	asrs	r3, r3, #3
 800756a:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 800756e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007572:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007576:	4313      	orrs	r3, r2
 8007578:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 800757c:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8007580:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8007584:	1a9b      	subs	r3, r3, r2
 8007586:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 800758a:	e768      	b.n	800745e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 800758c:	f023 0204 	bic.w	r2, r3, #4
 8007590:	f640 611b 	movw	r1, #3611	; 0xe1b
 8007594:	428a      	cmp	r2, r1
 8007596:	d003      	beq.n	80075a0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 8007598:	f640 621d 	movw	r2, #3613	; 0xe1d
 800759c:	4293      	cmp	r3, r2
 800759e:	d120      	bne.n	80075e2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 80075a0:	3b01      	subs	r3, #1
 80075a2:	4602      	mov	r2, r0
 80075a4:	4629      	mov	r1, r5
 80075a6:	4620      	mov	r0, r4
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	f7ff ff41 	bl	8007430 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80075ae:	7b41      	ldrb	r1, [r0, #13]
 80075b0:	00cb      	lsls	r3, r1, #3
 80075b2:	0649      	lsls	r1, r1, #25
 80075b4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80075b8:	7a03      	ldrb	r3, [r0, #8]
 80075ba:	ea43 0302 	orr.w	r3, r3, r2
 80075be:	bf44      	itt	mi
 80075c0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80075c4:	b21b      	sxthmi	r3, r3
 80075c6:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 80075ca:	7b6b      	ldrb	r3, [r5, #13]
 80075cc:	7aaa      	ldrb	r2, [r5, #10]
 80075ce:	005b      	lsls	r3, r3, #1
 80075d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075d4:	4313      	orrs	r3, r2
 80075d6:	115a      	asrs	r2, r3, #5
 80075d8:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80075dc:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 80075e0:	e035      	b.n	800764e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 80075e2:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 80075e6:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80075ea:	f402 7180 	and.w	r1, r2, #256	; 0x100
 80075ee:	7a2a      	ldrb	r2, [r5, #8]
 80075f0:	ea42 0201 	orr.w	r2, r2, r1
 80075f4:	f640 6109 	movw	r1, #3593	; 0xe09
 80075f8:	bf1c      	itt	ne
 80075fa:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 80075fe:	b212      	sxthne	r2, r2
 8007600:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 8007604:	f023 0210 	bic.w	r2, r3, #16
 8007608:	428a      	cmp	r2, r1
 800760a:	d003      	beq.n	8007614 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 800760c:	f640 6213 	movw	r2, #3603	; 0xe13
 8007610:	4293      	cmp	r3, r2
 8007612:	d129      	bne.n	8007668 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 8007614:	7b6e      	ldrb	r6, [r5, #13]
 8007616:	4629      	mov	r1, r5
 8007618:	0076      	lsls	r6, r6, #1
 800761a:	f406 7280 	and.w	r2, r6, #256	; 0x100
 800761e:	7aae      	ldrb	r6, [r5, #10]
 8007620:	4316      	orrs	r6, r2
 8007622:	f640 6213 	movw	r2, #3603	; 0xe13
 8007626:	4293      	cmp	r3, r2
 8007628:	4602      	mov	r2, r0
 800762a:	4620      	mov	r0, r4
 800762c:	bf16      	itet	ne
 800762e:	f103 33ff 	addne.w	r3, r3, #4294967295
 8007632:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8007636:	b29b      	uxthne	r3, r3
 8007638:	f7ff fefa 	bl	8007430 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800763c:	7b43      	ldrb	r3, [r0, #13]
 800763e:	7a82      	ldrb	r2, [r0, #10]
 8007640:	005b      	lsls	r3, r3, #1
 8007642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007646:	4313      	orrs	r3, r2
 8007648:	1af6      	subs	r6, r6, r3
 800764a:	f8a4 6052 	strh.w	r6, [r4, #82]	; 0x52
 800764e:	7b69      	ldrb	r1, [r5, #13]
 8007650:	00cb      	lsls	r3, r1, #3
 8007652:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8007656:	7a2b      	ldrb	r3, [r5, #8]
 8007658:	4313      	orrs	r3, r2
 800765a:	064a      	lsls	r2, r1, #25
 800765c:	bf44      	itt	mi
 800765e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8007662:	b21b      	sxthmi	r3, r3
 8007664:	1bdb      	subs	r3, r3, r7
 8007666:	e73f      	b.n	80074e8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 8007668:	2300      	movs	r3, #0
 800766a:	e7b7      	b.n	80075dc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 800766c:	3fc00079 	.word	0x3fc00079
 8007670:	0800c900 	.word	0x0800c900
 8007674:	0800cb72 	.word	0x0800cb72
 8007678:	0800c909 	.word	0x0800c909

0800767c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 800767c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007680:	4604      	mov	r4, r0
 8007682:	b942      	cbnz	r2, 8007696 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8007684:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007688:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 800768c:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 8007690:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8007694:	e046      	b.n	8007724 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 8007696:	7b51      	ldrb	r1, [r2, #13]
 8007698:	8893      	ldrh	r3, [r2, #4]
 800769a:	010f      	lsls	r7, r1, #4
 800769c:	f407 7080 	and.w	r0, r7, #256	; 0x100
 80076a0:	79d7      	ldrb	r7, [r2, #7]
 80076a2:	4307      	orrs	r7, r0
 80076a4:	2f04      	cmp	r7, #4
 80076a6:	b2bd      	uxth	r5, r7
 80076a8:	bfcc      	ite	gt
 80076aa:	08bf      	lsrgt	r7, r7, #2
 80076ac:	2701      	movle	r7, #1
 80076ae:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 80076b2:	f200 80ab 	bhi.w	800780c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 80076b6:	f240 60e7 	movw	r0, #1767	; 0x6e7
 80076ba:	4283      	cmp	r3, r0
 80076bc:	d216      	bcs.n	80076ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80076be:	f240 605b 	movw	r0, #1627	; 0x65b
 80076c2:	4283      	cmp	r3, r0
 80076c4:	d859      	bhi.n	800777a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 80076c6:	f240 6057 	movw	r0, #1623	; 0x657
 80076ca:	4283      	cmp	r3, r0
 80076cc:	d20e      	bcs.n	80076ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80076ce:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80076d2:	d24a      	bcs.n	800776a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 80076d4:	f240 604e 	movw	r0, #1614	; 0x64e
 80076d8:	4283      	cmp	r3, r0
 80076da:	d207      	bcs.n	80076ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80076dc:	f240 601a 	movw	r0, #1562	; 0x61a
 80076e0:	4283      	cmp	r3, r0
 80076e2:	d02a      	beq.n	800773a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80076e4:	d821      	bhi.n	800772a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 80076e6:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 80076ea:	d35b      	bcc.n	80077a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80076ec:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	; 0x4e
 80076f0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80076f4:	f040 80d0 	bne.w	8007898 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 80076f8:	f9b4 0050 	ldrsh.w	r0, [r4, #80]	; 0x50
 80076fc:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8007700:	f040 80ca 	bne.w	8007898 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 8007704:	00cb      	lsls	r3, r1, #3
 8007706:	0649      	lsls	r1, r1, #25
 8007708:	f403 7080 	and.w	r0, r3, #256	; 0x100
 800770c:	7a13      	ldrb	r3, [r2, #8]
 800770e:	ea43 0300 	orr.w	r3, r3, r0
 8007712:	bf44      	itt	mi
 8007714:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8007718:	b21b      	sxthmi	r3, r3
 800771a:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 800771e:	1b5d      	subs	r5, r3, r5
 8007720:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 8007724:	4610      	mov	r0, r2
 8007726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800772a:	f240 604b 	movw	r0, #1611	; 0x64b
 800772e:	4283      	cmp	r3, r0
 8007730:	d338      	bcc.n	80077a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8007732:	f240 604c 	movw	r0, #1612	; 0x64c
 8007736:	4283      	cmp	r3, r0
 8007738:	d9d8      	bls.n	80076ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800773a:	f9b4 004e 	ldrsh.w	r0, [r4, #78]	; 0x4e
 800773e:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	; 0x50
 8007742:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8007746:	f040 80f2 	bne.w	800792e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 800774a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800774e:	f040 80ee 	bne.w	800792e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 8007752:	00cb      	lsls	r3, r1, #3
 8007754:	064e      	lsls	r6, r1, #25
 8007756:	f403 7080 	and.w	r0, r3, #256	; 0x100
 800775a:	7a13      	ldrb	r3, [r2, #8]
 800775c:	ea43 0300 	orr.w	r3, r3, r0
 8007760:	bf44      	itt	mi
 8007762:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8007766:	b21b      	sxthmi	r3, r3
 8007768:	e7d9      	b.n	800771e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 800776a:	f240 6054 	movw	r0, #1620	; 0x654
 800776e:	4283      	cmp	r3, r0
 8007770:	d8e3      	bhi.n	800773a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8007772:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8007776:	d9e0      	bls.n	800773a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8007778:	e7b8      	b.n	80076ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800777a:	f240 6074 	movw	r0, #1652	; 0x674
 800777e:	4283      	cmp	r3, r0
 8007780:	d0b4      	beq.n	80076ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8007782:	d82d      	bhi.n	80077e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 8007784:	f240 605e 	movw	r0, #1630	; 0x65e
 8007788:	4283      	cmp	r3, r0
 800778a:	d804      	bhi.n	8007796 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 800778c:	f240 605d 	movw	r0, #1629	; 0x65d
 8007790:	4283      	cmp	r3, r0
 8007792:	d3d2      	bcc.n	800773a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8007794:	e7aa      	b.n	80076ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8007796:	f240 605f 	movw	r0, #1631	; 0x65f
 800779a:	4283      	cmp	r3, r0
 800779c:	d0cd      	beq.n	800773a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800779e:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 80077a2:	d0a3      	beq.n	80076ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80077a4:	00cb      	lsls	r3, r1, #3
 80077a6:	0649      	lsls	r1, r1, #25
 80077a8:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80077ac:	7a13      	ldrb	r3, [r2, #8]
 80077ae:	ea43 0300 	orr.w	r3, r3, r0
 80077b2:	bf44      	itt	mi
 80077b4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80077b8:	b21b      	sxthmi	r3, r3
 80077ba:	1b5d      	subs	r5, r3, r5
 80077bc:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 80077c0:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 80077c4:	7b53      	ldrb	r3, [r2, #13]
 80077c6:	015b      	lsls	r3, r3, #5
 80077c8:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80077cc:	7993      	ldrb	r3, [r2, #6]
 80077ce:	430b      	orrs	r3, r1
 80077d0:	2105      	movs	r1, #5
 80077d2:	005b      	lsls	r3, r3, #1
 80077d4:	fb93 f3f1 	sdiv	r3, r3, r1
 80077d8:	f992 1009 	ldrsb.w	r1, [r2, #9]
 80077dc:	440b      	add	r3, r1
 80077de:	e757      	b.n	8007690 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 80077e0:	f240 60e2 	movw	r0, #1762	; 0x6e2
 80077e4:	4283      	cmp	r3, r0
 80077e6:	d809      	bhi.n	80077fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 80077e8:	f240 60df 	movw	r0, #1759	; 0x6df
 80077ec:	4283      	cmp	r3, r0
 80077ee:	f4bf af7d 	bcs.w	80076ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80077f2:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 80077f6:	2b05      	cmp	r3, #5
 80077f8:	d8d4      	bhi.n	80077a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80077fa:	e777      	b.n	80076ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80077fc:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8007800:	4283      	cmp	r3, r0
 8007802:	d09a      	beq.n	800773a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8007804:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8007808:	4283      	cmp	r3, r0
 800780a:	e7ca      	b.n	80077a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 800780c:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8007810:	d22b      	bcs.n	800786a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 8007812:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8007816:	4283      	cmp	r3, r0
 8007818:	d28f      	bcs.n	800773a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800781a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800781e:	4283      	cmp	r3, r0
 8007820:	d816      	bhi.n	8007850 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 8007822:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8007826:	4283      	cmp	r3, r0
 8007828:	f4bf af60 	bcs.w	80076ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800782c:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8007830:	4283      	cmp	r3, r0
 8007832:	d80a      	bhi.n	800784a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 8007834:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8007838:	4283      	cmp	r3, r0
 800783a:	f4bf af57 	bcs.w	80076ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800783e:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8007842:	4283      	cmp	r3, r0
 8007844:	f43f af79 	beq.w	800773a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8007848:	e7ac      	b.n	80077a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800784a:	f240 60ed 	movw	r0, #1773	; 0x6ed
 800784e:	e7f8      	b.n	8007842 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 8007850:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8007854:	4283      	cmp	r3, r0
 8007856:	d802      	bhi.n	800785e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 8007858:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800785c:	e798      	b.n	8007790 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 800785e:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8007862:	4283      	cmp	r3, r0
 8007864:	f47f af42 	bne.w	80076ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8007868:	e767      	b.n	800773a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 800786a:	f640 00f6 	movw	r0, #2294	; 0x8f6
 800786e:	4283      	cmp	r3, r0
 8007870:	f43f af63 	beq.w	800773a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8007874:	d802      	bhi.n	800787c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 8007876:	f640 00f2 	movw	r0, #2290	; 0x8f2
 800787a:	e7f2      	b.n	8007862 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 800787c:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8007880:	4283      	cmp	r3, r0
 8007882:	d805      	bhi.n	8007890 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 8007884:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8007888:	4283      	cmp	r3, r0
 800788a:	f4ff af2f 	bcc.w	80076ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 800788e:	e754      	b.n	800773a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8007890:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8007894:	4283      	cmp	r3, r0
 8007896:	e7af      	b.n	80077f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 8007898:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 800789c:	4617      	mov	r7, r2
 800789e:	f102 0808 	add.w	r8, r2, #8
 80078a2:	4666      	mov	r6, ip
 80078a4:	6838      	ldr	r0, [r7, #0]
 80078a6:	3708      	adds	r7, #8
 80078a8:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80078ac:	46e6      	mov	lr, ip
 80078ae:	4547      	cmp	r7, r8
 80078b0:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80078b4:	46f4      	mov	ip, lr
 80078b6:	d1f5      	bne.n	80078a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 80078b8:	6838      	ldr	r0, [r7, #0]
 80078ba:	f8ce 0000 	str.w	r0, [lr]
 80078be:	88b9      	ldrh	r1, [r7, #4]
 80078c0:	f8ae 1004 	strh.w	r1, [lr, #4]
 80078c4:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 80078c8:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80078cc:	d009      	beq.n	80078e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 80078ce:	7b51      	ldrb	r1, [r2, #13]
 80078d0:	7992      	ldrb	r2, [r2, #6]
 80078d2:	0149      	lsls	r1, r1, #5
 80078d4:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80078d8:	4311      	orrs	r1, r2
 80078da:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80078de:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 80078e2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80078e6:	d00d      	beq.n	8007904 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 80078e8:	442b      	add	r3, r5
 80078ea:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80078f4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 80078f8:	10db      	asrs	r3, r3, #3
 80078fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078fe:	4313      	orrs	r3, r2
 8007900:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8007904:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8007908:	00cb      	lsls	r3, r1, #3
 800790a:	064f      	lsls	r7, r1, #25
 800790c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8007910:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8007914:	ea43 0302 	orr.w	r3, r3, r2
 8007918:	bf44      	itt	mi
 800791a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 800791e:	b21b      	sxthmi	r3, r3
 8007920:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8007924:	1b5d      	subs	r5, r3, r5
 8007926:	4632      	mov	r2, r6
 8007928:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
 800792c:	e6fa      	b.n	8007724 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 800792e:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8007932:	4694      	mov	ip, r2
 8007934:	f102 0908 	add.w	r9, r2, #8
 8007938:	4676      	mov	r6, lr
 800793a:	f8dc 0000 	ldr.w	r0, [ip]
 800793e:	f10c 0c08 	add.w	ip, ip, #8
 8007942:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 8007946:	46f0      	mov	r8, lr
 8007948:	45cc      	cmp	ip, r9
 800794a:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 800794e:	46c6      	mov	lr, r8
 8007950:	d1f3      	bne.n	800793a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 8007952:	f8dc 0000 	ldr.w	r0, [ip]
 8007956:	f8c8 0000 	str.w	r0, [r8]
 800795a:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 800795e:	f8a8 1004 	strh.w	r1, [r8, #4]
 8007962:	f9b4 0052 	ldrsh.w	r0, [r4, #82]	; 0x52
 8007966:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800796a:	d009      	beq.n	8007980 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 800796c:	7b51      	ldrb	r1, [r2, #13]
 800796e:	7992      	ldrb	r2, [r2, #6]
 8007970:	0149      	lsls	r1, r1, #5
 8007972:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8007976:	4311      	orrs	r1, r2
 8007978:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800797c:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
 8007980:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8007984:	d00d      	beq.n	80079a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 8007986:	1bdb      	subs	r3, r3, r7
 8007988:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 800798c:	b29b      	uxth	r3, r3
 800798e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007992:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 8007996:	10db      	asrs	r3, r3, #3
 8007998:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800799c:	4313      	orrs	r3, r2
 800799e:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 80079a2:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 80079a6:	00cb      	lsls	r3, r1, #3
 80079a8:	0648      	lsls	r0, r1, #25
 80079aa:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80079ae:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80079b2:	ea43 0302 	orr.w	r3, r3, r2
 80079b6:	bf44      	itt	mi
 80079b8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80079bc:	b21b      	sxthmi	r3, r3
 80079be:	e7b1      	b.n	8007924 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

080079c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80079c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079c4:	461e      	mov	r6, r3
 80079c6:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80079c8:	4604      	mov	r4, r0
 80079ca:	4617      	mov	r7, r2
 80079cc:	b92b      	cbnz	r3, 80079da <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 80079ce:	4b25      	ldr	r3, [pc, #148]	; (8007a64 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 80079d0:	21c0      	movs	r1, #192	; 0xc0
 80079d2:	4a25      	ldr	r2, [pc, #148]	; (8007a68 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 80079d4:	4825      	ldr	r0, [pc, #148]	; (8007a6c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 80079d6:	f002 fbf1 	bl	800a1bc <__assert_func>
 80079da:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80079dc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80079e0:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 80079e4:	f7fb ff34 	bl	8003850 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80079e8:	4605      	mov	r5, r0
 80079ea:	b918      	cbnz	r0, 80079f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 80079ec:	6030      	str	r0, [r6, #0]
 80079ee:	4628      	mov	r0, r5
 80079f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	4601      	mov	r1, r0
 80079f8:	4638      	mov	r0, r7
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	4798      	blx	r3
 80079fe:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8007a02:	4602      	mov	r2, r0
 8007a04:	6030      	str	r0, [r6, #0]
 8007a06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a0a:	d213      	bcs.n	8007a34 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 8007a0c:	4643      	mov	r3, r8
 8007a0e:	4639      	mov	r1, r7
 8007a10:	4620      	mov	r0, r4
 8007a12:	f7ff fe33 	bl	800767c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8007a16:	6030      	str	r0, [r6, #0]
 8007a18:	6833      	ldr	r3, [r6, #0]
 8007a1a:	b143      	cbz	r3, 8007a2e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 8007a1c:	7b5a      	ldrb	r2, [r3, #13]
 8007a1e:	7a9b      	ldrb	r3, [r3, #10]
 8007a20:	0052      	lsls	r2, r2, #1
 8007a22:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8007a26:	4313      	orrs	r3, r2
 8007a28:	bf0c      	ite	eq
 8007a2a:	2301      	moveq	r3, #1
 8007a2c:	2300      	movne	r3, #0
 8007a2e:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8007a32:	e7dc      	b.n	80079ee <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 8007a34:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	2b7f      	cmp	r3, #127	; 0x7f
 8007a3c:	d804      	bhi.n	8007a48 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 8007a3e:	4639      	mov	r1, r7
 8007a40:	4620      	mov	r0, r4
 8007a42:	f7ff fd01 	bl	8007448 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8007a46:	e7e6      	b.n	8007a16 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8007a48:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d0e3      	beq.n	8007a18 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8007a50:	f640 1302 	movw	r3, #2306	; 0x902
 8007a54:	429d      	cmp	r5, r3
 8007a56:	d1df      	bne.n	8007a18 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8007a58:	4601      	mov	r1, r0
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	f7ff fcc4 	bl	80073e8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8007a60:	e7d9      	b.n	8007a16 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8007a62:	bf00      	nop
 8007a64:	0800c900 	.word	0x0800c900
 8007a68:	0800cb72 	.word	0x0800cb72
 8007a6c:	0800c909 	.word	0x0800c909

08007a70 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8007a70:	b510      	push	{r4, lr}
 8007a72:	4604      	mov	r4, r0
 8007a74:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 8007a76:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8007a78:	b9d9      	cbnz	r1, 8007ab2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x42>
 8007a7a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8007a7c:	2b0a      	cmp	r3, #10
 8007a7e:	d036      	beq.n	8007aee <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 8007a80:	4620      	mov	r0, r4
 8007a82:	f7ff fc7a 	bl	800737a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8007a86:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8007a88:	2b09      	cmp	r3, #9
 8007a8a:	d906      	bls.n	8007a9a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2a>
 8007a8c:	4b18      	ldr	r3, [pc, #96]	; (8007af0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x80>)
 8007a8e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8007a92:	4a18      	ldr	r2, [pc, #96]	; (8007af4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 8007a94:	4818      	ldr	r0, [pc, #96]	; (8007af8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 8007a96:	f002 fb91 	bl	800a1bc <__assert_func>
 8007a9a:	1c5a      	adds	r2, r3, #1
 8007a9c:	8622      	strh	r2, [r4, #48]	; 0x30
 8007a9e:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8007aa0:	4413      	add	r3, r2
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	2b09      	cmp	r3, #9
 8007aa6:	bf88      	it	hi
 8007aa8:	3b0a      	subhi	r3, #10
 8007aaa:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8007aae:	8358      	strh	r0, [r3, #26]
 8007ab0:	e7e3      	b.n	8007a7a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xa>
 8007ab2:	2b0a      	cmp	r3, #10
 8007ab4:	d01b      	beq.n	8007aee <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x7e>
 8007ab6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8007ab8:	3901      	subs	r1, #1
 8007aba:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8007abe:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 8007ac0:	8721      	strh	r1, [r4, #56]	; 0x38
 8007ac2:	1c51      	adds	r1, r2, #1
 8007ac4:	b289      	uxth	r1, r1
 8007ac6:	2901      	cmp	r1, #1
 8007ac8:	bf8a      	itet	hi
 8007aca:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007ace:	86e1      	strhls	r1, [r4, #54]	; 0x36
 8007ad0:	86e2      	strhhi	r2, [r4, #54]	; 0x36
 8007ad2:	2b09      	cmp	r3, #9
 8007ad4:	d8da      	bhi.n	8007a8c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1c>
 8007ad6:	1c5a      	adds	r2, r3, #1
 8007ad8:	8622      	strh	r2, [r4, #48]	; 0x30
 8007ada:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8007adc:	4413      	add	r3, r2
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	2b09      	cmp	r3, #9
 8007ae2:	bf88      	it	hi
 8007ae4:	3b0a      	subhi	r3, #10
 8007ae6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8007aea:	8358      	strh	r0, [r3, #26]
 8007aec:	e7c2      	b.n	8007a74 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8007aee:	bd10      	pop	{r4, pc}
 8007af0:	0800c935 	.word	0x0800c935
 8007af4:	0800ccc8 	.word	0x0800ccc8
 8007af8:	0800c909 	.word	0x0800c909

08007afc <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8007afc:	b538      	push	{r3, r4, r5, lr}
 8007afe:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 8007b00:	4604      	mov	r4, r0
 8007b02:	b92a      	cbnz	r2, 8007b10 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 8007b04:	4b13      	ldr	r3, [pc, #76]	; (8007b54 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 8007b06:	21d5      	movs	r1, #213	; 0xd5
 8007b08:	4a13      	ldr	r2, [pc, #76]	; (8007b58 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 8007b0a:	4814      	ldr	r0, [pc, #80]	; (8007b5c <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 8007b0c:	f002 fb56 	bl	800a1bc <__assert_func>
 8007b10:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8007b12:	3a01      	subs	r2, #1
 8007b14:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8007b18:	8b4d      	ldrh	r5, [r1, #26]
 8007b1a:	8602      	strh	r2, [r0, #48]	; 0x30
 8007b1c:	1c5a      	adds	r2, r3, #1
 8007b1e:	b292      	uxth	r2, r2
 8007b20:	2a09      	cmp	r2, #9
 8007b22:	bf8a      	itet	hi
 8007b24:	3b09      	subhi	r3, #9
 8007b26:	85c2      	strhls	r2, [r0, #46]	; 0x2e
 8007b28:	85c3      	strhhi	r3, [r0, #46]	; 0x2e
 8007b2a:	f7ff ffa1 	bl	8007a70 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8007b2e:	8b23      	ldrh	r3, [r4, #24]
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	bf9c      	itt	ls
 8007b34:	3301      	addls	r3, #1
 8007b36:	8323      	strhls	r3, [r4, #24]
 8007b38:	8ae3      	ldrh	r3, [r4, #22]
 8007b3a:	b90b      	cbnz	r3, 8007b40 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	82e3      	strh	r3, [r4, #22]
 8007b40:	8ae3      	ldrh	r3, [r4, #22]
 8007b42:	4628      	mov	r0, r5
 8007b44:	3b01      	subs	r3, #1
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	82e3      	strh	r3, [r4, #22]
 8007b4a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8007b4e:	8265      	strh	r5, [r4, #18]
 8007b50:	bd38      	pop	{r3, r4, r5, pc}
 8007b52:	bf00      	nop
 8007b54:	0800c900 	.word	0x0800c900
 8007b58:	0800cc1d 	.word	0x0800cc1d
 8007b5c:	0800c909 	.word	0x0800c909

08007b60 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8007b60:	428a      	cmp	r2, r1
 8007b62:	b538      	push	{r3, r4, r5, lr}
 8007b64:	8e04      	ldrh	r4, [r0, #48]	; 0x30
 8007b66:	d90c      	bls.n	8007b82 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 8007b68:	b92c      	cbnz	r4, 8007b76 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 8007b6a:	4b1c      	ldr	r3, [pc, #112]	; (8007bdc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 8007b6c:	21e1      	movs	r1, #225	; 0xe1
 8007b6e:	4a1c      	ldr	r2, [pc, #112]	; (8007be0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 8007b70:	481c      	ldr	r0, [pc, #112]	; (8007be4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 8007b72:	f002 fb23 	bl	800a1bc <__assert_func>
 8007b76:	3c01      	subs	r4, #1
 8007b78:	4b1b      	ldr	r3, [pc, #108]	; (8007be8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 8007b7a:	4a1c      	ldr	r2, [pc, #112]	; (8007bec <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 8007b7c:	21c5      	movs	r1, #197	; 0xc5
 8007b7e:	8604      	strh	r4, [r0, #48]	; 0x30
 8007b80:	e7f6      	b.n	8007b70 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8007b82:	428c      	cmp	r4, r1
 8007b84:	d203      	bcs.n	8007b8e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 8007b86:	4b1a      	ldr	r3, [pc, #104]	; (8007bf0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 8007b88:	21cb      	movs	r1, #203	; 0xcb
 8007b8a:	4a1a      	ldr	r2, [pc, #104]	; (8007bf4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 8007b8c:	e7f0      	b.n	8007b70 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8007b8e:	1a64      	subs	r4, r4, r1
 8007b90:	250a      	movs	r5, #10
 8007b92:	8604      	strh	r4, [r0, #48]	; 0x30
 8007b94:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8007b96:	4421      	add	r1, r4
 8007b98:	b289      	uxth	r1, r1
 8007b9a:	2909      	cmp	r1, #9
 8007b9c:	bf88      	it	hi
 8007b9e:	390a      	subhi	r1, #10
 8007ba0:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8007ba2:	b1ba      	cbz	r2, 8007bd4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 8007ba4:	3a01      	subs	r2, #1
 8007ba6:	8e01      	ldrh	r1, [r0, #48]	; 0x30
 8007ba8:	b292      	uxth	r2, r2
 8007baa:	2909      	cmp	r1, #9
 8007bac:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8007bb0:	d903      	bls.n	8007bba <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 8007bb2:	4b11      	ldr	r3, [pc, #68]	; (8007bf8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 8007bb4:	21e6      	movs	r1, #230	; 0xe6
 8007bb6:	4a11      	ldr	r2, [pc, #68]	; (8007bfc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 8007bb8:	e7da      	b.n	8007b70 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8007bba:	3101      	adds	r1, #1
 8007bbc:	8601      	strh	r1, [r0, #48]	; 0x30
 8007bbe:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 8007bc0:	b901      	cbnz	r1, 8007bc4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 8007bc2:	85c5      	strh	r5, [r0, #46]	; 0x2e
 8007bc4:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
 8007bc6:	3901      	subs	r1, #1
 8007bc8:	b289      	uxth	r1, r1
 8007bca:	85c1      	strh	r1, [r0, #46]	; 0x2e
 8007bcc:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8007bd0:	834c      	strh	r4, [r1, #26]
 8007bd2:	e7e6      	b.n	8007ba2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 8007bd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bd8:	f7ff bf4a 	b.w	8007a70 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8007bdc:	0800c900 	.word	0x0800c900
 8007be0:	0800c9f6 	.word	0x0800c9f6
 8007be4:	0800c909 	.word	0x0800c909
 8007be8:	0800c941 	.word	0x0800c941
 8007bec:	0800caa0 	.word	0x0800caa0
 8007bf0:	0800c94f 	.word	0x0800c94f
 8007bf4:	0800cd77 	.word	0x0800cd77
 8007bf8:	0800c95b 	.word	0x0800c95b
 8007bfc:	0800c96e 	.word	0x0800c96e

08007c00 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8007c00:	3a01      	subs	r2, #1
 8007c02:	b570      	push	{r4, r5, r6, lr}
 8007c04:	b292      	uxth	r2, r2
 8007c06:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8007c0a:	42b2      	cmp	r2, r6
 8007c0c:	d019      	beq.n	8007c42 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 8007c0e:	8b04      	ldrh	r4, [r0, #24]
 8007c10:	f831 5b02 	ldrh.w	r5, [r1], #2
 8007c14:	4294      	cmp	r4, r2
 8007c16:	d805      	bhi.n	8007c24 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 8007c18:	4b19      	ldr	r3, [pc, #100]	; (8007c80 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 8007c1a:	4a1a      	ldr	r2, [pc, #104]	; (8007c84 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 8007c1c:	21c5      	movs	r1, #197	; 0xc5
 8007c1e:	481a      	ldr	r0, [pc, #104]	; (8007c88 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 8007c20:	f002 facc 	bl	800a1bc <__assert_func>
 8007c24:	8ac4      	ldrh	r4, [r0, #22]
 8007c26:	4414      	add	r4, r2
 8007c28:	3a01      	subs	r2, #1
 8007c2a:	b2a4      	uxth	r4, r4
 8007c2c:	b292      	uxth	r2, r2
 8007c2e:	2c01      	cmp	r4, #1
 8007c30:	bf88      	it	hi
 8007c32:	3c02      	subhi	r4, #2
 8007c34:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8007c38:	8a64      	ldrh	r4, [r4, #18]
 8007c3a:	42ac      	cmp	r4, r5
 8007c3c:	d0e5      	beq.n	8007c0a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 8007c3e:	2000      	movs	r0, #0
 8007c40:	bd70      	pop	{r4, r5, r6, pc}
 8007c42:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8007c46:	2400      	movs	r4, #0
 8007c48:	4413      	add	r3, r2
 8007c4a:	b2a2      	uxth	r2, r4
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	da14      	bge.n	8007c7a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 8007c50:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 8007c52:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8007c56:	4296      	cmp	r6, r2
 8007c58:	d802      	bhi.n	8007c60 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 8007c5a:	4b09      	ldr	r3, [pc, #36]	; (8007c80 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 8007c5c:	4a0b      	ldr	r2, [pc, #44]	; (8007c8c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 8007c5e:	e7dd      	b.n	8007c1c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 8007c60:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
 8007c62:	3401      	adds	r4, #1
 8007c64:	4432      	add	r2, r6
 8007c66:	b292      	uxth	r2, r2
 8007c68:	2a09      	cmp	r2, #9
 8007c6a:	bf88      	it	hi
 8007c6c:	3a0a      	subhi	r2, #10
 8007c6e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8007c72:	8b52      	ldrh	r2, [r2, #26]
 8007c74:	42aa      	cmp	r2, r5
 8007c76:	d0e8      	beq.n	8007c4a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 8007c78:	e7e1      	b.n	8007c3e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 8007c7a:	2001      	movs	r0, #1
 8007c7c:	e7e0      	b.n	8007c40 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 8007c7e:	bf00      	nop
 8007c80:	0800c941 	.word	0x0800c941
 8007c84:	0800cdfb 	.word	0x0800cdfb
 8007c88:	0800c909 	.word	0x0800c909
 8007c8c:	0800caa0 	.word	0x0800caa0

08007c90 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8007c90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c94:	4605      	mov	r5, r0
 8007c96:	4616      	mov	r6, r2
 8007c98:	1c8c      	adds	r4, r1, #2
 8007c9a:	8809      	ldrh	r1, [r1, #0]
 8007c9c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8007ca0:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8007ca4:	42b3      	cmp	r3, r6
 8007ca6:	d124      	bne.n	8007cf2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8007ca8:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8007cac:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8007cb0:	f001 070f 	and.w	r7, r1, #15
 8007cb4:	4652      	mov	r2, sl
 8007cb6:	f8cd 8000 	str.w	r8, [sp]
 8007cba:	464b      	mov	r3, r9
 8007cbc:	4621      	mov	r1, r4
 8007cbe:	4628      	mov	r0, r5
 8007cc0:	f7ff ff9e 	bl	8007c00 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8007cc4:	4683      	mov	fp, r0
 8007cc6:	b168      	cbz	r0, 8007ce4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8007cc8:	eb0a 0109 	add.w	r1, sl, r9
 8007ccc:	463a      	mov	r2, r7
 8007cce:	4628      	mov	r0, r5
 8007cd0:	4441      	add	r1, r8
 8007cd2:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8007cd6:	4649      	mov	r1, r9
 8007cd8:	f7ff ff42 	bl	8007b60 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8007cdc:	4658      	mov	r0, fp
 8007cde:	b003      	add	sp, #12
 8007ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ce4:	eb07 010a 	add.w	r1, r7, sl
 8007ce8:	4449      	add	r1, r9
 8007cea:	4441      	add	r1, r8
 8007cec:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8007cf0:	e7d2      	b.n	8007c98 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8007cf2:	f04f 0b00 	mov.w	fp, #0
 8007cf6:	e7f1      	b.n	8007cdc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08007cf8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8007cf8:	b570      	push	{r4, r5, r6, lr}
 8007cfa:	8810      	ldrh	r0, [r2, #0]
 8007cfc:	4298      	cmp	r0, r3
 8007cfe:	d817      	bhi.n	8007d30 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8007d00:	1e48      	subs	r0, r1, #1
 8007d02:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8007d06:	4298      	cmp	r0, r3
 8007d08:	d312      	bcc.n	8007d30 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8007d0a:	2400      	movs	r4, #0
 8007d0c:	428c      	cmp	r4, r1
 8007d0e:	d20f      	bcs.n	8007d30 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8007d10:	1860      	adds	r0, r4, r1
 8007d12:	1040      	asrs	r0, r0, #1
 8007d14:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8007d18:	0085      	lsls	r5, r0, #2
 8007d1a:	42b3      	cmp	r3, r6
 8007d1c:	d902      	bls.n	8007d24 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8007d1e:	3001      	adds	r0, #1
 8007d20:	b284      	uxth	r4, r0
 8007d22:	e7f3      	b.n	8007d0c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8007d24:	d201      	bcs.n	8007d2a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8007d26:	b281      	uxth	r1, r0
 8007d28:	e7f0      	b.n	8007d0c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8007d2a:	442a      	add	r2, r5
 8007d2c:	8850      	ldrh	r0, [r2, #2]
 8007d2e:	bd70      	pop	{r4, r5, r6, pc}
 8007d30:	2000      	movs	r0, #0
 8007d32:	e7fc      	b.n	8007d2e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08007d34 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8007d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d38:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8007d3a:	4604      	mov	r4, r0
 8007d3c:	260b      	movs	r6, #11
 8007d3e:	886f      	ldrh	r7, [r5, #2]
 8007d40:	087f      	lsrs	r7, r7, #1
 8007d42:	3e01      	subs	r6, #1
 8007d44:	d01b      	beq.n	8007d7e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 8007d46:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8007d48:	b92b      	cbnz	r3, 8007d56 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 8007d4a:	4b0e      	ldr	r3, [pc, #56]	; (8007d84 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 8007d4c:	21c0      	movs	r1, #192	; 0xc0
 8007d4e:	4a0e      	ldr	r2, [pc, #56]	; (8007d88 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 8007d50:	480e      	ldr	r0, [pc, #56]	; (8007d8c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 8007d52:	f002 fa33 	bl	800a1bc <__assert_func>
 8007d56:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8007d58:	462a      	mov	r2, r5
 8007d5a:	4639      	mov	r1, r7
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8007d62:	f8b3 801a 	ldrh.w	r8, [r3, #26]
 8007d66:	4643      	mov	r3, r8
 8007d68:	f7ff ffc6 	bl	8007cf8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8007d6c:	b138      	cbz	r0, 8007d7e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 8007d6e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8007d72:	4642      	mov	r2, r8
 8007d74:	4620      	mov	r0, r4
 8007d76:	f7ff ff8b 	bl	8007c90 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8007d7a:	2800      	cmp	r0, #0
 8007d7c:	d1e1      	bne.n	8007d42 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8007d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d82:	bf00      	nop
 8007d84:	0800c900 	.word	0x0800c900
 8007d88:	0800cb72 	.word	0x0800cb72
 8007d8c:	0800c909 	.word	0x0800c909

08007d90 <_ZN8touchgfx8ceil28_4El>:
 8007d90:	f110 030f 	adds.w	r3, r0, #15
 8007d94:	d401      	bmi.n	8007d9a <_ZN8touchgfx8ceil28_4El+0xa>
 8007d96:	1118      	asrs	r0, r3, #4
 8007d98:	4770      	bx	lr
 8007d9a:	2210      	movs	r2, #16
 8007d9c:	f1c0 0001 	rsb	r0, r0, #1
 8007da0:	fb93 f3f2 	sdiv	r3, r3, r2
 8007da4:	f010 000f 	ands.w	r0, r0, #15
 8007da8:	bf18      	it	ne
 8007daa:	2001      	movne	r0, #1
 8007dac:	1a18      	subs	r0, r3, r0
 8007dae:	4770      	bx	lr

08007db0 <_ZN8touchgfx11floorDivModEllRlS0_>:
 8007db0:	2900      	cmp	r1, #0
 8007db2:	b538      	push	{r3, r4, r5, lr}
 8007db4:	dc05      	bgt.n	8007dc2 <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 8007db6:	4b0f      	ldr	r3, [pc, #60]	; (8007df4 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 8007db8:	21fa      	movs	r1, #250	; 0xfa
 8007dba:	4a0f      	ldr	r2, [pc, #60]	; (8007df8 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 8007dbc:	480f      	ldr	r0, [pc, #60]	; (8007dfc <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 8007dbe:	f002 f9fd 	bl	800a1bc <__assert_func>
 8007dc2:	2800      	cmp	r0, #0
 8007dc4:	db06      	blt.n	8007dd4 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 8007dc6:	fb90 f4f1 	sdiv	r4, r0, r1
 8007dca:	fb01 0114 	mls	r1, r1, r4, r0
 8007dce:	6014      	str	r4, [r2, #0]
 8007dd0:	6019      	str	r1, [r3, #0]
 8007dd2:	bd38      	pop	{r3, r4, r5, pc}
 8007dd4:	4240      	negs	r0, r0
 8007dd6:	fb90 f4f1 	sdiv	r4, r0, r1
 8007dda:	4265      	negs	r5, r4
 8007ddc:	fb01 0014 	mls	r0, r1, r4, r0
 8007de0:	6015      	str	r5, [r2, #0]
 8007de2:	6018      	str	r0, [r3, #0]
 8007de4:	2800      	cmp	r0, #0
 8007de6:	d0f4      	beq.n	8007dd2 <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 8007de8:	6810      	ldr	r0, [r2, #0]
 8007dea:	3801      	subs	r0, #1
 8007dec:	6010      	str	r0, [r2, #0]
 8007dee:	6818      	ldr	r0, [r3, #0]
 8007df0:	1a09      	subs	r1, r1, r0
 8007df2:	e7ed      	b.n	8007dd0 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 8007df4:	0800cecc 	.word	0x0800cecc
 8007df8:	0800cf0b 	.word	0x0800cf0b
 8007dfc:	0800cedc 	.word	0x0800cedc

08007e00 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8007e00:	b570      	push	{r4, r5, r6, lr}
 8007e02:	694a      	ldr	r2, [r1, #20]
 8007e04:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8007e06:	684b      	ldr	r3, [r1, #4]
 8007e08:	1b54      	subs	r4, r2, r5
 8007e0a:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8007e0c:	f000 8106 	beq.w	800801c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8007e10:	1b9b      	subs	r3, r3, r6
 8007e12:	d003      	beq.n	8007e1c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8007e14:	4363      	muls	r3, r4
 8007e16:	2210      	movs	r2, #16
 8007e18:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e1c:	680c      	ldr	r4, [r1, #0]
 8007e1e:	698a      	ldr	r2, [r1, #24]
 8007e20:	1b65      	subs	r5, r4, r5
 8007e22:	f000 80fd 	beq.w	8008020 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8007e26:	1b92      	subs	r2, r2, r6
 8007e28:	d003      	beq.n	8007e32 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8007e2a:	436a      	muls	r2, r5
 8007e2c:	2410      	movs	r4, #16
 8007e2e:	fb92 f2f4 	sdiv	r2, r2, r4
 8007e32:	1a9b      	subs	r3, r3, r2
 8007e34:	ed9f 4a89 	vldr	s8, [pc, #548]	; 800805c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8007e38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e3c:	460a      	mov	r2, r1
 8007e3e:	ee07 3a90 	vmov	s15, r3
 8007e42:	f100 040c 	add.w	r4, r0, #12
 8007e46:	4603      	mov	r3, r0
 8007e48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e4c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8007e50:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8007e54:	eeb1 6a43 	vneg.f32	s12, s6
 8007e58:	edd2 7a02 	vldr	s15, [r2, #8]
 8007e5c:	3214      	adds	r2, #20
 8007e5e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007e62:	ece3 6a01 	vstmia	r3!, {s13}
 8007e66:	429c      	cmp	r4, r3
 8007e68:	ed52 7a02 	vldr	s15, [r2, #-8]
 8007e6c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007e70:	edc3 7a02 	vstr	s15, [r3, #8]
 8007e74:	ed52 7a01 	vldr	s15, [r2, #-4]
 8007e78:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007e7c:	edc3 7a05 	vstr	s15, [r3, #20]
 8007e80:	d1ea      	bne.n	8007e58 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8007e82:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007e84:	698b      	ldr	r3, [r1, #24]
 8007e86:	edd0 4a02 	vldr	s9, [r0, #8]
 8007e8a:	1a9b      	subs	r3, r3, r2
 8007e8c:	edd0 3a00 	vldr	s7, [r0]
 8007e90:	edd0 6a01 	vldr	s13, [r0, #4]
 8007e94:	ee07 3a90 	vmov	s15, r3
 8007e98:	684b      	ldr	r3, [r1, #4]
 8007e9a:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8007e9e:	ed90 5a05 	vldr	s10, [r0, #20]
 8007ea2:	1a9b      	subs	r3, r3, r2
 8007ea4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ea8:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8007eac:	ed90 2a03 	vldr	s4, [r0, #12]
 8007eb0:	ee07 3a10 	vmov	s14, r3
 8007eb4:	edd0 5a04 	vldr	s11, [r0, #16]
 8007eb8:	ee67 7a84 	vmul.f32	s15, s15, s8
 8007ebc:	ed90 1a07 	vldr	s2, [r0, #28]
 8007ec0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007ec4:	edd0 2a06 	vldr	s5, [r0, #24]
 8007ec8:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8007ecc:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8007ed0:	ee27 7a04 	vmul.f32	s14, s14, s8
 8007ed4:	ee32 5a45 	vsub.f32	s10, s4, s10
 8007ed8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007edc:	ee67 7a83 	vmul.f32	s15, s15, s6
 8007ee0:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8007ee4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8007ee6:	694a      	ldr	r2, [r1, #20]
 8007ee8:	1b13      	subs	r3, r2, r4
 8007eea:	ee07 3a10 	vmov	s14, r3
 8007eee:	680b      	ldr	r3, [r1, #0]
 8007ef0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007ef4:	1b1b      	subs	r3, r3, r4
 8007ef6:	ee27 7a04 	vmul.f32	s14, s14, s8
 8007efa:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8007efe:	ee07 3a10 	vmov	s14, r3
 8007f02:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007f06:	ee27 7a04 	vmul.f32	s14, s14, s8
 8007f0a:	eee6 4a87 	vfma.f32	s9, s13, s14
 8007f0e:	ee64 4a86 	vmul.f32	s9, s9, s12
 8007f12:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8007f16:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007f18:	698b      	ldr	r3, [r1, #24]
 8007f1a:	1a9b      	subs	r3, r3, r2
 8007f1c:	ee06 3a90 	vmov	s13, r3
 8007f20:	684b      	ldr	r3, [r1, #4]
 8007f22:	1a9b      	subs	r3, r3, r2
 8007f24:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007f28:	ee07 3a10 	vmov	s14, r3
 8007f2c:	ee66 6a84 	vmul.f32	s13, s13, s8
 8007f30:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007f34:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8007f38:	ee27 7a04 	vmul.f32	s14, s14, s8
 8007f3c:	eee5 6a87 	vfma.f32	s13, s11, s14
 8007f40:	ee66 6a83 	vmul.f32	s13, s13, s6
 8007f44:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8007f48:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8007f4a:	694a      	ldr	r2, [r1, #20]
 8007f4c:	1b13      	subs	r3, r2, r4
 8007f4e:	ee07 3a10 	vmov	s14, r3
 8007f52:	680b      	ldr	r3, [r1, #0]
 8007f54:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007f58:	1b1b      	subs	r3, r3, r4
 8007f5a:	ee27 7a04 	vmul.f32	s14, s14, s8
 8007f5e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8007f62:	ee07 3a10 	vmov	s14, r3
 8007f66:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007f6a:	ee27 7a04 	vmul.f32	s14, s14, s8
 8007f6e:	eea5 5a87 	vfma.f32	s10, s11, s14
 8007f72:	edd0 5a08 	vldr	s11, [r0, #32]
 8007f76:	ee31 1a65 	vsub.f32	s2, s2, s11
 8007f7a:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8007f7e:	ee25 5a06 	vmul.f32	s10, s10, s12
 8007f82:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8007f86:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007f88:	698b      	ldr	r3, [r1, #24]
 8007f8a:	1a9b      	subs	r3, r3, r2
 8007f8c:	ee07 3a10 	vmov	s14, r3
 8007f90:	684b      	ldr	r3, [r1, #4]
 8007f92:	1a9b      	subs	r3, r3, r2
 8007f94:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007f98:	ee01 3a90 	vmov	s3, r3
 8007f9c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8007fa0:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8007fa4:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8007fa8:	ee61 1a84 	vmul.f32	s3, s3, s8
 8007fac:	eea1 7a21 	vfma.f32	s14, s2, s3
 8007fb0:	ee27 7a03 	vmul.f32	s14, s14, s6
 8007fb4:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8007fb8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8007fba:	694a      	ldr	r2, [r1, #20]
 8007fbc:	1b13      	subs	r3, r2, r4
 8007fbe:	ee03 3a10 	vmov	s6, r3
 8007fc2:	680b      	ldr	r3, [r1, #0]
 8007fc4:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8007fc8:	1b1b      	subs	r3, r3, r4
 8007fca:	ee23 3a04 	vmul.f32	s6, s6, s8
 8007fce:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8007fd2:	ee03 3a10 	vmov	s6, r3
 8007fd6:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8007fda:	ee23 4a04 	vmul.f32	s8, s6, s8
 8007fde:	eee1 5a04 	vfma.f32	s11, s2, s8
 8007fe2:	ee25 6a86 	vmul.f32	s12, s11, s12
 8007fe6:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8007fea:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8007fee:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8007ff2:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8007ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ffa:	dd13      	ble.n	8008024 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8007ffc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008000:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8008004:	63c3      	str	r3, [r0, #60]	; 0x3c
 8008006:	eee3 7a87 	vfma.f32	s15, s7, s14
 800800a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800800e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008012:	dd15      	ble.n	8008040 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8008014:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008018:	6403      	str	r3, [r0, #64]	; 0x40
 800801a:	bd70      	pop	{r4, r5, r6, pc}
 800801c:	4623      	mov	r3, r4
 800801e:	e6fd      	b.n	8007e1c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8008020:	462a      	mov	r2, r5
 8008022:	e706      	b.n	8007e32 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8008024:	d502      	bpl.n	800802c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8008026:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800802a:	e7e9      	b.n	8008000 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 800802c:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8008030:	eea3 2a85 	vfma.f32	s4, s7, s10
 8008034:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8008038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800803c:	dade      	bge.n	8007ffc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 800803e:	e7f2      	b.n	8008026 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8008040:	d502      	bpl.n	8008048 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8008042:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8008046:	e7e7      	b.n	8008018 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8008048:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 800804c:	eee3 4a86 	vfma.f32	s9, s7, s12
 8008050:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8008054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008058:	dadc      	bge.n	8008014 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 800805a:	e7f2      	b.n	8008042 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 800805c:	3d800000 	.word	0x3d800000

08008060 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8008060:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008064:	f04f 0814 	mov.w	r8, #20
 8008068:	4604      	mov	r4, r0
 800806a:	4617      	mov	r7, r2
 800806c:	460d      	mov	r5, r1
 800806e:	fb08 f903 	mul.w	r9, r8, r3
 8008072:	461e      	mov	r6, r3
 8008074:	eb02 0a09 	add.w	sl, r2, r9
 8008078:	f8da 0004 	ldr.w	r0, [sl, #4]
 800807c:	f7ff fe88 	bl	8007d90 <_ZN8touchgfx8ceil28_4El>
 8008080:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008082:	6160      	str	r0, [r4, #20]
 8008084:	fb08 f803 	mul.w	r8, r8, r3
 8008088:	9001      	str	r0, [sp, #4]
 800808a:	eb07 0b08 	add.w	fp, r7, r8
 800808e:	f8db 0004 	ldr.w	r0, [fp, #4]
 8008092:	f7ff fe7d 	bl	8007d90 <_ZN8touchgfx8ceil28_4El>
 8008096:	9a01      	ldr	r2, [sp, #4]
 8008098:	1a80      	subs	r0, r0, r2
 800809a:	61a0      	str	r0, [r4, #24]
 800809c:	2800      	cmp	r0, #0
 800809e:	f000 8088 	beq.w	80081b2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 80080a2:	f857 3009 	ldr.w	r3, [r7, r9]
 80080a6:	f857 c008 	ldr.w	ip, [r7, r8]
 80080aa:	f8db 0004 	ldr.w	r0, [fp, #4]
 80080ae:	ebac 0c03 	sub.w	ip, ip, r3
 80080b2:	f8da 1004 	ldr.w	r1, [sl, #4]
 80080b6:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 80080ba:	1a40      	subs	r0, r0, r1
 80080bc:	fb0b f202 	mul.w	r2, fp, r2
 80080c0:	ea4f 1800 	mov.w	r8, r0, lsl #4
 80080c4:	fb0c 2211 	mls	r2, ip, r1, r2
 80080c8:	4641      	mov	r1, r8
 80080ca:	fb00 2003 	mla	r0, r0, r3, r2
 80080ce:	f104 0310 	add.w	r3, r4, #16
 80080d2:	4622      	mov	r2, r4
 80080d4:	3801      	subs	r0, #1
 80080d6:	4440      	add	r0, r8
 80080d8:	f7ff fe6a 	bl	8007db0 <_ZN8touchgfx11floorDivModEllRlS0_>
 80080dc:	f104 0308 	add.w	r3, r4, #8
 80080e0:	1d22      	adds	r2, r4, #4
 80080e2:	4641      	mov	r1, r8
 80080e4:	4658      	mov	r0, fp
 80080e6:	f7ff fe63 	bl	8007db0 <_ZN8touchgfx11floorDivModEllRlS0_>
 80080ea:	f8c4 800c 	str.w	r8, [r4, #12]
 80080ee:	6962      	ldr	r2, [r4, #20]
 80080f0:	f8da 3004 	ldr.w	r3, [sl, #4]
 80080f4:	eddf 6a31 	vldr	s13, [pc, #196]	; 80081bc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 80080f8:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 80080fc:	6822      	ldr	r2, [r4, #0]
 80080fe:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 8008102:	ee07 3a10 	vmov	s14, r3
 8008106:	f857 3009 	ldr.w	r3, [r7, r9]
 800810a:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 800810e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008112:	ee07 3a90 	vmov	s15, r3
 8008116:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 800811a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800811e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008122:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008126:	edd3 6a00 	vldr	s13, [r3]
 800812a:	eee6 6a07 	vfma.f32	s13, s12, s14
 800812e:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8008132:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008136:	edc4 6a07 	vstr	s13, [r4, #28]
 800813a:	edd4 6a01 	vldr	s13, [r4, #4]
 800813e:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 8008142:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8008146:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 800814a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800814e:	ed84 6a08 	vstr	s12, [r4, #32]
 8008152:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8008154:	6262      	str	r2, [r4, #36]	; 0x24
 8008156:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 800815a:	ed93 6a03 	vldr	s12, [r3, #12]
 800815e:	eea5 6a87 	vfma.f32	s12, s11, s14
 8008162:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 8008166:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800816a:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 800816e:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 8008172:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 8008176:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800817a:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 800817e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8008180:	6322      	str	r2, [r4, #48]	; 0x30
 8008182:	ed93 6a06 	vldr	s12, [r3, #24]
 8008186:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 800818a:	eea5 6a87 	vfma.f32	s12, s11, s14
 800818e:	eeb0 7a46 	vmov.f32	s14, s12
 8008192:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 8008196:	eea6 7a27 	vfma.f32	s14, s12, s15
 800819a:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 800819e:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 80081a2:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 80081a6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80081aa:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 80081ae:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80081b0:	63e3      	str	r3, [r4, #60]	; 0x3c
 80081b2:	4620      	mov	r0, r4
 80081b4:	b003      	add	sp, #12
 80081b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ba:	bf00      	nop
 80081bc:	3d800000 	.word	0x3d800000

080081c0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 80081c0:	4b06      	ldr	r3, [pc, #24]	; (80081dc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 80081c2:	881a      	ldrh	r2, [r3, #0]
 80081c4:	4282      	cmp	r2, r0
 80081c6:	d807      	bhi.n	80081d8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 80081c8:	4b05      	ldr	r3, [pc, #20]	; (80081e0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 80081ca:	881b      	ldrh	r3, [r3, #0]
 80081cc:	4413      	add	r3, r2
 80081ce:	4298      	cmp	r0, r3
 80081d0:	bfac      	ite	ge
 80081d2:	2000      	movge	r0, #0
 80081d4:	2001      	movlt	r0, #1
 80081d6:	4770      	bx	lr
 80081d8:	2000      	movs	r0, #0
 80081da:	4770      	bx	lr
 80081dc:	20001378 	.word	0x20001378
 80081e0:	2000137a 	.word	0x2000137a

080081e4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 80081e4:	b508      	push	{r3, lr}
 80081e6:	4601      	mov	r1, r0
 80081e8:	f7ff ffea 	bl	80081c0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80081ec:	b118      	cbz	r0, 80081f6 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 80081ee:	4b02      	ldr	r3, [pc, #8]	; (80081f8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80081f6:	bd08      	pop	{r3, pc}
 80081f8:	20001370 	.word	0x20001370

080081fc <_ZNK8touchgfx6Bitmap8getWidthEv>:
 80081fc:	b508      	push	{r3, lr}
 80081fe:	4b14      	ldr	r3, [pc, #80]	; (8008250 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8008200:	6819      	ldr	r1, [r3, #0]
 8008202:	b931      	cbnz	r1, 8008212 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 8008204:	4b13      	ldr	r3, [pc, #76]	; (8008254 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8008206:	f240 3187 	movw	r1, #903	; 0x387
 800820a:	4a13      	ldr	r2, [pc, #76]	; (8008258 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 800820c:	4813      	ldr	r0, [pc, #76]	; (800825c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 800820e:	f001 ffd5 	bl	800a1bc <__assert_func>
 8008212:	4a13      	ldr	r2, [pc, #76]	; (8008260 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8008214:	8803      	ldrh	r3, [r0, #0]
 8008216:	8812      	ldrh	r2, [r2, #0]
 8008218:	4293      	cmp	r3, r2
 800821a:	d204      	bcs.n	8008226 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 800821c:	2214      	movs	r2, #20
 800821e:	fb02 1303 	mla	r3, r2, r3, r1
 8008222:	8918      	ldrh	r0, [r3, #8]
 8008224:	bd08      	pop	{r3, pc}
 8008226:	490f      	ldr	r1, [pc, #60]	; (8008264 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 8008228:	8809      	ldrh	r1, [r1, #0]
 800822a:	4411      	add	r1, r2
 800822c:	428b      	cmp	r3, r1
 800822e:	da06      	bge.n	800823e <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 8008230:	1a9b      	subs	r3, r3, r2
 8008232:	4a0d      	ldr	r2, [pc, #52]	; (8008268 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 8008234:	210e      	movs	r1, #14
 8008236:	6812      	ldr	r2, [r2, #0]
 8008238:	fb01 2303 	mla	r3, r1, r3, r2
 800823c:	e7f1      	b.n	8008222 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 800823e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008242:	4293      	cmp	r3, r2
 8008244:	bf0a      	itet	eq
 8008246:	4b09      	ldreq	r3, [pc, #36]	; (800826c <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 8008248:	2000      	movne	r0, #0
 800824a:	8818      	ldrheq	r0, [r3, #0]
 800824c:	e7ea      	b.n	8008224 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 800824e:	bf00      	nop
 8008250:	2000137c 	.word	0x2000137c
 8008254:	0800cfa9 	.word	0x0800cfa9
 8008258:	0800d04c 	.word	0x0800d04c
 800825c:	0800cf84 	.word	0x0800cf84
 8008260:	20001378 	.word	0x20001378
 8008264:	2000137a 	.word	0x2000137a
 8008268:	20001374 	.word	0x20001374
 800826c:	20001320 	.word	0x20001320

08008270 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8008270:	b508      	push	{r3, lr}
 8008272:	4b14      	ldr	r3, [pc, #80]	; (80082c4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8008274:	6819      	ldr	r1, [r3, #0]
 8008276:	b931      	cbnz	r1, 8008286 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 8008278:	4b13      	ldr	r3, [pc, #76]	; (80082c8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 800827a:	f240 319b 	movw	r1, #923	; 0x39b
 800827e:	4a13      	ldr	r2, [pc, #76]	; (80082cc <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8008280:	4813      	ldr	r0, [pc, #76]	; (80082d0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8008282:	f001 ff9b 	bl	800a1bc <__assert_func>
 8008286:	4a13      	ldr	r2, [pc, #76]	; (80082d4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8008288:	8803      	ldrh	r3, [r0, #0]
 800828a:	8812      	ldrh	r2, [r2, #0]
 800828c:	4293      	cmp	r3, r2
 800828e:	d204      	bcs.n	800829a <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 8008290:	2214      	movs	r2, #20
 8008292:	fb02 1303 	mla	r3, r2, r3, r1
 8008296:	8958      	ldrh	r0, [r3, #10]
 8008298:	bd08      	pop	{r3, pc}
 800829a:	490f      	ldr	r1, [pc, #60]	; (80082d8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 800829c:	8809      	ldrh	r1, [r1, #0]
 800829e:	4411      	add	r1, r2
 80082a0:	428b      	cmp	r3, r1
 80082a2:	da06      	bge.n	80082b2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 80082a4:	1a9b      	subs	r3, r3, r2
 80082a6:	4a0d      	ldr	r2, [pc, #52]	; (80082dc <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 80082a8:	210e      	movs	r1, #14
 80082aa:	6812      	ldr	r2, [r2, #0]
 80082ac:	fb01 2303 	mla	r3, r1, r3, r2
 80082b0:	e7f1      	b.n	8008296 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 80082b2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80082b6:	4293      	cmp	r3, r2
 80082b8:	bf0a      	itet	eq
 80082ba:	4b09      	ldreq	r3, [pc, #36]	; (80082e0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 80082bc:	2000      	movne	r0, #0
 80082be:	8818      	ldrheq	r0, [r3, #0]
 80082c0:	e7ea      	b.n	8008298 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 80082c2:	bf00      	nop
 80082c4:	2000137c 	.word	0x2000137c
 80082c8:	0800cfa9 	.word	0x0800cfa9
 80082cc:	0800d078 	.word	0x0800d078
 80082d0:	0800cf84 	.word	0x0800cf84
 80082d4:	20001378 	.word	0x20001378
 80082d8:	2000137a 	.word	0x2000137a
 80082dc:	20001374 	.word	0x20001374
 80082e0:	20001322 	.word	0x20001322

080082e4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 80082e4:	4b23      	ldr	r3, [pc, #140]	; (8008374 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 80082e6:	b510      	push	{r4, lr}
 80082e8:	681c      	ldr	r4, [r3, #0]
 80082ea:	b934      	cbnz	r4, 80082fa <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 80082ec:	4b22      	ldr	r3, [pc, #136]	; (8008378 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 80082ee:	f240 31af 	movw	r1, #943	; 0x3af
 80082f2:	4a22      	ldr	r2, [pc, #136]	; (800837c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 80082f4:	4822      	ldr	r0, [pc, #136]	; (8008380 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 80082f6:	f001 ff61 	bl	800a1bc <__assert_func>
 80082fa:	4a22      	ldr	r2, [pc, #136]	; (8008384 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 80082fc:	880b      	ldrh	r3, [r1, #0]
 80082fe:	8812      	ldrh	r2, [r2, #0]
 8008300:	4293      	cmp	r3, r2
 8008302:	d211      	bcs.n	8008328 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 8008304:	2214      	movs	r2, #20
 8008306:	fb02 4303 	mla	r3, r2, r3, r4
 800830a:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 800830e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8008312:	8a1a      	ldrh	r2, [r3, #16]
 8008314:	8a5b      	ldrh	r3, [r3, #18]
 8008316:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800831a:	8004      	strh	r4, [r0, #0]
 800831c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008320:	8041      	strh	r1, [r0, #2]
 8008322:	8082      	strh	r2, [r0, #4]
 8008324:	80c3      	strh	r3, [r0, #6]
 8008326:	e00e      	b.n	8008346 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8008328:	4917      	ldr	r1, [pc, #92]	; (8008388 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 800832a:	8809      	ldrh	r1, [r1, #0]
 800832c:	4411      	add	r1, r2
 800832e:	428b      	cmp	r3, r1
 8008330:	da0a      	bge.n	8008348 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 8008332:	1a9b      	subs	r3, r3, r2
 8008334:	4a15      	ldr	r2, [pc, #84]	; (800838c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 8008336:	210e      	movs	r1, #14
 8008338:	6812      	ldr	r2, [r2, #0]
 800833a:	fb01 2303 	mla	r3, r1, r3, r2
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	6002      	str	r2, [r0, #0]
 8008342:	685a      	ldr	r2, [r3, #4]
 8008344:	6042      	str	r2, [r0, #4]
 8008346:	bd10      	pop	{r4, pc}
 8008348:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800834c:	4293      	cmp	r3, r2
 800834e:	d10b      	bne.n	8008368 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 8008350:	4b0f      	ldr	r3, [pc, #60]	; (8008390 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 8008352:	f9b3 1000 	ldrsh.w	r1, [r3]
 8008356:	4b0f      	ldr	r3, [pc, #60]	; (8008394 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 8008358:	8081      	strh	r1, [r0, #4]
 800835a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800835e:	2300      	movs	r3, #0
 8008360:	80c2      	strh	r2, [r0, #6]
 8008362:	8003      	strh	r3, [r0, #0]
 8008364:	8043      	strh	r3, [r0, #2]
 8008366:	e7ee      	b.n	8008346 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8008368:	2300      	movs	r3, #0
 800836a:	8003      	strh	r3, [r0, #0]
 800836c:	8043      	strh	r3, [r0, #2]
 800836e:	8083      	strh	r3, [r0, #4]
 8008370:	e7d8      	b.n	8008324 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 8008372:	bf00      	nop
 8008374:	2000137c 	.word	0x2000137c
 8008378:	0800cfa9 	.word	0x0800cfa9
 800837c:	0800cfe5 	.word	0x0800cfe5
 8008380:	0800cf84 	.word	0x0800cf84
 8008384:	20001378 	.word	0x20001378
 8008388:	2000137a 	.word	0x2000137a
 800838c:	20001374 	.word	0x20001374
 8008390:	20001320 	.word	0x20001320
 8008394:	20001322 	.word	0x20001322

08008398 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8008398:	4b18      	ldr	r3, [pc, #96]	; (80083fc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	b34b      	cbz	r3, 80083f2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 800839e:	4a18      	ldr	r2, [pc, #96]	; (8008400 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 80083a0:	8800      	ldrh	r0, [r0, #0]
 80083a2:	8812      	ldrh	r2, [r2, #0]
 80083a4:	4290      	cmp	r0, r2
 80083a6:	d211      	bcs.n	80083cc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 80083a8:	2214      	movs	r2, #20
 80083aa:	fb02 3300 	mla	r3, r2, r0, r3
 80083ae:	8a1a      	ldrh	r2, [r3, #16]
 80083b0:	8919      	ldrh	r1, [r3, #8]
 80083b2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80083b6:	428a      	cmp	r2, r1
 80083b8:	db1d      	blt.n	80083f6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 80083ba:	8a58      	ldrh	r0, [r3, #18]
 80083bc:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80083c0:	895b      	ldrh	r3, [r3, #10]
 80083c2:	4298      	cmp	r0, r3
 80083c4:	bfac      	ite	ge
 80083c6:	2000      	movge	r0, #0
 80083c8:	2001      	movlt	r0, #1
 80083ca:	4770      	bx	lr
 80083cc:	4b0d      	ldr	r3, [pc, #52]	; (8008404 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 80083ce:	881b      	ldrh	r3, [r3, #0]
 80083d0:	4413      	add	r3, r2
 80083d2:	4298      	cmp	r0, r3
 80083d4:	da0d      	bge.n	80083f2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 80083d6:	4b0c      	ldr	r3, [pc, #48]	; (8008408 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 80083d8:	1a80      	subs	r0, r0, r2
 80083da:	220e      	movs	r2, #14
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	fb02 3300 	mla	r3, r2, r0, r3
 80083e2:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80083e6:	891a      	ldrh	r2, [r3, #8]
 80083e8:	4291      	cmp	r1, r2
 80083ea:	db04      	blt.n	80083f6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 80083ec:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 80083f0:	e7e6      	b.n	80083c0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 80083f2:	2000      	movs	r0, #0
 80083f4:	4770      	bx	lr
 80083f6:	2001      	movs	r0, #1
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop
 80083fc:	2000137c 	.word	0x2000137c
 8008400:	20001378 	.word	0x20001378
 8008404:	2000137a 	.word	0x2000137a
 8008408:	20001374 	.word	0x20001374

0800840c <_ZNK8touchgfx6Bitmap7getDataEv>:
 800840c:	b508      	push	{r3, lr}
 800840e:	4b12      	ldr	r3, [pc, #72]	; (8008458 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8008410:	6819      	ldr	r1, [r3, #0]
 8008412:	b931      	cbnz	r1, 8008422 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8008414:	4b11      	ldr	r3, [pc, #68]	; (800845c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8008416:	f240 31d3 	movw	r1, #979	; 0x3d3
 800841a:	4a11      	ldr	r2, [pc, #68]	; (8008460 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 800841c:	4811      	ldr	r0, [pc, #68]	; (8008464 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 800841e:	f001 fecd 	bl	800a1bc <__assert_func>
 8008422:	8803      	ldrh	r3, [r0, #0]
 8008424:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008428:	4293      	cmp	r3, r2
 800842a:	d012      	beq.n	8008452 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 800842c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008430:	4293      	cmp	r3, r2
 8008432:	d103      	bne.n	800843c <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 8008434:	4b0c      	ldr	r3, [pc, #48]	; (8008468 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800843a:	bd08      	pop	{r3, pc}
 800843c:	4a0b      	ldr	r2, [pc, #44]	; (800846c <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 800843e:	6812      	ldr	r2, [r2, #0]
 8008440:	b11a      	cbz	r2, 800844a <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 8008442:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008446:	2800      	cmp	r0, #0
 8008448:	d1f7      	bne.n	800843a <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 800844a:	2214      	movs	r2, #20
 800844c:	4353      	muls	r3, r2
 800844e:	58c8      	ldr	r0, [r1, r3]
 8008450:	e7f3      	b.n	800843a <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8008452:	2000      	movs	r0, #0
 8008454:	e7f1      	b.n	800843a <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8008456:	bf00      	nop
 8008458:	2000137c 	.word	0x2000137c
 800845c:	0800cfa9 	.word	0x0800cfa9
 8008460:	0800d01b 	.word	0x0800d01b
 8008464:	0800cf84 	.word	0x0800cf84
 8008468:	2000132c 	.word	0x2000132c
 800846c:	20001370 	.word	0x20001370

08008470 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8008470:	8802      	ldrh	r2, [r0, #0]
 8008472:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8008476:	429a      	cmp	r2, r3
 8008478:	d845      	bhi.n	8008506 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 800847a:	4b24      	ldr	r3, [pc, #144]	; (800850c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 800847c:	8818      	ldrh	r0, [r3, #0]
 800847e:	4282      	cmp	r2, r0
 8008480:	d221      	bcs.n	80084c6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 8008482:	4b23      	ldr	r3, [pc, #140]	; (8008510 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8008484:	6819      	ldr	r1, [r3, #0]
 8008486:	2314      	movs	r3, #20
 8008488:	fb03 1302 	mla	r3, r3, r2, r1
 800848c:	6858      	ldr	r0, [r3, #4]
 800848e:	2800      	cmp	r0, #0
 8008490:	d03a      	beq.n	8008508 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 8008492:	4920      	ldr	r1, [pc, #128]	; (8008514 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8008494:	6809      	ldr	r1, [r1, #0]
 8008496:	2900      	cmp	r1, #0
 8008498:	d036      	beq.n	8008508 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 800849a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800849e:	2900      	cmp	r1, #0
 80084a0:	d032      	beq.n	8008508 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 80084a2:	891a      	ldrh	r2, [r3, #8]
 80084a4:	8958      	ldrh	r0, [r3, #10]
 80084a6:	4350      	muls	r0, r2
 80084a8:	7c5a      	ldrb	r2, [r3, #17]
 80084aa:	7cdb      	ldrb	r3, [r3, #19]
 80084ac:	0952      	lsrs	r2, r2, #5
 80084ae:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80084b2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80084b6:	2b0b      	cmp	r3, #11
 80084b8:	bf18      	it	ne
 80084ba:	0040      	lslne	r0, r0, #1
 80084bc:	3003      	adds	r0, #3
 80084be:	f020 0003 	bic.w	r0, r0, #3
 80084c2:	4408      	add	r0, r1
 80084c4:	4770      	bx	lr
 80084c6:	4b14      	ldr	r3, [pc, #80]	; (8008518 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 80084c8:	881b      	ldrh	r3, [r3, #0]
 80084ca:	4403      	add	r3, r0
 80084cc:	429a      	cmp	r2, r3
 80084ce:	da1a      	bge.n	8008506 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 80084d0:	4b12      	ldr	r3, [pc, #72]	; (800851c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 80084d2:	1a10      	subs	r0, r2, r0
 80084d4:	210e      	movs	r1, #14
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	fb01 3000 	mla	r0, r1, r0, r3
 80084dc:	7b03      	ldrb	r3, [r0, #12]
 80084de:	f003 031f 	and.w	r3, r3, #31
 80084e2:	2b0b      	cmp	r3, #11
 80084e4:	d10b      	bne.n	80084fe <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80084e6:	8903      	ldrh	r3, [r0, #8]
 80084e8:	8940      	ldrh	r0, [r0, #10]
 80084ea:	4358      	muls	r0, r3
 80084ec:	4b09      	ldr	r3, [pc, #36]	; (8008514 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 80084ee:	3003      	adds	r0, #3
 80084f0:	6819      	ldr	r1, [r3, #0]
 80084f2:	f020 0303 	bic.w	r3, r0, #3
 80084f6:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80084fa:	4418      	add	r0, r3
 80084fc:	4770      	bx	lr
 80084fe:	2b0d      	cmp	r3, #13
 8008500:	d101      	bne.n	8008506 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 8008502:	300d      	adds	r0, #13
 8008504:	4770      	bx	lr
 8008506:	2000      	movs	r0, #0
 8008508:	4770      	bx	lr
 800850a:	bf00      	nop
 800850c:	20001378 	.word	0x20001378
 8008510:	2000137c 	.word	0x2000137c
 8008514:	20001370 	.word	0x20001370
 8008518:	2000137a 	.word	0x2000137a
 800851c:	20001374 	.word	0x20001374

08008520 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8008520:	4b19      	ldr	r3, [pc, #100]	; (8008588 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8008522:	6819      	ldr	r1, [r3, #0]
 8008524:	8803      	ldrh	r3, [r0, #0]
 8008526:	b1e9      	cbz	r1, 8008564 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8008528:	4a18      	ldr	r2, [pc, #96]	; (800858c <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 800852a:	8812      	ldrh	r2, [r2, #0]
 800852c:	429a      	cmp	r2, r3
 800852e:	d90a      	bls.n	8008546 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8008530:	2214      	movs	r2, #20
 8008532:	fb02 1303 	mla	r3, r2, r3, r1
 8008536:	7c58      	ldrb	r0, [r3, #17]
 8008538:	0942      	lsrs	r2, r0, #5
 800853a:	7cd8      	ldrb	r0, [r3, #19]
 800853c:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8008540:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8008544:	4770      	bx	lr
 8008546:	4912      	ldr	r1, [pc, #72]	; (8008590 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 8008548:	8809      	ldrh	r1, [r1, #0]
 800854a:	4411      	add	r1, r2
 800854c:	428b      	cmp	r3, r1
 800854e:	da09      	bge.n	8008564 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8008550:	1a9b      	subs	r3, r3, r2
 8008552:	4a10      	ldr	r2, [pc, #64]	; (8008594 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 8008554:	210e      	movs	r1, #14
 8008556:	6812      	ldr	r2, [r2, #0]
 8008558:	fb01 2303 	mla	r3, r1, r3, r2
 800855c:	7b18      	ldrb	r0, [r3, #12]
 800855e:	f000 001f 	and.w	r0, r0, #31
 8008562:	4770      	bx	lr
 8008564:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008568:	4293      	cmp	r3, r2
 800856a:	d10a      	bne.n	8008582 <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 800856c:	4b0a      	ldr	r3, [pc, #40]	; (8008598 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8008574:	b10a      	cbz	r2, 800857a <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8008576:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8008578:	b900      	cbnz	r0, 800857c <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 800857a:	6898      	ldr	r0, [r3, #8]
 800857c:	6803      	ldr	r3, [r0, #0]
 800857e:	6a1b      	ldr	r3, [r3, #32]
 8008580:	4718      	bx	r3
 8008582:	2000      	movs	r0, #0
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop
 8008588:	2000137c 	.word	0x2000137c
 800858c:	20001378 	.word	0x20001378
 8008590:	2000137a 	.word	0x2000137a
 8008594:	20001374 	.word	0x20001374
 8008598:	2000132c 	.word	0x2000132c

0800859c <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 800859c:	2010      	movs	r0, #16
 800859e:	4770      	bx	lr

080085a0 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 80085a0:	2000      	movs	r0, #0
 80085a2:	4770      	bx	lr

080085a4 <_ZNK8touchgfx8LCD16bpp20getColorFrom24BitRGBEhhh>:
 80085a4:	00d2      	lsls	r2, r2, #3
 80085a6:	0209      	lsls	r1, r1, #8
 80085a8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80085ac:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 80085b0:	ea42 02d3 	orr.w	r2, r2, r3, lsr #3
 80085b4:	4310      	orrs	r0, r2
 80085b6:	4770      	bx	lr

080085b8 <_ZNK8touchgfx8LCD16bpp11getRedColorENS_9colortypeE>:
 80085b8:	0a09      	lsrs	r1, r1, #8
 80085ba:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 80085be:	4770      	bx	lr

080085c0 <_ZNK8touchgfx8LCD16bpp13getGreenColorENS_9colortypeE>:
 80085c0:	08c9      	lsrs	r1, r1, #3
 80085c2:	f001 00fc 	and.w	r0, r1, #252	; 0xfc
 80085c6:	4770      	bx	lr

080085c8 <_ZNK8touchgfx8LCD16bpp12getBlueColorENS_9colortypeE>:
 80085c8:	00c9      	lsls	r1, r1, #3
 80085ca:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 80085ce:	4770      	bx	lr

080085d0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80085d0:	2bff      	cmp	r3, #255	; 0xff
 80085d2:	d050      	beq.n	8008676 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 80085d4:	2a0b      	cmp	r2, #11
 80085d6:	d04a      	beq.n	800866e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80085d8:	d80e      	bhi.n	80085f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 80085da:	2a03      	cmp	r2, #3
 80085dc:	d03f      	beq.n	800865e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 80085de:	d804      	bhi.n	80085ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80085e0:	2a01      	cmp	r2, #1
 80085e2:	d03e      	beq.n	8008662 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 80085e4:	d93f      	bls.n	8008666 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 80085e6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80085e8:	4770      	bx	lr
 80085ea:	2a09      	cmp	r2, #9
 80085ec:	d03f      	beq.n	800866e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80085ee:	d83c      	bhi.n	800866a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 80085f0:	2a08      	cmp	r2, #8
 80085f2:	d03a      	beq.n	800866a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 80085f4:	2000      	movs	r0, #0
 80085f6:	4770      	bx	lr
 80085f8:	2a2f      	cmp	r2, #47	; 0x2f
 80085fa:	d024      	beq.n	8008646 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 80085fc:	d80d      	bhi.n	800861a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 80085fe:	2a2d      	cmp	r2, #45	; 0x2d
 8008600:	d014      	beq.n	800862c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 8008602:	d826      	bhi.n	8008652 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8008604:	2a2c      	cmp	r2, #44	; 0x2c
 8008606:	d1f5      	bne.n	80085f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8008608:	684b      	ldr	r3, [r1, #4]
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	2b01      	cmp	r3, #1
 800860e:	d018      	beq.n	8008642 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8008610:	d323      	bcc.n	800865a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 8008612:	2b02      	cmp	r3, #2
 8008614:	d1ee      	bne.n	80085f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8008616:	6880      	ldr	r0, [r0, #8]
 8008618:	4770      	bx	lr
 800861a:	2a31      	cmp	r2, #49	; 0x31
 800861c:	d004      	beq.n	8008628 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 800861e:	d328      	bcc.n	8008672 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8008620:	2a32      	cmp	r2, #50	; 0x32
 8008622:	d026      	beq.n	8008672 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8008624:	2a33      	cmp	r2, #51	; 0x33
 8008626:	d1e5      	bne.n	80085f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8008628:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800862a:	4770      	bx	lr
 800862c:	684b      	ldr	r3, [r1, #4]
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	2b01      	cmp	r3, #1
 8008632:	d004      	beq.n	800863e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8008634:	d30b      	bcc.n	800864e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8008636:	2b02      	cmp	r3, #2
 8008638:	d1dc      	bne.n	80085f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800863a:	6900      	ldr	r0, [r0, #16]
 800863c:	4770      	bx	lr
 800863e:	6a00      	ldr	r0, [r0, #32]
 8008640:	4770      	bx	lr
 8008642:	6980      	ldr	r0, [r0, #24]
 8008644:	4770      	bx	lr
 8008646:	684b      	ldr	r3, [r1, #4]
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d1d2      	bne.n	80085f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800864e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8008650:	4770      	bx	lr
 8008652:	684b      	ldr	r3, [r1, #4]
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d1cc      	bne.n	80085f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 800865a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800865c:	4770      	bx	lr
 800865e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8008660:	4770      	bx	lr
 8008662:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8008664:	4770      	bx	lr
 8008666:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8008668:	4770      	bx	lr
 800866a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800866c:	4770      	bx	lr
 800866e:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8008670:	4770      	bx	lr
 8008672:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8008674:	4770      	bx	lr
 8008676:	2a0b      	cmp	r2, #11
 8008678:	d049      	beq.n	800870e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 800867a:	d80e      	bhi.n	800869a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 800867c:	2a03      	cmp	r2, #3
 800867e:	d040      	beq.n	8008702 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8008680:	d804      	bhi.n	800868c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 8008682:	2a01      	cmp	r2, #1
 8008684:	d03f      	beq.n	8008706 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8008686:	d940      	bls.n	800870a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8008688:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800868a:	4770      	bx	lr
 800868c:	2a09      	cmp	r2, #9
 800868e:	d03e      	beq.n	800870e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8008690:	d801      	bhi.n	8008696 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 8008692:	2a08      	cmp	r2, #8
 8008694:	d1ae      	bne.n	80085f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8008696:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8008698:	4770      	bx	lr
 800869a:	2a2f      	cmp	r2, #47	; 0x2f
 800869c:	d024      	beq.n	80086e8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 800869e:	d80d      	bhi.n	80086bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 80086a0:	2a2d      	cmp	r2, #45	; 0x2d
 80086a2:	d014      	beq.n	80086ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 80086a4:	d826      	bhi.n	80086f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 80086a6:	2a2c      	cmp	r2, #44	; 0x2c
 80086a8:	d1a4      	bne.n	80085f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80086aa:	684b      	ldr	r3, [r1, #4]
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d018      	beq.n	80086e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 80086b2:	d324      	bcc.n	80086fe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 80086b4:	2b02      	cmp	r3, #2
 80086b6:	d19d      	bne.n	80085f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80086b8:	68c0      	ldr	r0, [r0, #12]
 80086ba:	4770      	bx	lr
 80086bc:	2a31      	cmp	r2, #49	; 0x31
 80086be:	d004      	beq.n	80086ca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 80086c0:	d327      	bcc.n	8008712 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 80086c2:	2a32      	cmp	r2, #50	; 0x32
 80086c4:	d025      	beq.n	8008712 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 80086c6:	2a33      	cmp	r2, #51	; 0x33
 80086c8:	d194      	bne.n	80085f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80086ca:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80086cc:	4770      	bx	lr
 80086ce:	684b      	ldr	r3, [r1, #4]
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d004      	beq.n	80086e0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 80086d6:	d30b      	bcc.n	80086f0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 80086d8:	2b02      	cmp	r3, #2
 80086da:	d18b      	bne.n	80085f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80086dc:	6940      	ldr	r0, [r0, #20]
 80086de:	4770      	bx	lr
 80086e0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80086e2:	4770      	bx	lr
 80086e4:	69c0      	ldr	r0, [r0, #28]
 80086e6:	4770      	bx	lr
 80086e8:	684b      	ldr	r3, [r1, #4]
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d181      	bne.n	80085f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80086f0:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80086f2:	4770      	bx	lr
 80086f4:	684b      	ldr	r3, [r1, #4]
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f47f af7b 	bne.w	80085f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80086fe:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8008700:	4770      	bx	lr
 8008702:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8008704:	4770      	bx	lr
 8008706:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8008708:	4770      	bx	lr
 800870a:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800870c:	4770      	bx	lr
 800870e:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8008710:	4770      	bx	lr
 8008712:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8008714:	4770      	bx	lr

08008716 <_ZN8touchgfx8LCD16bppD1Ev>:
 8008716:	4770      	bx	lr

08008718 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8008718:	b508      	push	{r3, lr}
 800871a:	4b06      	ldr	r3, [pc, #24]	; (8008734 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 800871c:	8818      	ldrh	r0, [r3, #0]
 800871e:	b928      	cbnz	r0, 800872c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 8008720:	4b05      	ldr	r3, [pc, #20]	; (8008738 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 8008722:	2154      	movs	r1, #84	; 0x54
 8008724:	4a05      	ldr	r2, [pc, #20]	; (800873c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 8008726:	4806      	ldr	r0, [pc, #24]	; (8008740 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 8008728:	f001 fd48 	bl	800a1bc <__assert_func>
 800872c:	0040      	lsls	r0, r0, #1
 800872e:	b280      	uxth	r0, r0
 8008730:	bd08      	pop	{r3, pc}
 8008732:	bf00      	nop
 8008734:	20001326 	.word	0x20001326
 8008738:	0800d461 	.word	0x0800d461
 800873c:	0800d74d 	.word	0x0800d74d
 8008740:	0800d4a3 	.word	0x0800d4a3

08008744 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8008744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008748:	b08b      	sub	sp, #44	; 0x2c
 800874a:	460f      	mov	r7, r1
 800874c:	4616      	mov	r6, r2
 800874e:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 8008752:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8008756:	f1bb 0f00 	cmp.w	fp, #0
 800875a:	d046      	beq.n	80087ea <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 800875c:	6810      	ldr	r0, [r2, #0]
 800875e:	ad06      	add	r5, sp, #24
 8008760:	6851      	ldr	r1, [r2, #4]
 8008762:	c503      	stmia	r5!, {r0, r1}
 8008764:	6818      	ldr	r0, [r3, #0]
 8008766:	ad08      	add	r5, sp, #32
 8008768:	6859      	ldr	r1, [r3, #4]
 800876a:	c503      	stmia	r5!, {r0, r1}
 800876c:	a806      	add	r0, sp, #24
 800876e:	f7fe fc11 	bl	8006f94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8008772:	4631      	mov	r1, r6
 8008774:	a808      	add	r0, sp, #32
 8008776:	f7fe fbf5 	bl	8006f64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800877a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800877e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8008782:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8008786:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 800878a:	fb16 2103 	smlabb	r1, r6, r3, r2
 800878e:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8008792:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 8008796:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 800879a:	4f5d      	ldr	r7, [pc, #372]	; (8008910 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1cc>)
 800879c:	440a      	add	r2, r1
 800879e:	6838      	ldr	r0, [r7, #0]
 80087a0:	46b9      	mov	r9, r7
 80087a2:	f8ad 2020 	strh.w	r2, [sp, #32]
 80087a6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80087aa:	4413      	add	r3, r2
 80087ac:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80087b0:	6803      	ldr	r3, [r0, #0]
 80087b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b4:	4798      	blx	r3
 80087b6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80087ba:	d019      	beq.n	80087f0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 80087bc:	f010 0f04 	tst.w	r0, #4
 80087c0:	d01a      	beq.n	80087f8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 80087c2:	f8d9 0000 	ldr.w	r0, [r9]
 80087c6:	b2ad      	uxth	r5, r5
 80087c8:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80087cc:	6801      	ldr	r1, [r0, #0]
 80087ce:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80087d2:	9501      	str	r5, [sp, #4]
 80087d4:	e9cd b403 	strd	fp, r4, [sp, #12]
 80087d8:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 80087dc:	9402      	str	r4, [sp, #8]
 80087de:	fa1f f488 	uxth.w	r4, r8
 80087e2:	9400      	str	r4, [sp, #0]
 80087e4:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 80087e6:	4631      	mov	r1, r6
 80087e8:	47a0      	blx	r4
 80087ea:	b00b      	add	sp, #44	; 0x2c
 80087ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087f0:	b914      	cbnz	r4, 80087f8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 80087f2:	f010 0f01 	tst.w	r0, #1
 80087f6:	e7e3      	b.n	80087c0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 80087f8:	f8d9 0000 	ldr.w	r0, [r9]
 80087fc:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8008800:	6803      	ldr	r3, [r0, #0]
 8008802:	6a1b      	ldr	r3, [r3, #32]
 8008804:	4798      	blx	r3
 8008806:	4b43      	ldr	r3, [pc, #268]	; (8008914 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d0>)
 8008808:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 800880c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8008810:	881a      	ldrh	r2, [r3, #0]
 8008812:	469a      	mov	sl, r3
 8008814:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8008818:	fb05 f502 	mul.w	r5, r5, r2
 800881c:	fb02 1404 	mla	r4, r2, r4, r1
 8008820:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8008824:	d058      	beq.n	80088d8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x194>
 8008826:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 800882a:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 800882e:	fa1f f28b 	uxth.w	r2, fp
 8008832:	469e      	mov	lr, r3
 8008834:	fa1f f989 	uxth.w	r9, r9
 8008838:	42ac      	cmp	r4, r5
 800883a:	d263      	bcs.n	8008904 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c0>
 800883c:	eb04 0a07 	add.w	sl, r4, r7
 8008840:	4554      	cmp	r4, sl
 8008842:	d23c      	bcs.n	80088be <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x17a>
 8008844:	8821      	ldrh	r1, [r4, #0]
 8008846:	f836 3b02 	ldrh.w	r3, [r6], #2
 800884a:	1208      	asrs	r0, r1, #8
 800884c:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8008850:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8008854:	ea4f 0be1 	mov.w	fp, r1, asr #3
 8008858:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 800885c:	00c9      	lsls	r1, r1, #3
 800885e:	fb10 f009 	smulbb	r0, r0, r9
 8008862:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8008866:	b2c9      	uxtb	r1, r1
 8008868:	fb0c 0c02 	mla	ip, ip, r2, r0
 800886c:	10d8      	asrs	r0, r3, #3
 800886e:	fb11 f109 	smulbb	r1, r1, r9
 8008872:	00db      	lsls	r3, r3, #3
 8008874:	fa1f fc8c 	uxth.w	ip, ip
 8008878:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 800887c:	fb1b fb09 	smulbb	fp, fp, r9
 8008880:	b2db      	uxtb	r3, r3
 8008882:	fb03 1302 	mla	r3, r3, r2, r1
 8008886:	f10c 0101 	add.w	r1, ip, #1
 800888a:	fb00 b002 	mla	r0, r0, r2, fp
 800888e:	b29b      	uxth	r3, r3
 8008890:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8008894:	1c59      	adds	r1, r3, #1
 8008896:	b280      	uxth	r0, r0
 8008898:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 800889c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80088a0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80088a4:	ea4c 0c03 	orr.w	ip, ip, r3
 80088a8:	1c43      	adds	r3, r0, #1
 80088aa:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80088ae:	0940      	lsrs	r0, r0, #5
 80088b0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80088b4:	ea4c 0c00 	orr.w	ip, ip, r0
 80088b8:	f824 cb02 	strh.w	ip, [r4], #2
 80088bc:	e7c0      	b.n	8008840 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 80088be:	f8be 3000 	ldrh.w	r3, [lr]
 80088c2:	eba3 0308 	sub.w	r3, r3, r8
 80088c6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80088ca:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80088ce:	eba3 0308 	sub.w	r3, r3, r8
 80088d2:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80088d6:	e7af      	b.n	8008838 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 80088d8:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80088dc:	f8d9 0000 	ldr.w	r0, [r9]
 80088e0:	42ac      	cmp	r4, r5
 80088e2:	6803      	ldr	r3, [r0, #0]
 80088e4:	d20e      	bcs.n	8008904 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c0>
 80088e6:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
 80088ea:	4632      	mov	r2, r6
 80088ec:	463b      	mov	r3, r7
 80088ee:	4621      	mov	r1, r4
 80088f0:	47c0      	blx	r8
 80088f2:	f8ba 3000 	ldrh.w	r3, [sl]
 80088f6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80088fa:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80088fe:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8008902:	e7eb      	b.n	80088dc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>
 8008904:	4b02      	ldr	r3, [pc, #8]	; (8008910 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1cc>)
 8008906:	6818      	ldr	r0, [r3, #0]
 8008908:	6803      	ldr	r3, [r0, #0]
 800890a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890c:	4798      	blx	r3
 800890e:	e76c      	b.n	80087ea <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 8008910:	2000132c 	.word	0x2000132c
 8008914:	20001326 	.word	0x20001326

08008918 <_ZN8touchgfx8LCD16bppD0Ev>:
 8008918:	b510      	push	{r4, lr}
 800891a:	4604      	mov	r4, r0
 800891c:	2178      	movs	r1, #120	; 0x78
 800891e:	f001 fbf1 	bl	800a104 <_ZdlPvj>
 8008922:	4620      	mov	r0, r4
 8008924:	bd10      	pop	{r4, pc}
	...

08008928 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8008928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800892c:	460d      	mov	r5, r1
 800892e:	b087      	sub	sp, #28
 8008930:	4614      	mov	r4, r2
 8008932:	4698      	mov	r8, r3
 8008934:	b333      	cbz	r3, 8008984 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8008936:	4608      	mov	r0, r1
 8008938:	f7fe fb44 	bl	8006fc4 <_ZNK8touchgfx4Rect7isEmptyEv>
 800893c:	bb10      	cbnz	r0, 8008984 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 800893e:	6828      	ldr	r0, [r5, #0]
 8008940:	ab04      	add	r3, sp, #16
 8008942:	6869      	ldr	r1, [r5, #4]
 8008944:	4e72      	ldr	r6, [pc, #456]	; (8008b10 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1e8>)
 8008946:	c303      	stmia	r3!, {r0, r1}
 8008948:	a804      	add	r0, sp, #16
 800894a:	f7fe fb23 	bl	8006f94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800894e:	6830      	ldr	r0, [r6, #0]
 8008950:	6803      	ldr	r3, [r0, #0]
 8008952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008954:	4798      	blx	r3
 8008956:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800895a:	d016      	beq.n	800898a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 800895c:	f010 0f08 	tst.w	r0, #8
 8008960:	d016      	beq.n	8008990 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x68>
 8008962:	f8bd 5016 	ldrh.w	r5, [sp, #22]
 8008966:	6830      	ldr	r0, [r6, #0]
 8008968:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800896c:	6801      	ldr	r1, [r0, #0]
 800896e:	9501      	str	r5, [sp, #4]
 8008970:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 8008974:	f8cd 8008 	str.w	r8, [sp, #8]
 8008978:	9500      	str	r5, [sp, #0]
 800897a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800897e:	6c8d      	ldr	r5, [r1, #72]	; 0x48
 8008980:	4621      	mov	r1, r4
 8008982:	47a8      	blx	r5
 8008984:	b007      	add	sp, #28
 8008986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800898a:	f010 0f02 	tst.w	r0, #2
 800898e:	e7e7      	b.n	8008960 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x38>
 8008990:	6830      	ldr	r0, [r6, #0]
 8008992:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8008996:	6803      	ldr	r3, [r0, #0]
 8008998:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 800899c:	6a1b      	ldr	r3, [r3, #32]
 800899e:	4798      	blx	r3
 80089a0:	495c      	ldr	r1, [pc, #368]	; (8008b14 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1ec>)
 80089a2:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 80089a6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80089aa:	880b      	ldrh	r3, [r1, #0]
 80089ac:	468e      	mov	lr, r1
 80089ae:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 80089b2:	fb03 c202 	mla	r2, r3, r2, ip
 80089b6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80089ba:	fb07 f203 	mul.w	r2, r7, r3
 80089be:	d053      	beq.n	8008a68 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x140>
 80089c0:	fa1f f388 	uxth.w	r3, r8
 80089c4:	f1c8 07ff 	rsb	r7, r8, #255	; 0xff
 80089c8:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 80089cc:	ea4f 2814 	mov.w	r8, r4, lsr #8
 80089d0:	00e4      	lsls	r4, r4, #3
 80089d2:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80089d6:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 80089da:	eb00 0142 	add.w	r1, r0, r2, lsl #1
 80089de:	b2e4      	uxtb	r4, r4
 80089e0:	fb09 f903 	mul.w	r9, r9, r3
 80089e4:	fb08 f803 	mul.w	r8, r8, r3
 80089e8:	006d      	lsls	r5, r5, #1
 80089ea:	4363      	muls	r3, r4
 80089ec:	b2bc      	uxth	r4, r7
 80089ee:	4288      	cmp	r0, r1
 80089f0:	f080 8088 	bcs.w	8008b04 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 80089f4:	eb00 0a05 	add.w	sl, r0, r5
 80089f8:	4550      	cmp	r0, sl
 80089fa:	d22f      	bcs.n	8008a5c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x134>
 80089fc:	8802      	ldrh	r2, [r0, #0]
 80089fe:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8008a02:	10d7      	asrs	r7, r2, #3
 8008a04:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8008a08:	00d2      	lsls	r2, r2, #3
 8008a0a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8008a0e:	fb1c fc04 	smulbb	ip, ip, r4
 8008a12:	b2d2      	uxtb	r2, r2
 8008a14:	fb17 f704 	smulbb	r7, r7, r4
 8008a18:	fb12 f204 	smulbb	r2, r2, r4
 8008a1c:	44c4      	add	ip, r8
 8008a1e:	444f      	add	r7, r9
 8008a20:	fa1f fc8c 	uxth.w	ip, ip
 8008a24:	441a      	add	r2, r3
 8008a26:	b2bf      	uxth	r7, r7
 8008a28:	b292      	uxth	r2, r2
 8008a2a:	f10c 0b01 	add.w	fp, ip, #1
 8008a2e:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8008a32:	f102 0b01 	add.w	fp, r2, #1
 8008a36:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8008a3a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8008a3e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8008a42:	ea4c 0202 	orr.w	r2, ip, r2
 8008a46:	f107 0c01 	add.w	ip, r7, #1
 8008a4a:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8008a4e:	097f      	lsrs	r7, r7, #5
 8008a50:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8008a54:	433a      	orrs	r2, r7
 8008a56:	f820 2b02 	strh.w	r2, [r0], #2
 8008a5a:	e7cd      	b.n	80089f8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xd0>
 8008a5c:	f8be 2000 	ldrh.w	r2, [lr]
 8008a60:	ebc5 0242 	rsb	r2, r5, r2, lsl #1
 8008a64:	4410      	add	r0, r2
 8008a66:	e7c2      	b.n	80089ee <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xc6>
 8008a68:	07db      	lsls	r3, r3, #31
 8008a6a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8008a6e:	d50e      	bpl.n	8008a8e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x166>
 8008a70:	006d      	lsls	r5, r5, #1
 8008a72:	4290      	cmp	r0, r2
 8008a74:	d246      	bcs.n	8008b04 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 8008a76:	1943      	adds	r3, r0, r5
 8008a78:	4298      	cmp	r0, r3
 8008a7a:	d202      	bcs.n	8008a82 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x15a>
 8008a7c:	f820 4b02 	strh.w	r4, [r0], #2
 8008a80:	e7fa      	b.n	8008a78 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x150>
 8008a82:	f8be 3000 	ldrh.w	r3, [lr]
 8008a86:	ebc5 0343 	rsb	r3, r5, r3, lsl #1
 8008a8a:	4418      	add	r0, r3
 8008a8c:	e7f1      	b.n	8008a72 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x14a>
 8008a8e:	0787      	lsls	r7, r0, #30
 8008a90:	462b      	mov	r3, r5
 8008a92:	d00a      	beq.n	8008aaa <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x182>
 8008a94:	4603      	mov	r3, r0
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d205      	bcs.n	8008aa6 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17e>
 8008a9a:	801c      	strh	r4, [r3, #0]
 8008a9c:	f8be 1000 	ldrh.w	r1, [lr]
 8008aa0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8008aa4:	e7f7      	b.n	8008a96 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x16e>
 8008aa6:	3002      	adds	r0, #2
 8008aa8:	1e6b      	subs	r3, r5, #1
 8008aaa:	07dd      	lsls	r5, r3, #31
 8008aac:	d50d      	bpl.n	8008aca <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1a2>
 8008aae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008ab2:	3901      	subs	r1, #1
 8008ab4:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8008ab8:	4291      	cmp	r1, r2
 8008aba:	d205      	bcs.n	8008ac8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1a0>
 8008abc:	800c      	strh	r4, [r1, #0]
 8008abe:	f8be 5000 	ldrh.w	r5, [lr]
 8008ac2:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 8008ac6:	e7f7      	b.n	8008ab8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x190>
 8008ac8:	3b01      	subs	r3, #1
 8008aca:	b1db      	cbz	r3, 8008b04 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 8008acc:	b2a1      	uxth	r1, r4
 8008ace:	105b      	asrs	r3, r3, #1
 8008ad0:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	4290      	cmp	r0, r2
 8008ad8:	d214      	bcs.n	8008b04 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1dc>
 8008ada:	0781      	lsls	r1, r0, #30
 8008adc:	d006      	beq.n	8008aec <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c4>
 8008ade:	4b0e      	ldr	r3, [pc, #56]	; (8008b18 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f0>)
 8008ae0:	f44f 7162 	mov.w	r1, #904	; 0x388
 8008ae4:	4a0d      	ldr	r2, [pc, #52]	; (8008b1c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f4>)
 8008ae6:	480e      	ldr	r0, [pc, #56]	; (8008b20 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1f8>)
 8008ae8:	f001 fb68 	bl	800a1bc <__assert_func>
 8008aec:	18c5      	adds	r5, r0, r3
 8008aee:	4601      	mov	r1, r0
 8008af0:	42a9      	cmp	r1, r5
 8008af2:	d202      	bcs.n	8008afa <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1d2>
 8008af4:	f841 4b04 	str.w	r4, [r1], #4
 8008af8:	e7fa      	b.n	8008af0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c8>
 8008afa:	f8be 1000 	ldrh.w	r1, [lr]
 8008afe:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8008b02:	e7e8      	b.n	8008ad6 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1ae>
 8008b04:	6830      	ldr	r0, [r6, #0]
 8008b06:	6803      	ldr	r3, [r0, #0]
 8008b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b0a:	4798      	blx	r3
 8008b0c:	e73a      	b.n	8008984 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8008b0e:	bf00      	nop
 8008b10:	2000132c 	.word	0x2000132c
 8008b14:	20001326 	.word	0x20001326
 8008b18:	0800d400 	.word	0x0800d400
 8008b1c:	0800d8a5 	.word	0x0800d8a5
 8008b20:	0800d42f 	.word	0x0800d42f

08008b24 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8008b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b28:	4f97      	ldr	r7, [pc, #604]	; (8008d88 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x264>)
 8008b2a:	4616      	mov	r6, r2
 8008b2c:	b08f      	sub	sp, #60	; 0x3c
 8008b2e:	4604      	mov	r4, r0
 8008b30:	683a      	ldr	r2, [r7, #0]
 8008b32:	4689      	mov	r9, r1
 8008b34:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8008b38:	2a02      	cmp	r2, #2
 8008b3a:	d106      	bne.n	8008b4a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 8008b3c:	4b93      	ldr	r3, [pc, #588]	; (8008d8c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x268>)
 8008b3e:	f44f 7132 	mov.w	r1, #712	; 0x2c8
 8008b42:	4a93      	ldr	r2, [pc, #588]	; (8008d90 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8008b44:	4893      	ldr	r0, [pc, #588]	; (8008d94 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x270>)
 8008b46:	f001 fb39 	bl	800a1bc <__assert_func>
 8008b4a:	ad0e      	add	r5, sp, #56	; 0x38
 8008b4c:	f825 3d24 	strh.w	r3, [r5, #-36]!
 8008b50:	4628      	mov	r0, r5
 8008b52:	f7ff fce5 	bl	8008520 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8008b56:	6823      	ldr	r3, [r4, #0]
 8008b58:	4680      	mov	r8, r0
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	6a1b      	ldr	r3, [r3, #32]
 8008b5e:	4798      	blx	r3
 8008b60:	4580      	cmp	r8, r0
 8008b62:	d004      	beq.n	8008b6e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 8008b64:	4b8c      	ldr	r3, [pc, #560]	; (8008d98 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 8008b66:	f240 21ca 	movw	r1, #714	; 0x2ca
 8008b6a:	4a89      	ldr	r2, [pc, #548]	; (8008d90 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8008b6c:	e7ea      	b.n	8008b44 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8008b6e:	4628      	mov	r0, r5
 8008b70:	f7ff fc4c 	bl	800840c <_ZNK8touchgfx6Bitmap7getDataEv>
 8008b74:	4680      	mov	r8, r0
 8008b76:	b920      	cbnz	r0, 8008b82 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 8008b78:	4b88      	ldr	r3, [pc, #544]	; (8008d9c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 8008b7a:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8008b7e:	4a84      	ldr	r2, [pc, #528]	; (8008d90 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8008b80:	e7e0      	b.n	8008b44 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8008b82:	6830      	ldr	r0, [r6, #0]
 8008b84:	ab06      	add	r3, sp, #24
 8008b86:	6871      	ldr	r1, [r6, #4]
 8008b88:	f10d 0b20 	add.w	fp, sp, #32
 8008b8c:	f9b6 a000 	ldrsh.w	sl, [r6]
 8008b90:	c303      	stmia	r3!, {r0, r1}
 8008b92:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008b96:	ab08      	add	r3, sp, #32
 8008b98:	f8d9 0000 	ldr.w	r0, [r9]
 8008b9c:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8008ba0:	c303      	stmia	r3!, {r0, r1}
 8008ba2:	4628      	mov	r0, r5
 8008ba4:	f7ff fb2a 	bl	80081fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8008ba8:	4606      	mov	r6, r0
 8008baa:	4628      	mov	r0, r5
 8008bac:	4d7c      	ldr	r5, [pc, #496]	; (8008da0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 8008bae:	f7ff fb5f 	bl	8008270 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8008bb2:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 8008bb6:	a806      	add	r0, sp, #24
 8008bb8:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8008bbc:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8008bc0:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 8008bc4:	f7fe f9e6 	bl	8006f94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8008bc8:	4658      	mov	r0, fp
 8008bca:	f7fe f9e3 	bl	8006f94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8008bce:	a80a      	add	r0, sp, #40	; 0x28
 8008bd0:	f7fe f9e0 	bl	8006f94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8008bd4:	4b73      	ldr	r3, [pc, #460]	; (8008da4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 8008bd6:	2100      	movs	r1, #0
 8008bd8:	f9b5 2000 	ldrsh.w	r2, [r5]
 8008bdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008be0:	4658      	mov	r0, fp
 8008be2:	910c      	str	r1, [sp, #48]	; 0x30
 8008be4:	a90c      	add	r1, sp, #48	; 0x30
 8008be6:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8008bea:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8008bee:	f7fc fda5 	bl	800573c <_ZN8touchgfx4RectaNERKS0_>
 8008bf2:	4658      	mov	r0, fp
 8008bf4:	f7fe f9e6 	bl	8006fc4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8008bf8:	2800      	cmp	r0, #0
 8008bfa:	f040 809a 	bne.w	8008d32 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8008bfe:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 8008c02:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8008c06:	4288      	cmp	r0, r1
 8008c08:	db38      	blt.n	8008c7c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8008c0a:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 8008c0e:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	db32      	blt.n	8008c7c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8008c16:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 8008c1a:	4430      	add	r0, r6
 8008c1c:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8008c20:	4431      	add	r1, r6
 8008c22:	b200      	sxth	r0, r0
 8008c24:	b209      	sxth	r1, r1
 8008c26:	4288      	cmp	r0, r1
 8008c28:	dc28      	bgt.n	8008c7c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8008c2a:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8008c2e:	440a      	add	r2, r1
 8008c30:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8008c34:	440b      	add	r3, r1
 8008c36:	b212      	sxth	r2, r2
 8008c38:	b21b      	sxth	r3, r3
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	dc1e      	bgt.n	8008c7c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8008c3e:	6823      	ldr	r3, [r4, #0]
 8008c40:	4620      	mov	r0, r4
 8008c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c44:	4798      	blx	r3
 8008c46:	4682      	mov	sl, r0
 8008c48:	6838      	ldr	r0, [r7, #0]
 8008c4a:	6803      	ldr	r3, [r0, #0]
 8008c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c4e:	4798      	blx	r3
 8008c50:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8008c54:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8008c58:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8008c5c:	1a5b      	subs	r3, r3, r1
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	b21c      	sxth	r4, r3
 8008c62:	2c00      	cmp	r4, #0
 8008c64:	dc0f      	bgt.n	8008c86 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x162>
 8008c66:	bf18      	it	ne
 8008c68:	f8ad 1020 	strhne.w	r1, [sp, #32]
 8008c6c:	4644      	mov	r4, r8
 8008c6e:	bf1e      	ittt	ne
 8008c70:	f8bd 1024 	ldrhne.w	r1, [sp, #36]	; 0x24
 8008c74:	185b      	addne	r3, r3, r1
 8008c76:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 8008c7a:	e009      	b.n	8008c90 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16c>
 8008c7c:	4b4a      	ldr	r3, [pc, #296]	; (8008da8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 8008c7e:	f240 21da 	movw	r1, #730	; 0x2da
 8008c82:	4a43      	ldr	r2, [pc, #268]	; (8008d90 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8008c84:	e75e      	b.n	8008b44 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8008c86:	1ad3      	subs	r3, r2, r3
 8008c88:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8008c8c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8008c90:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	; 0x2a
 8008c94:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8008c98:	1b9b      	subs	r3, r3, r6
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	b219      	sxth	r1, r3
 8008c9e:	2900      	cmp	r1, #0
 8008ca0:	dd4b      	ble.n	8008d3a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x216>
 8008ca2:	4351      	muls	r1, r2
 8008ca4:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8008ca8:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8008cac:	1acb      	subs	r3, r1, r3
 8008cae:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8008cb2:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 8008cb6:	2e00      	cmp	r6, #0
 8008cb8:	dd3b      	ble.n	8008d32 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8008cba:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	dd37      	ble.n	8008d32 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8008cc2:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8008cc6:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8008cca:	fb0a f90c 	mul.w	r9, sl, ip
 8008cce:	eb09 0941 	add.w	r9, r9, r1, lsl #1
 8008cd2:	4481      	add	r9, r0
 8008cd4:	8828      	ldrh	r0, [r5, #0]
 8008cd6:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 8008cda:	1a41      	subs	r1, r0, r1
 8008cdc:	42ae      	cmp	r6, r5
 8008cde:	bfa8      	it	ge
 8008ce0:	462e      	movge	r6, r5
 8008ce2:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8008ce6:	428e      	cmp	r6, r1
 8008ce8:	bfa8      	it	ge
 8008cea:	460e      	movge	r6, r1
 8008cec:	429d      	cmp	r5, r3
 8008cee:	bfa8      	it	ge
 8008cf0:	461d      	movge	r5, r3
 8008cf2:	4b2c      	ldr	r3, [pc, #176]	; (8008da4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 8008cf4:	881b      	ldrh	r3, [r3, #0]
 8008cf6:	eba3 030c 	sub.w	r3, r3, ip
 8008cfa:	429d      	cmp	r5, r3
 8008cfc:	bfa8      	it	ge
 8008cfe:	461d      	movge	r5, r3
 8008d00:	42b0      	cmp	r0, r6
 8008d02:	d12c      	bne.n	8008d5e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 8008d04:	4290      	cmp	r0, r2
 8008d06:	d12a      	bne.n	8008d5e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 8008d08:	6838      	ldr	r0, [r7, #0]
 8008d0a:	9203      	str	r2, [sp, #12]
 8008d0c:	6803      	ldr	r3, [r0, #0]
 8008d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d10:	4798      	blx	r3
 8008d12:	07c3      	lsls	r3, r0, #31
 8008d14:	d51a      	bpl.n	8008d4c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8008d16:	9a03      	ldr	r2, [sp, #12]
 8008d18:	6838      	ldr	r0, [r7, #0]
 8008d1a:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
 8008d1e:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8008d22:	6803      	ldr	r3, [r0, #0]
 8008d24:	9200      	str	r2, [sp, #0]
 8008d26:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8008d28:	4623      	mov	r3, r4
 8008d2a:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8008d2e:	47a8      	blx	r5
 8008d30:	4680      	mov	r8, r0
 8008d32:	4640      	mov	r0, r8
 8008d34:	b00f      	add	sp, #60	; 0x3c
 8008d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d3a:	bf1f      	itttt	ne
 8008d3c:	f8bd 1026 	ldrhne.w	r1, [sp, #38]	; 0x26
 8008d40:	f8ad 6022 	strhne.w	r6, [sp, #34]	; 0x22
 8008d44:	185b      	addne	r3, r3, r1
 8008d46:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 8008d4a:	e7b2      	b.n	8008cb2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x18e>
 8008d4c:	6838      	ldr	r0, [r7, #0]
 8008d4e:	464a      	mov	r2, r9
 8008d50:	4621      	mov	r1, r4
 8008d52:	6803      	ldr	r3, [r0, #0]
 8008d54:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8008d56:	fb05 f30a 	mul.w	r3, r5, sl
 8008d5a:	47b0      	blx	r6
 8008d5c:	e7e9      	b.n	8008d32 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8008d5e:	4355      	muls	r5, r2
 8008d60:	0076      	lsls	r6, r6, #1
 8008d62:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 8008d66:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 8008d6a:	9303      	str	r3, [sp, #12]
 8008d6c:	9b03      	ldr	r3, [sp, #12]
 8008d6e:	429c      	cmp	r4, r3
 8008d70:	d2df      	bcs.n	8008d32 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8008d72:	6838      	ldr	r0, [r7, #0]
 8008d74:	464a      	mov	r2, r9
 8008d76:	4621      	mov	r1, r4
 8008d78:	44d1      	add	r9, sl
 8008d7a:	6803      	ldr	r3, [r0, #0]
 8008d7c:	445c      	add	r4, fp
 8008d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d80:	461d      	mov	r5, r3
 8008d82:	4633      	mov	r3, r6
 8008d84:	47a8      	blx	r5
 8008d86:	e7f1      	b.n	8008d6c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x248>
 8008d88:	2000132c 	.word	0x2000132c
 8008d8c:	0800d237 	.word	0x0800d237
 8008d90:	0800d788 	.word	0x0800d788
 8008d94:	0800d42f 	.word	0x0800d42f
 8008d98:	0800d2e9 	.word	0x0800d2e9
 8008d9c:	0800d33e 	.word	0x0800d33e
 8008da0:	20001326 	.word	0x20001326
 8008da4:	20001328 	.word	0x20001328
 8008da8:	0800d37c 	.word	0x0800d37c

08008dac <_ZN8touchgfx8LCD16bppC1Ev>:
 8008dac:	2200      	movs	r2, #0
 8008dae:	4910      	ldr	r1, [pc, #64]	; (8008df0 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 8008db0:	6042      	str	r2, [r0, #4]
 8008db2:	6001      	str	r1, [r0, #0]
 8008db4:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8008db8:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8008dbc:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8008dc0:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8008dc4:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8008dc8:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8008dcc:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8008dd0:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8008dd4:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8008dd8:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8008ddc:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8008de0:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8008de4:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 8008de8:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8008dec:	4770      	bx	lr
 8008dee:	bf00      	nop
 8008df0:	0800d4e0 	.word	0x0800d4e0

08008df4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8008df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df8:	b08b      	sub	sp, #44	; 0x2c
 8008dfa:	460d      	mov	r5, r1
 8008dfc:	4604      	mov	r4, r0
 8008dfe:	4699      	mov	r9, r3
 8008e00:	6808      	ldr	r0, [r1, #0]
 8008e02:	ab06      	add	r3, sp, #24
 8008e04:	6849      	ldr	r1, [r1, #4]
 8008e06:	c303      	stmia	r3!, {r0, r1}
 8008e08:	6810      	ldr	r0, [r2, #0]
 8008e0a:	ab08      	add	r3, sp, #32
 8008e0c:	6851      	ldr	r1, [r2, #4]
 8008e0e:	c303      	stmia	r3!, {r0, r1}
 8008e10:	a806      	add	r0, sp, #24
 8008e12:	f7fe f8bf 	bl	8006f94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8008e16:	4629      	mov	r1, r5
 8008e18:	a808      	add	r0, sp, #32
 8008e1a:	4d63      	ldr	r5, [pc, #396]	; (8008fa8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b4>)
 8008e1c:	f7fe f8a2 	bl	8006f64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8008e20:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8008e24:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8008e28:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8008e2c:	6828      	ldr	r0, [r5, #0]
 8008e2e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8008e32:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8008e36:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 8008e3a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8008e3e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8008e42:	440a      	add	r2, r1
 8008e44:	f8ad 2020 	strh.w	r2, [sp, #32]
 8008e48:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8008e52:	6803      	ldr	r3, [r0, #0]
 8008e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e56:	4798      	blx	r3
 8008e58:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8008e5c:	d118      	bne.n	8008e90 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8008e5e:	f010 0f20 	tst.w	r0, #32
 8008e62:	6828      	ldr	r0, [r5, #0]
 8008e64:	d017      	beq.n	8008e96 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 8008e66:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 8008e6a:	b2b6      	uxth	r6, r6
 8008e6c:	6801      	ldr	r1, [r0, #0]
 8008e6e:	9502      	str	r5, [sp, #8]
 8008e70:	fa1f f588 	uxth.w	r5, r8
 8008e74:	f8cd 900c 	str.w	r9, [sp, #12]
 8008e78:	9601      	str	r6, [sp, #4]
 8008e7a:	9500      	str	r5, [sp, #0]
 8008e7c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8008e80:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8008e82:	4621      	mov	r1, r4
 8008e84:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8008e88:	47a8      	blx	r5
 8008e8a:	b00b      	add	sp, #44	; 0x2c
 8008e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e90:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008e94:	e7e5      	b.n	8008e62 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8008e96:	6803      	ldr	r3, [r0, #0]
 8008e98:	6a1b      	ldr	r3, [r3, #32]
 8008e9a:	4798      	blx	r3
 8008e9c:	4a43      	ldr	r2, [pc, #268]	; (8008fac <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b8>)
 8008e9e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8008ea2:	f8b2 e000 	ldrh.w	lr, [r2]
 8008ea6:	4692      	mov	sl, r2
 8008ea8:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8008eac:	fb0e 1303 	mla	r3, lr, r3, r1
 8008eb0:	fb0e fe06 	mul.w	lr, lr, r6
 8008eb4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8008eb8:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8008ebc:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
 8008ec0:	9305      	str	r3, [sp, #20]
 8008ec2:	4570      	cmp	r0, lr
 8008ec4:	d26a      	bcs.n	8008f9c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1a8>
 8008ec6:	9b05      	ldr	r3, [sp, #20]
 8008ec8:	4621      	mov	r1, r4
 8008eca:	eb00 0b03 	add.w	fp, r0, r3
 8008ece:	4558      	cmp	r0, fp
 8008ed0:	d257      	bcs.n	8008f82 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18e>
 8008ed2:	f851 4b04 	ldr.w	r4, [r1], #4
 8008ed6:	0e22      	lsrs	r2, r4, #24
 8008ed8:	d012      	beq.n	8008f00 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 8008eda:	2aff      	cmp	r2, #255	; 0xff
 8008edc:	ea4f 2714 	mov.w	r7, r4, lsr #8
 8008ee0:	d110      	bne.n	8008f04 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8008ee2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8008ee6:	d10d      	bne.n	8008f04 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8008ee8:	0963      	lsrs	r3, r4, #5
 8008eea:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 8008eee:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8008ef2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8008ef6:	f027 0707 	bic.w	r7, r7, #7
 8008efa:	431f      	orrs	r7, r3
 8008efc:	433c      	orrs	r4, r7
 8008efe:	8004      	strh	r4, [r0, #0]
 8008f00:	3002      	adds	r0, #2
 8008f02:	e7e4      	b.n	8008ece <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xda>
 8008f04:	fb09 f302 	mul.w	r3, r9, r2
 8008f08:	f8b0 c000 	ldrh.w	ip, [r0]
 8008f0c:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8008f10:	b2ff      	uxtb	r7, r7
 8008f12:	1c5a      	adds	r2, r3, #1
 8008f14:	ea4f 262c 	mov.w	r6, ip, asr #8
 8008f18:	b2e4      	uxtb	r4, r4
 8008f1a:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8008f1e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8008f22:	1212      	asrs	r2, r2, #8
 8008f24:	b293      	uxth	r3, r2
 8008f26:	43d2      	mvns	r2, r2
 8008f28:	fb15 f503 	smulbb	r5, r5, r3
 8008f2c:	b2d2      	uxtb	r2, r2
 8008f2e:	fb17 f703 	smulbb	r7, r7, r3
 8008f32:	fb06 5602 	mla	r6, r6, r2, r5
 8008f36:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8008f3a:	fb14 f403 	smulbb	r4, r4, r3
 8008f3e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8008f42:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8008f46:	b2b6      	uxth	r6, r6
 8008f48:	fa5f fc8c 	uxtb.w	ip, ip
 8008f4c:	fb05 7702 	mla	r7, r5, r2, r7
 8008f50:	1c73      	adds	r3, r6, #1
 8008f52:	fb0c 4202 	mla	r2, ip, r2, r4
 8008f56:	b2bf      	uxth	r7, r7
 8008f58:	b292      	uxth	r2, r2
 8008f5a:	1c7d      	adds	r5, r7, #1
 8008f5c:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8008f60:	f102 0c01 	add.w	ip, r2, #1
 8008f64:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 8008f68:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8008f6c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8008f70:	097f      	lsrs	r7, r7, #5
 8008f72:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8008f76:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8008f7a:	4316      	orrs	r6, r2
 8008f7c:	433e      	orrs	r6, r7
 8008f7e:	8006      	strh	r6, [r0, #0]
 8008f80:	e7be      	b.n	8008f00 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 8008f82:	f8ba 3000 	ldrh.w	r3, [sl]
 8008f86:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 8008f8a:	eba3 0308 	sub.w	r3, r3, r8
 8008f8e:	eba4 0408 	sub.w	r4, r4, r8
 8008f92:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8008f96:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8008f9a:	e792      	b.n	8008ec2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8008f9c:	4b02      	ldr	r3, [pc, #8]	; (8008fa8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b4>)
 8008f9e:	6818      	ldr	r0, [r3, #0]
 8008fa0:	6803      	ldr	r3, [r0, #0]
 8008fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa4:	4798      	blx	r3
 8008fa6:	e770      	b.n	8008e8a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 8008fa8:	2000132c 	.word	0x2000132c
 8008fac:	20001326 	.word	0x20001326

08008fb0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8008fb0:	b570      	push	{r4, r5, r6, lr}
 8008fb2:	9d04      	ldr	r5, [sp, #16]
 8008fb4:	460c      	mov	r4, r1
 8008fb6:	f89d 6018 	ldrb.w	r6, [sp, #24]
 8008fba:	4619      	mov	r1, r3
 8008fbc:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8008fc0:	2a0d      	cmp	r2, #13
 8008fc2:	d820      	bhi.n	8009006 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x56>
 8008fc4:	e8df f002 	tbb	[pc, r2]
 8008fc8:	18121807 	.word	0x18121807
 8008fcc:	18181818 	.word	0x18181818
 8008fd0:	18181818 	.word	0x18181818
 8008fd4:	1818      	.short	0x1818
 8008fd6:	6802      	ldr	r2, [r0, #0]
 8008fd8:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8008fdc:	68d6      	ldr	r6, [r2, #12]
 8008fde:	462b      	mov	r3, r5
 8008fe0:	460a      	mov	r2, r1
 8008fe2:	4621      	mov	r1, r4
 8008fe4:	46b4      	mov	ip, r6
 8008fe6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008fea:	4760      	bx	ip
 8008fec:	462a      	mov	r2, r5
 8008fee:	4620      	mov	r0, r4
 8008ff0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008ff4:	f7ff befe 	b.w	8008df4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8008ff8:	4b03      	ldr	r3, [pc, #12]	; (8009008 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x58>)
 8008ffa:	f240 21c1 	movw	r1, #705	; 0x2c1
 8008ffe:	4a03      	ldr	r2, [pc, #12]	; (800900c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5c>)
 8009000:	4803      	ldr	r0, [pc, #12]	; (8009010 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 8009002:	f001 f8db 	bl	800a1bc <__assert_func>
 8009006:	bd70      	pop	{r4, r5, r6, pc}
 8009008:	0800d3cb 	.word	0x0800d3cb
 800900c:	0800d80e 	.word	0x0800d80e
 8009010:	0800d42f 	.word	0x0800d42f

08009014 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8009014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009018:	b093      	sub	sp, #76	; 0x4c
 800901a:	880f      	ldrh	r7, [r1, #0]
 800901c:	4604      	mov	r4, r0
 800901e:	4688      	mov	r8, r1
 8009020:	4616      	mov	r6, r2
 8009022:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 8009026:	b12f      	cbz	r7, 8009034 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 8009028:	4b6f      	ldr	r3, [pc, #444]	; (80091e8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 800902a:	21e2      	movs	r1, #226	; 0xe2
 800902c:	4a6f      	ldr	r2, [pc, #444]	; (80091ec <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 800902e:	4870      	ldr	r0, [pc, #448]	; (80091f0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 8009030:	f001 f8c4 	bl	800a1bc <__assert_func>
 8009034:	6810      	ldr	r0, [r2, #0]
 8009036:	ad0e      	add	r5, sp, #56	; 0x38
 8009038:	6851      	ldr	r1, [r2, #4]
 800903a:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 80091f8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>
 800903e:	c503      	stmia	r5!, {r0, r1}
 8009040:	6818      	ldr	r0, [r3, #0]
 8009042:	ad10      	add	r5, sp, #64	; 0x40
 8009044:	6859      	ldr	r1, [r3, #4]
 8009046:	c503      	stmia	r5!, {r0, r1}
 8009048:	a80e      	add	r0, sp, #56	; 0x38
 800904a:	f7fd ffa3 	bl	8006f94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800904e:	4631      	mov	r1, r6
 8009050:	a810      	add	r0, sp, #64	; 0x40
 8009052:	4e68      	ldr	r6, [pc, #416]	; (80091f4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 8009054:	f7fd ff86 	bl	8006f64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8009058:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 800905c:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8009060:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8009064:	f8db 0000 	ldr.w	r0, [fp]
 8009068:	fb11 2103 	smlabb	r1, r1, r3, r2
 800906c:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 8009070:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 8009074:	440c      	add	r4, r1
 8009076:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 800907a:	440a      	add	r2, r1
 800907c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8009080:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8009084:	4413      	add	r3, r2
 8009086:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800908a:	6803      	ldr	r3, [r0, #0]
 800908c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009090:	4798      	blx	r3
 8009092:	2801      	cmp	r0, #1
 8009094:	d11d      	bne.n	80090d2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbe>
 8009096:	220b      	movs	r2, #11
 8009098:	9708      	str	r7, [sp, #32]
 800909a:	b2ad      	uxth	r5, r5
 800909c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80090a0:	9207      	str	r2, [sp, #28]
 80090a2:	4621      	mov	r1, r4
 80090a4:	8832      	ldrh	r2, [r6, #0]
 80090a6:	f8cd a010 	str.w	sl, [sp, #16]
 80090aa:	9502      	str	r5, [sp, #8]
 80090ac:	e9cd 0205 	strd	r0, r2, [sp, #20]
 80090b0:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 80090b4:	9203      	str	r2, [sp, #12]
 80090b6:	fa1f f289 	uxth.w	r2, r9
 80090ba:	9201      	str	r2, [sp, #4]
 80090bc:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 80090c0:	9200      	str	r2, [sp, #0]
 80090c2:	4642      	mov	r2, r8
 80090c4:	f8db 0000 	ldr.w	r0, [fp]
 80090c8:	f7fc fd18 	bl	8005afc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80090cc:	b013      	add	sp, #76	; 0x4c
 80090ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090d2:	f8db 0000 	ldr.w	r0, [fp]
 80090d6:	6803      	ldr	r3, [r0, #0]
 80090d8:	6a1b      	ldr	r3, [r3, #32]
 80090da:	4798      	blx	r3
 80090dc:	8832      	ldrh	r2, [r6, #0]
 80090de:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 80090e2:	f04f 0e04 	mov.w	lr, #4
 80090e6:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 80090ea:	4355      	muls	r5, r2
 80090ec:	960d      	str	r6, [sp, #52]	; 0x34
 80090ee:	fb02 1303 	mla	r3, r2, r3, r1
 80090f2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80090f6:	eb00 0345 	add.w	r3, r0, r5, lsl #1
 80090fa:	930c      	str	r3, [sp, #48]	; 0x30
 80090fc:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8009100:	930b      	str	r3, [sp, #44]	; 0x2c
 8009102:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009104:	4298      	cmp	r0, r3
 8009106:	d269      	bcs.n	80091dc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>
 8009108:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800910a:	4621      	mov	r1, r4
 800910c:	eb00 0b03 	add.w	fp, r0, r3
 8009110:	4558      	cmp	r0, fp
 8009112:	460b      	mov	r3, r1
 8009114:	d256      	bcs.n	80091c4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b0>
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	3101      	adds	r1, #1
 800911a:	fb1e e303 	smlabb	r3, lr, r3, lr
 800911e:	f858 2003 	ldr.w	r2, [r8, r3]
 8009122:	0e14      	lsrs	r4, r2, #24
 8009124:	d012      	beq.n	800914c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 8009126:	2cff      	cmp	r4, #255	; 0xff
 8009128:	ea4f 2612 	mov.w	r6, r2, lsr #8
 800912c:	d110      	bne.n	8009150 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 800912e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8009132:	d10d      	bne.n	8009150 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 8009134:	0953      	lsrs	r3, r2, #5
 8009136:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 800913a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 800913e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8009142:	f026 0607 	bic.w	r6, r6, #7
 8009146:	431e      	orrs	r6, r3
 8009148:	4332      	orrs	r2, r6
 800914a:	8002      	strh	r2, [r0, #0]
 800914c:	3002      	adds	r0, #2
 800914e:	e7df      	b.n	8009110 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xfc>
 8009150:	fb0a f404 	mul.w	r4, sl, r4
 8009154:	8807      	ldrh	r7, [r0, #0]
 8009156:	b2f6      	uxtb	r6, r6
 8009158:	1c63      	adds	r3, r4, #1
 800915a:	123d      	asrs	r5, r7, #8
 800915c:	eb03 2324 	add.w	r3, r3, r4, asr #8
 8009160:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8009164:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8009168:	b2d2      	uxtb	r2, r2
 800916a:	121b      	asrs	r3, r3, #8
 800916c:	fa1f fc83 	uxth.w	ip, r3
 8009170:	43db      	mvns	r3, r3
 8009172:	fb14 f40c 	smulbb	r4, r4, ip
 8009176:	b2db      	uxtb	r3, r3
 8009178:	fb12 f20c 	smulbb	r2, r2, ip
 800917c:	fb05 4503 	mla	r5, r5, r3, r4
 8009180:	10fc      	asrs	r4, r7, #3
 8009182:	fb16 f60c 	smulbb	r6, r6, ip
 8009186:	00ff      	lsls	r7, r7, #3
 8009188:	b2ad      	uxth	r5, r5
 800918a:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 800918e:	b2ff      	uxtb	r7, r7
 8009190:	fb04 6603 	mla	r6, r4, r3, r6
 8009194:	fb07 2203 	mla	r2, r7, r3, r2
 8009198:	1c6b      	adds	r3, r5, #1
 800919a:	b2b6      	uxth	r6, r6
 800919c:	b292      	uxth	r2, r2
 800919e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80091a2:	1c54      	adds	r4, r2, #1
 80091a4:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80091a8:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 80091ac:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 80091b0:	4325      	orrs	r5, r4
 80091b2:	1c74      	adds	r4, r6, #1
 80091b4:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 80091b8:	0976      	lsrs	r6, r6, #5
 80091ba:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80091be:	4335      	orrs	r5, r6
 80091c0:	8005      	strh	r5, [r0, #0]
 80091c2:	e7c3      	b.n	800914c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x138>
 80091c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091c6:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 80091ca:	881b      	ldrh	r3, [r3, #0]
 80091cc:	eba4 0409 	sub.w	r4, r4, r9
 80091d0:	eba3 0309 	sub.w	r3, r3, r9
 80091d4:	440c      	add	r4, r1
 80091d6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80091da:	e792      	b.n	8009102 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 80091dc:	4b06      	ldr	r3, [pc, #24]	; (80091f8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 80091de:	6818      	ldr	r0, [r3, #0]
 80091e0:	6803      	ldr	r3, [r0, #0]
 80091e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e4:	4798      	blx	r3
 80091e6:	e771      	b.n	80090cc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb8>
 80091e8:	0800d1e7 	.word	0x0800d1e7
 80091ec:	0800d6c2 	.word	0x0800d6c2
 80091f0:	0800d42f 	.word	0x0800d42f
 80091f4:	20001326 	.word	0x20001326
 80091f8:	2000132c 	.word	0x2000132c

080091fc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 80091fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009200:	4614      	mov	r4, r2
 8009202:	880a      	ldrh	r2, [r1, #0]
 8009204:	b091      	sub	sp, #68	; 0x44
 8009206:	4607      	mov	r7, r0
 8009208:	2a02      	cmp	r2, #2
 800920a:	4689      	mov	r9, r1
 800920c:	f89d 6068 	ldrb.w	r6, [sp, #104]	; 0x68
 8009210:	d006      	beq.n	8009220 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 8009212:	4b77      	ldr	r3, [pc, #476]	; (80093f0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f4>)
 8009214:	f240 113b 	movw	r1, #315	; 0x13b
 8009218:	4a76      	ldr	r2, [pc, #472]	; (80093f4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f8>)
 800921a:	4877      	ldr	r0, [pc, #476]	; (80093f8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1fc>)
 800921c:	f000 ffce 	bl	800a1bc <__assert_func>
 8009220:	2e00      	cmp	r6, #0
 8009222:	d04b      	beq.n	80092bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 8009224:	6820      	ldr	r0, [r4, #0]
 8009226:	ad0c      	add	r5, sp, #48	; 0x30
 8009228:	6861      	ldr	r1, [r4, #4]
 800922a:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 8009400 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>
 800922e:	c503      	stmia	r5!, {r0, r1}
 8009230:	6818      	ldr	r0, [r3, #0]
 8009232:	ad0e      	add	r5, sp, #56	; 0x38
 8009234:	6859      	ldr	r1, [r3, #4]
 8009236:	c503      	stmia	r5!, {r0, r1}
 8009238:	a80c      	add	r0, sp, #48	; 0x30
 800923a:	f7fd feab 	bl	8006f94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800923e:	4621      	mov	r1, r4
 8009240:	a80e      	add	r0, sp, #56	; 0x38
 8009242:	f7fd fe8f 	bl	8006f64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8009246:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 800924a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 800924e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8009252:	f8da 0000 	ldr.w	r0, [sl]
 8009256:	fb11 2103 	smlabb	r1, r1, r3, r2
 800925a:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 800925e:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 8009262:	187c      	adds	r4, r7, r1
 8009264:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8009268:	4f64      	ldr	r7, [pc, #400]	; (80093fc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x200>)
 800926a:	440a      	add	r2, r1
 800926c:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8009270:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8009274:	4413      	add	r3, r2
 8009276:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 800927a:	6803      	ldr	r3, [r0, #0]
 800927c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009280:	4798      	blx	r3
 8009282:	2801      	cmp	r0, #1
 8009284:	d11d      	bne.n	80092c2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc6>
 8009286:	2200      	movs	r2, #0
 8009288:	210b      	movs	r1, #11
 800928a:	b2ad      	uxth	r5, r5
 800928c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8009290:	e9cd 1207 	strd	r1, r2, [sp, #28]
 8009294:	8839      	ldrh	r1, [r7, #0]
 8009296:	9604      	str	r6, [sp, #16]
 8009298:	9502      	str	r5, [sp, #8]
 800929a:	e9cd 2105 	strd	r2, r1, [sp, #20]
 800929e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80092a2:	4621      	mov	r1, r4
 80092a4:	9203      	str	r2, [sp, #12]
 80092a6:	fa1f f288 	uxth.w	r2, r8
 80092aa:	9201      	str	r2, [sp, #4]
 80092ac:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80092b0:	9200      	str	r2, [sp, #0]
 80092b2:	464a      	mov	r2, r9
 80092b4:	f8da 0000 	ldr.w	r0, [sl]
 80092b8:	f7fc fc20 	bl	8005afc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80092bc:	b011      	add	sp, #68	; 0x44
 80092be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092c2:	f8da 0000 	ldr.w	r0, [sl]
 80092c6:	ea4f 0b48 	mov.w	fp, r8, lsl #1
 80092ca:	6803      	ldr	r3, [r0, #0]
 80092cc:	6a1b      	ldr	r3, [r3, #32]
 80092ce:	4798      	blx	r3
 80092d0:	8839      	ldrh	r1, [r7, #0]
 80092d2:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80092d6:	2eff      	cmp	r6, #255	; 0xff
 80092d8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80092dc:	fb05 f501 	mul.w	r5, r5, r1
 80092e0:	fb01 2303 	mla	r3, r1, r3, r2
 80092e4:	f109 0204 	add.w	r2, r9, #4
 80092e8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80092ec:	d05f      	beq.n	80093ae <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b2>
 80092ee:	f1c6 09ff 	rsb	r9, r6, #255	; 0xff
 80092f2:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80092f6:	b2b6      	uxth	r6, r6
 80092f8:	970b      	str	r7, [sp, #44]	; 0x2c
 80092fa:	fa1f f989 	uxth.w	r9, r9
 80092fe:	42a8      	cmp	r0, r5
 8009300:	d26f      	bcs.n	80093e2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1e6>
 8009302:	eb00 010b 	add.w	r1, r0, fp
 8009306:	4288      	cmp	r0, r1
 8009308:	4623      	mov	r3, r4
 800930a:	d244      	bcs.n	8009396 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x19a>
 800930c:	8807      	ldrh	r7, [r0, #0]
 800930e:	3401      	adds	r4, #1
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	ea4f 2c27 	mov.w	ip, r7, asr #8
 8009316:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800931a:	ea4f 0ae7 	mov.w	sl, r7, asr #3
 800931e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8009322:	00ff      	lsls	r7, r7, #3
 8009324:	ea4f 2e23 	mov.w	lr, r3, asr #8
 8009328:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 800932c:	fb1c fc09 	smulbb	ip, ip, r9
 8009330:	b2ff      	uxtb	r7, r7
 8009332:	fb1a fa09 	smulbb	sl, sl, r9
 8009336:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 800933a:	fb17 f709 	smulbb	r7, r7, r9
 800933e:	fb0e ce06 	mla	lr, lr, r6, ip
 8009342:	ea4f 0ce3 	mov.w	ip, r3, asr #3
 8009346:	00db      	lsls	r3, r3, #3
 8009348:	fa1f fe8e 	uxth.w	lr, lr
 800934c:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8009350:	b2db      	uxtb	r3, r3
 8009352:	fb0c ac06 	mla	ip, ip, r6, sl
 8009356:	f10e 0a01 	add.w	sl, lr, #1
 800935a:	fb03 7306 	mla	r3, r3, r6, r7
 800935e:	eb0a 2e1e 	add.w	lr, sl, lr, lsr #8
 8009362:	b29b      	uxth	r3, r3
 8009364:	f40e 4a78 	and.w	sl, lr, #63488	; 0xf800
 8009368:	fa1f fc8c 	uxth.w	ip, ip
 800936c:	f103 0e01 	add.w	lr, r3, #1
 8009370:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8009374:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8009378:	ea4a 0e03 	orr.w	lr, sl, r3
 800937c:	f10c 0a01 	add.w	sl, ip, #1
 8009380:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 8009384:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8009388:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 800938c:	ea4e 0e0c 	orr.w	lr, lr, ip
 8009390:	f820 eb02 	strh.w	lr, [r0], #2
 8009394:	e7b7      	b.n	8009306 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x10a>
 8009396:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009398:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 800939c:	881b      	ldrh	r3, [r3, #0]
 800939e:	eba1 0108 	sub.w	r1, r1, r8
 80093a2:	eba3 0308 	sub.w	r3, r3, r8
 80093a6:	440c      	add	r4, r1
 80093a8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80093ac:	e7a7      	b.n	80092fe <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x102>
 80093ae:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80093b2:	42a8      	cmp	r0, r5
 80093b4:	d215      	bcs.n	80093e2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1e6>
 80093b6:	eb00 010b 	add.w	r1, r0, fp
 80093ba:	4288      	cmp	r0, r1
 80093bc:	d206      	bcs.n	80093cc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1d0>
 80093be:	f814 3b01 	ldrb.w	r3, [r4], #1
 80093c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093c6:	f820 3b02 	strh.w	r3, [r0], #2
 80093ca:	e7f6      	b.n	80093ba <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1be>
 80093cc:	883b      	ldrh	r3, [r7, #0]
 80093ce:	eba3 0308 	sub.w	r3, r3, r8
 80093d2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80093d6:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 80093da:	eba3 0308 	sub.w	r3, r3, r8
 80093de:	441c      	add	r4, r3
 80093e0:	e7e7      	b.n	80093b2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b6>
 80093e2:	4b07      	ldr	r3, [pc, #28]	; (8009400 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>)
 80093e4:	6818      	ldr	r0, [r3, #0]
 80093e6:	6803      	ldr	r3, [r0, #0]
 80093e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ea:	4798      	blx	r3
 80093ec:	e766      	b.n	80092bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 80093ee:	bf00      	nop
 80093f0:	0800d0a5 	.word	0x0800d0a5
 80093f4:	0800d52c 	.word	0x0800d52c
 80093f8:	0800d42f 	.word	0x0800d42f
 80093fc:	20001326 	.word	0x20001326
 8009400:	2000132c 	.word	0x2000132c

08009404 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8009404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009408:	4614      	mov	r4, r2
 800940a:	880a      	ldrh	r2, [r1, #0]
 800940c:	b091      	sub	sp, #68	; 0x44
 800940e:	4606      	mov	r6, r0
 8009410:	2a01      	cmp	r2, #1
 8009412:	4688      	mov	r8, r1
 8009414:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8009418:	d006      	beq.n	8009428 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x24>
 800941a:	4b7c      	ldr	r3, [pc, #496]	; (800960c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x208>)
 800941c:	f240 1197 	movw	r1, #407	; 0x197
 8009420:	4a7b      	ldr	r2, [pc, #492]	; (8009610 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20c>)
 8009422:	487c      	ldr	r0, [pc, #496]	; (8009614 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x210>)
 8009424:	f000 feca 	bl	800a1bc <__assert_func>
 8009428:	2f00      	cmp	r7, #0
 800942a:	d04b      	beq.n	80094c4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 800942c:	6820      	ldr	r0, [r4, #0]
 800942e:	ad0c      	add	r5, sp, #48	; 0x30
 8009430:	6861      	ldr	r1, [r4, #4]
 8009432:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 8009620 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 8009436:	c503      	stmia	r5!, {r0, r1}
 8009438:	6818      	ldr	r0, [r3, #0]
 800943a:	ad0e      	add	r5, sp, #56	; 0x38
 800943c:	6859      	ldr	r1, [r3, #4]
 800943e:	c503      	stmia	r5!, {r0, r1}
 8009440:	a80c      	add	r0, sp, #48	; 0x30
 8009442:	f7fd fda7 	bl	8006f94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8009446:	4621      	mov	r1, r4
 8009448:	a80e      	add	r0, sp, #56	; 0x38
 800944a:	f7fd fd8b 	bl	8006f64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 800944e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8009452:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8009456:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 800945a:	f8da 0000 	ldr.w	r0, [sl]
 800945e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8009462:	f9bd 503c 	ldrsh.w	r5, [sp, #60]	; 0x3c
 8009466:	f9bd 903e 	ldrsh.w	r9, [sp, #62]	; 0x3e
 800946a:	1874      	adds	r4, r6, r1
 800946c:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8009470:	4e69      	ldr	r6, [pc, #420]	; (8009618 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x214>)
 8009472:	440a      	add	r2, r1
 8009474:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8009478:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 800947c:	4413      	add	r3, r2
 800947e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8009482:	6803      	ldr	r3, [r0, #0]
 8009484:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009488:	4798      	blx	r3
 800948a:	2801      	cmp	r0, #1
 800948c:	d11d      	bne.n	80094ca <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc6>
 800948e:	220b      	movs	r2, #11
 8009490:	2100      	movs	r1, #0
 8009492:	b2ad      	uxth	r5, r5
 8009494:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8009498:	e9cd 2107 	strd	r2, r1, [sp, #28]
 800949c:	8832      	ldrh	r2, [r6, #0]
 800949e:	4621      	mov	r1, r4
 80094a0:	9704      	str	r7, [sp, #16]
 80094a2:	9501      	str	r5, [sp, #4]
 80094a4:	e9cd 0205 	strd	r0, r2, [sp, #20]
 80094a8:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80094ac:	9203      	str	r2, [sp, #12]
 80094ae:	fa1f f289 	uxth.w	r2, r9
 80094b2:	9202      	str	r2, [sp, #8]
 80094b4:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80094b8:	9200      	str	r2, [sp, #0]
 80094ba:	4642      	mov	r2, r8
 80094bc:	f8da 0000 	ldr.w	r0, [sl]
 80094c0:	f7fc fb1c 	bl	8005afc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80094c4:	b011      	add	sp, #68	; 0x44
 80094c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ca:	f8da 0000 	ldr.w	r0, [sl]
 80094ce:	6803      	ldr	r3, [r0, #0]
 80094d0:	6a1b      	ldr	r3, [r3, #32]
 80094d2:	4798      	blx	r3
 80094d4:	8832      	ldrh	r2, [r6, #0]
 80094d6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80094da:	2fff      	cmp	r7, #255	; 0xff
 80094dc:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 80094e0:	ea4f 0e45 	mov.w	lr, r5, lsl #1
 80094e4:	fb09 f902 	mul.w	r9, r9, r2
 80094e8:	fb02 1303 	mla	r3, r2, r3, r1
 80094ec:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80094f0:	d056      	beq.n	80095a0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19c>
 80094f2:	ea6f 0c07 	mvn.w	ip, r7
 80094f6:	eb00 0949 	add.w	r9, r0, r9, lsl #1
 80094fa:	b2bb      	uxth	r3, r7
 80094fc:	960b      	str	r6, [sp, #44]	; 0x2c
 80094fe:	fa5f fc8c 	uxtb.w	ip, ip
 8009502:	4548      	cmp	r0, r9
 8009504:	d27b      	bcs.n	80095fe <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fa>
 8009506:	eb00 0a0e 	add.w	sl, r0, lr
 800950a:	4550      	cmp	r0, sl
 800950c:	4622      	mov	r2, r4
 800950e:	d23d      	bcs.n	800958c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x188>
 8009510:	7811      	ldrb	r1, [r2, #0]
 8009512:	2604      	movs	r6, #4
 8009514:	2203      	movs	r2, #3
 8009516:	3401      	adds	r4, #1
 8009518:	fb12 6101 	smlabb	r1, r2, r1, r6
 800951c:	8802      	ldrh	r2, [r0, #0]
 800951e:	eb08 0b01 	add.w	fp, r8, r1
 8009522:	1217      	asrs	r7, r2, #8
 8009524:	f818 1001 	ldrb.w	r1, [r8, r1]
 8009528:	f89b 6002 	ldrb.w	r6, [fp, #2]
 800952c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8009530:	f89b b001 	ldrb.w	fp, [fp, #1]
 8009534:	fb16 f603 	smulbb	r6, r6, r3
 8009538:	fb1b fb03 	smulbb	fp, fp, r3
 800953c:	fb07 670c 	mla	r7, r7, ip, r6
 8009540:	10d6      	asrs	r6, r2, #3
 8009542:	00d2      	lsls	r2, r2, #3
 8009544:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8009548:	b2bf      	uxth	r7, r7
 800954a:	b2d2      	uxtb	r2, r2
 800954c:	fb06 b60c 	mla	r6, r6, ip, fp
 8009550:	fb12 f20c 	smulbb	r2, r2, ip
 8009554:	b2b6      	uxth	r6, r6
 8009556:	fb01 2103 	mla	r1, r1, r3, r2
 800955a:	1c7a      	adds	r2, r7, #1
 800955c:	f106 0b01 	add.w	fp, r6, #1
 8009560:	b289      	uxth	r1, r1
 8009562:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8009566:	1c4a      	adds	r2, r1, #1
 8009568:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 800956c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8009570:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8009574:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8009578:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 800957c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8009580:	4317      	orrs	r7, r2
 8009582:	ea47 070b 	orr.w	r7, r7, fp
 8009586:	f820 7b02 	strh.w	r7, [r0], #2
 800958a:	e7be      	b.n	800950a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x106>
 800958c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800958e:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
 8009592:	8812      	ldrh	r2, [r2, #0]
 8009594:	1b49      	subs	r1, r1, r5
 8009596:	1b52      	subs	r2, r2, r5
 8009598:	440c      	add	r4, r1
 800959a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 800959e:	e7b0      	b.n	8009502 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xfe>
 80095a0:	eb00 0949 	add.w	r9, r0, r9, lsl #1
 80095a4:	2203      	movs	r2, #3
 80095a6:	2704      	movs	r7, #4
 80095a8:	491c      	ldr	r1, [pc, #112]	; (800961c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 80095aa:	4548      	cmp	r0, r9
 80095ac:	d227      	bcs.n	80095fe <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fa>
 80095ae:	eb00 0c0e 	add.w	ip, r0, lr
 80095b2:	4560      	cmp	r0, ip
 80095b4:	4623      	mov	r3, r4
 80095b6:	d219      	bcs.n	80095ec <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1e8>
 80095b8:	f893 a000 	ldrb.w	sl, [r3]
 80095bc:	3401      	adds	r4, #1
 80095be:	fb12 7a0a 	smlabb	sl, r2, sl, r7
 80095c2:	eb08 0b0a 	add.w	fp, r8, sl
 80095c6:	f818 a00a 	ldrb.w	sl, [r8, sl]
 80095ca:	f89b 3002 	ldrb.w	r3, [fp, #2]
 80095ce:	f89b b001 	ldrb.w	fp, [fp, #1]
 80095d2:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 80095d6:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80095da:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80095de:	ea43 030b 	orr.w	r3, r3, fp
 80095e2:	ea43 03da 	orr.w	r3, r3, sl, lsr #3
 80095e6:	f820 3b02 	strh.w	r3, [r0], #2
 80095ea:	e7e2      	b.n	80095b2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ae>
 80095ec:	8833      	ldrh	r3, [r6, #0]
 80095ee:	1b5b      	subs	r3, r3, r5
 80095f0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80095f4:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 80095f8:	1b5b      	subs	r3, r3, r5
 80095fa:	441c      	add	r4, r3
 80095fc:	e7d5      	b.n	80095aa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a6>
 80095fe:	4b08      	ldr	r3, [pc, #32]	; (8009620 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 8009600:	6818      	ldr	r0, [r3, #0]
 8009602:	6803      	ldr	r3, [r0, #0]
 8009604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009606:	4798      	blx	r3
 8009608:	e75c      	b.n	80094c4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 800960a:	bf00      	nop
 800960c:	0800d0f3 	.word	0x0800d0f3
 8009610:	0800d5b5 	.word	0x0800d5b5
 8009614:	0800d42f 	.word	0x0800d42f
 8009618:	20001326 	.word	0x20001326
 800961c:	fffff800 	.word	0xfffff800
 8009620:	2000132c 	.word	0x2000132c

08009624 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8009624:	b430      	push	{r4, r5}
 8009626:	780d      	ldrb	r5, [r1, #0]
 8009628:	f89d 4008 	ldrb.w	r4, [sp, #8]
 800962c:	2d01      	cmp	r5, #1
 800962e:	d00a      	beq.n	8009646 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 8009630:	d305      	bcc.n	800963e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8009632:	2d02      	cmp	r5, #2
 8009634:	d10b      	bne.n	800964e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 8009636:	9402      	str	r4, [sp, #8]
 8009638:	bc30      	pop	{r4, r5}
 800963a:	f7ff bddf 	b.w	80091fc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 800963e:	9402      	str	r4, [sp, #8]
 8009640:	bc30      	pop	{r4, r5}
 8009642:	f7ff bce7 	b.w	8009014 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8009646:	9402      	str	r4, [sp, #8]
 8009648:	bc30      	pop	{r4, r5}
 800964a:	f7ff bedb 	b.w	8009404 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 800964e:	bc30      	pop	{r4, r5}
 8009650:	4770      	bx	lr
	...

08009654 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8009654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009658:	b087      	sub	sp, #28
 800965a:	4604      	mov	r4, r0
 800965c:	460e      	mov	r6, r1
 800965e:	6810      	ldr	r0, [r2, #0]
 8009660:	6851      	ldr	r1, [r2, #4]
 8009662:	ad02      	add	r5, sp, #8
 8009664:	4617      	mov	r7, r2
 8009666:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 800966a:	f8df 9230 	ldr.w	r9, [pc, #560]	; 800989c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 800966e:	c503      	stmia	r5!, {r0, r1}
 8009670:	6818      	ldr	r0, [r3, #0]
 8009672:	ad04      	add	r5, sp, #16
 8009674:	6859      	ldr	r1, [r3, #4]
 8009676:	c503      	stmia	r5!, {r0, r1}
 8009678:	a802      	add	r0, sp, #8
 800967a:	f7fd fc8b 	bl	8006f94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800967e:	4639      	mov	r1, r7
 8009680:	a804      	add	r0, sp, #16
 8009682:	f7fd fc6f 	bl	8006f64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8009686:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800968a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800968e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8009692:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8009696:	fb11 2103 	smlabb	r1, r1, r3, r2
 800969a:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 800969e:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 80096a2:	440e      	add	r6, r1
 80096a4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80096a8:	440a      	add	r2, r1
 80096aa:	f8ad 2010 	strh.w	r2, [sp, #16]
 80096ae:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80096b2:	4413      	add	r3, r2
 80096b4:	f8ad 3012 	strh.w	r3, [sp, #18]
 80096b8:	4b77      	ldr	r3, [pc, #476]	; (8009898 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 80096ba:	6818      	ldr	r0, [r3, #0]
 80096bc:	6803      	ldr	r3, [r0, #0]
 80096be:	6a1b      	ldr	r3, [r3, #32]
 80096c0:	4798      	blx	r3
 80096c2:	f8b9 b000 	ldrh.w	fp, [r9]
 80096c6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80096ca:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80096ce:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80096d2:	fb05 f50b 	mul.w	r5, r5, fp
 80096d6:	fb0b 2303 	mla	r3, fp, r3, r2
 80096da:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80096de:	ea4f 0348 	mov.w	r3, r8, lsl #1
 80096e2:	9300      	str	r3, [sp, #0]
 80096e4:	d068      	beq.n	80097b8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x164>
 80096e6:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 80096ea:	4558      	cmp	r0, fp
 80096ec:	f080 80cc 	bcs.w	8009888 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 80096f0:	9b00      	ldr	r3, [sp, #0]
 80096f2:	4631      	mov	r1, r6
 80096f4:	18c3      	adds	r3, r0, r3
 80096f6:	9301      	str	r3, [sp, #4]
 80096f8:	9b01      	ldr	r3, [sp, #4]
 80096fa:	4298      	cmp	r0, r3
 80096fc:	d24e      	bcs.n	800979c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x148>
 80096fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009702:	2a00      	cmp	r2, #0
 8009704:	d047      	beq.n	8009796 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x142>
 8009706:	fb0a f202 	mul.w	r2, sl, r2
 800970a:	1c53      	adds	r3, r2, #1
 800970c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8009710:	121b      	asrs	r3, r3, #8
 8009712:	d040      	beq.n	8009796 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x142>
 8009714:	8802      	ldrh	r2, [r0, #0]
 8009716:	b29e      	uxth	r6, r3
 8009718:	f8b4 c000 	ldrh.w	ip, [r4]
 800971c:	43db      	mvns	r3, r3
 800971e:	1215      	asrs	r5, r2, #8
 8009720:	b2db      	uxtb	r3, r3
 8009722:	ea4f 272c 	mov.w	r7, ip, asr #8
 8009726:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 800972a:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 800972e:	fb15 f503 	smulbb	r5, r5, r3
 8009732:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8009736:	00d2      	lsls	r2, r2, #3
 8009738:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 800973c:	fb07 5706 	mla	r7, r7, r6, r5
 8009740:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8009744:	b2d2      	uxtb	r2, r2
 8009746:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800974a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 800974e:	fb1e fe03 	smulbb	lr, lr, r3
 8009752:	b2bf      	uxth	r7, r7
 8009754:	fb12 f203 	smulbb	r2, r2, r3
 8009758:	fa5f fc8c 	uxtb.w	ip, ip
 800975c:	fb05 e506 	mla	r5, r5, r6, lr
 8009760:	1c7b      	adds	r3, r7, #1
 8009762:	fb0c 2c06 	mla	ip, ip, r6, r2
 8009766:	b2ad      	uxth	r5, r5
 8009768:	fa1f fc8c 	uxth.w	ip, ip
 800976c:	f105 0e01 	add.w	lr, r5, #1
 8009770:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8009774:	f10c 0601 	add.w	r6, ip, #1
 8009778:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 800977c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8009780:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8009784:	096d      	lsrs	r5, r5, #5
 8009786:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 800978a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 800978e:	ea47 070c 	orr.w	r7, r7, ip
 8009792:	432f      	orrs	r7, r5
 8009794:	8007      	strh	r7, [r0, #0]
 8009796:	3002      	adds	r0, #2
 8009798:	3402      	adds	r4, #2
 800979a:	e7ad      	b.n	80096f8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 800979c:	f8b9 3000 	ldrh.w	r3, [r9]
 80097a0:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 80097a4:	eba3 0308 	sub.w	r3, r3, r8
 80097a8:	eba6 0608 	sub.w	r6, r6, r8
 80097ac:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80097b0:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 80097b4:	440e      	add	r6, r1
 80097b6:	e798      	b.n	80096ea <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 80097b8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80097bc:	42a8      	cmp	r0, r5
 80097be:	d263      	bcs.n	8009888 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 80097c0:	9b00      	ldr	r3, [sp, #0]
 80097c2:	4631      	mov	r1, r6
 80097c4:	eb00 0b03 	add.w	fp, r0, r3
 80097c8:	4558      	cmp	r0, fp
 80097ca:	d24f      	bcs.n	800986c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 80097cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097d0:	b12b      	cbz	r3, 80097de <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18a>
 80097d2:	2bff      	cmp	r3, #255	; 0xff
 80097d4:	f8b4 e000 	ldrh.w	lr, [r4]
 80097d8:	d104      	bne.n	80097e4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x190>
 80097da:	f8a0 e000 	strh.w	lr, [r0]
 80097de:	3002      	adds	r0, #2
 80097e0:	3402      	adds	r4, #2
 80097e2:	e7f1      	b.n	80097c8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x174>
 80097e4:	8802      	ldrh	r2, [r0, #0]
 80097e6:	b29f      	uxth	r7, r3
 80097e8:	43db      	mvns	r3, r3
 80097ea:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80097ee:	1216      	asrs	r6, r2, #8
 80097f0:	b2db      	uxtb	r3, r3
 80097f2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80097f6:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80097fa:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 80097fe:	00d2      	lsls	r2, r2, #3
 8009800:	fb16 f603 	smulbb	r6, r6, r3
 8009804:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8009808:	b2d2      	uxtb	r2, r2
 800980a:	fb0c 6c07 	mla	ip, ip, r7, r6
 800980e:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8009812:	fb1a fa03 	smulbb	sl, sl, r3
 8009816:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 800981a:	fb12 f303 	smulbb	r3, r2, r3
 800981e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8009822:	fa5f fe8e 	uxtb.w	lr, lr
 8009826:	fb06 a607 	mla	r6, r6, r7, sl
 800982a:	fa1f fc8c 	uxth.w	ip, ip
 800982e:	fb0e 3e07 	mla	lr, lr, r7, r3
 8009832:	b2b6      	uxth	r6, r6
 8009834:	f10c 0201 	add.w	r2, ip, #1
 8009838:	fa1f fe8e 	uxth.w	lr, lr
 800983c:	f106 0a01 	add.w	sl, r6, #1
 8009840:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8009844:	f10e 0301 	add.w	r3, lr, #1
 8009848:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 800984c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8009850:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8009854:	0976      	lsrs	r6, r6, #5
 8009856:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 800985a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 800985e:	ea4c 0c0e 	orr.w	ip, ip, lr
 8009862:	ea4c 0c06 	orr.w	ip, ip, r6
 8009866:	f8a0 c000 	strh.w	ip, [r0]
 800986a:	e7b8      	b.n	80097de <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18a>
 800986c:	f8b9 3000 	ldrh.w	r3, [r9]
 8009870:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8009874:	eba3 0308 	sub.w	r3, r3, r8
 8009878:	eba6 0608 	sub.w	r6, r6, r8
 800987c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8009880:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8009884:	440e      	add	r6, r1
 8009886:	e799      	b.n	80097bc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x168>
 8009888:	4b03      	ldr	r3, [pc, #12]	; (8009898 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 800988a:	6818      	ldr	r0, [r3, #0]
 800988c:	6803      	ldr	r3, [r0, #0]
 800988e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009890:	4798      	blx	r3
 8009892:	b007      	add	sp, #28
 8009894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009898:	2000132c 	.word	0x2000132c
 800989c:	20001326 	.word	0x20001326

080098a0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 80098a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a4:	b089      	sub	sp, #36	; 0x24
 80098a6:	4682      	mov	sl, r0
 80098a8:	460d      	mov	r5, r1
 80098aa:	4691      	mov	r9, r2
 80098ac:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 80098b0:	4698      	mov	r8, r3
 80098b2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80098b4:	b3ae      	cbz	r6, 8009922 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 80098b6:	4608      	mov	r0, r1
 80098b8:	f7fe fca0 	bl	80081fc <_ZNK8touchgfx6Bitmap8getWidthEv>
 80098bc:	4607      	mov	r7, r0
 80098be:	4628      	mov	r0, r5
 80098c0:	f7fe fcd6 	bl	8008270 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80098c4:	f8ad 000e 	strh.w	r0, [sp, #14]
 80098c8:	4628      	mov	r0, r5
 80098ca:	f8ad 9008 	strh.w	r9, [sp, #8]
 80098ce:	f8ad 800a 	strh.w	r8, [sp, #10]
 80098d2:	f8ad 700c 	strh.w	r7, [sp, #12]
 80098d6:	f7fe fe23 	bl	8008520 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80098da:	b178      	cbz	r0, 80098fc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80098dc:	4628      	mov	r0, r5
 80098de:	f7fe fe1f 	bl	8008520 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80098e2:	2802      	cmp	r0, #2
 80098e4:	d00a      	beq.n	80098fc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80098e6:	4628      	mov	r0, r5
 80098e8:	f7fe fe1a 	bl	8008520 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80098ec:	280b      	cmp	r0, #11
 80098ee:	d005      	beq.n	80098fc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80098f0:	4b69      	ldr	r3, [pc, #420]	; (8009a98 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1f8>)
 80098f2:	214b      	movs	r1, #75	; 0x4b
 80098f4:	4a69      	ldr	r2, [pc, #420]	; (8009a9c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fc>)
 80098f6:	486a      	ldr	r0, [pc, #424]	; (8009aa0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x200>)
 80098f8:	f000 fc60 	bl	800a1bc <__assert_func>
 80098fc:	4628      	mov	r0, r5
 80098fe:	f7fe fd85 	bl	800840c <_ZNK8touchgfx6Bitmap7getDataEv>
 8009902:	4607      	mov	r7, r0
 8009904:	4628      	mov	r0, r5
 8009906:	f7fe fdb3 	bl	8008470 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 800990a:	4681      	mov	r9, r0
 800990c:	4628      	mov	r0, r5
 800990e:	f7fe fe07 	bl	8008520 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8009912:	2802      	cmp	r0, #2
 8009914:	d108      	bne.n	8009928 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 8009916:	4633      	mov	r3, r6
 8009918:	4622      	mov	r2, r4
 800991a:	a902      	add	r1, sp, #8
 800991c:	4638      	mov	r0, r7
 800991e:	f7ff fa69 	bl	8008df4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8009922:	b009      	add	sp, #36	; 0x24
 8009924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009928:	4628      	mov	r0, r5
 800992a:	f7fe fdf9 	bl	8008520 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800992e:	280b      	cmp	r0, #11
 8009930:	d107      	bne.n	8009942 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 8009932:	9600      	str	r6, [sp, #0]
 8009934:	4623      	mov	r3, r4
 8009936:	aa02      	add	r2, sp, #8
 8009938:	4649      	mov	r1, r9
 800993a:	4638      	mov	r0, r7
 800993c:	f7ff fe72 	bl	8009624 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8009940:	e7ef      	b.n	8009922 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8009942:	4628      	mov	r0, r5
 8009944:	f7fe fd28 	bl	8008398 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8009948:	b950      	cbnz	r0, 8009960 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 800994a:	f8da 3000 	ldr.w	r3, [sl]
 800994e:	aa02      	add	r2, sp, #8
 8009950:	4639      	mov	r1, r7
 8009952:	e9cd 6000 	strd	r6, r0, [sp]
 8009956:	4650      	mov	r0, sl
 8009958:	68dd      	ldr	r5, [r3, #12]
 800995a:	4623      	mov	r3, r4
 800995c:	47a8      	blx	r5
 800995e:	e7e0      	b.n	8009922 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8009960:	f10d 0818 	add.w	r8, sp, #24
 8009964:	4629      	mov	r1, r5
 8009966:	ad04      	add	r5, sp, #16
 8009968:	4640      	mov	r0, r8
 800996a:	f7fe fcbb 	bl	80082e4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800996e:	e898 0003 	ldmia.w	r8, {r0, r1}
 8009972:	e885 0003 	stmia.w	r5, {r0, r1}
 8009976:	4628      	mov	r0, r5
 8009978:	4621      	mov	r1, r4
 800997a:	f7fb fedf 	bl	800573c <_ZN8touchgfx4RectaNERKS0_>
 800997e:	4628      	mov	r0, r5
 8009980:	f7fd fb20 	bl	8006fc4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8009984:	b138      	cbz	r0, 8009996 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf6>
 8009986:	4623      	mov	r3, r4
 8009988:	9600      	str	r6, [sp, #0]
 800998a:	aa02      	add	r2, sp, #8
 800998c:	4649      	mov	r1, r9
 800998e:	4638      	mov	r0, r7
 8009990:	f7ff fe60 	bl	8009654 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8009994:	e7c5      	b.n	8009922 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8009996:	f8da 3000 	ldr.w	r3, [sl]
 800999a:	aa02      	add	r2, sp, #8
 800999c:	4639      	mov	r1, r7
 800999e:	e9cd 6000 	strd	r6, r0, [sp]
 80099a2:	4650      	mov	r0, sl
 80099a4:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 80099a8:	462b      	mov	r3, r5
 80099aa:	47d8      	blx	fp
 80099ac:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80099b0:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80099b4:	4293      	cmp	r3, r2
 80099b6:	dd13      	ble.n	80099e0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x140>
 80099b8:	f9b4 0000 	ldrsh.w	r0, [r4]
 80099bc:	1a9b      	subs	r3, r3, r2
 80099be:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80099c2:	f8ad 0018 	strh.w	r0, [sp, #24]
 80099c6:	4638      	mov	r0, r7
 80099c8:	f8ad 201a 	strh.w	r2, [sp, #26]
 80099cc:	aa02      	add	r2, sp, #8
 80099ce:	f8ad 101c 	strh.w	r1, [sp, #28]
 80099d2:	4649      	mov	r1, r9
 80099d4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80099d8:	4643      	mov	r3, r8
 80099da:	9600      	str	r6, [sp, #0]
 80099dc:	f7ff fe3a 	bl	8009654 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80099e0:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80099e4:	f9b4 2000 	ldrsh.w	r2, [r4]
 80099e8:	4293      	cmp	r3, r2
 80099ea:	dd13      	ble.n	8009a14 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 80099ec:	1a9b      	subs	r3, r3, r2
 80099ee:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 80099f2:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80099f6:	f8ad 2018 	strh.w	r2, [sp, #24]
 80099fa:	aa02      	add	r2, sp, #8
 80099fc:	f8ad 001a 	strh.w	r0, [sp, #26]
 8009a00:	4638      	mov	r0, r7
 8009a02:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009a06:	4643      	mov	r3, r8
 8009a08:	f8ad 101e 	strh.w	r1, [sp, #30]
 8009a0c:	4649      	mov	r1, r9
 8009a0e:	9600      	str	r6, [sp, #0]
 8009a10:	f7ff fe20 	bl	8009654 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8009a14:	88a2      	ldrh	r2, [r4, #4]
 8009a16:	8823      	ldrh	r3, [r4, #0]
 8009a18:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8009a1c:	4413      	add	r3, r2
 8009a1e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8009a22:	440a      	add	r2, r1
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	b292      	uxth	r2, r2
 8009a28:	b218      	sxth	r0, r3
 8009a2a:	b211      	sxth	r1, r2
 8009a2c:	4288      	cmp	r0, r1
 8009a2e:	dd13      	ble.n	8009a58 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1b8>
 8009a30:	1a9b      	subs	r3, r3, r2
 8009a32:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8009a36:	f9bd 5012 	ldrsh.w	r5, [sp, #18]
 8009a3a:	aa02      	add	r2, sp, #8
 8009a3c:	f8ad 1018 	strh.w	r1, [sp, #24]
 8009a40:	4649      	mov	r1, r9
 8009a42:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009a46:	4643      	mov	r3, r8
 8009a48:	f8ad 001e 	strh.w	r0, [sp, #30]
 8009a4c:	4638      	mov	r0, r7
 8009a4e:	9600      	str	r6, [sp, #0]
 8009a50:	f8ad 501a 	strh.w	r5, [sp, #26]
 8009a54:	f7ff fdfe 	bl	8009654 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8009a58:	88e2      	ldrh	r2, [r4, #6]
 8009a5a:	8863      	ldrh	r3, [r4, #2]
 8009a5c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8009a60:	4413      	add	r3, r2
 8009a62:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8009a66:	440a      	add	r2, r1
 8009a68:	b29b      	uxth	r3, r3
 8009a6a:	b292      	uxth	r2, r2
 8009a6c:	b218      	sxth	r0, r3
 8009a6e:	b211      	sxth	r1, r2
 8009a70:	4288      	cmp	r0, r1
 8009a72:	f77f af56 	ble.w	8009922 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8009a76:	f9b4 5000 	ldrsh.w	r5, [r4]
 8009a7a:	1a9b      	subs	r3, r3, r2
 8009a7c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8009a80:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009a84:	4643      	mov	r3, r8
 8009a86:	f8ad 5018 	strh.w	r5, [sp, #24]
 8009a8a:	f8ad 101a 	strh.w	r1, [sp, #26]
 8009a8e:	f8ad 001c 	strh.w	r0, [sp, #28]
 8009a92:	9600      	str	r6, [sp, #0]
 8009a94:	e779      	b.n	800998a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xea>
 8009a96:	bf00      	nop
 8009a98:	0800d141 	.word	0x0800d141
 8009a9c:	0800d63e 	.word	0x0800d63e
 8009aa0:	0800d42f 	.word	0x0800d42f

08009aa4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8009aa4:	b508      	push	{r3, lr}
 8009aa6:	b180      	cbz	r0, 8009aca <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 8009aa8:	2902      	cmp	r1, #2
 8009aaa:	d014      	beq.n	8009ad6 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 8009aac:	2903      	cmp	r1, #3
 8009aae:	d01d      	beq.n	8009aec <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 8009ab0:	2901      	cmp	r1, #1
 8009ab2:	d101      	bne.n	8009ab8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8009ab4:	2001      	movs	r0, #1
 8009ab6:	bd08      	pop	{r3, pc}
 8009ab8:	4b0e      	ldr	r3, [pc, #56]	; (8009af4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8009aba:	8818      	ldrh	r0, [r3, #0]
 8009abc:	b990      	cbnz	r0, 8009ae4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8009abe:	4b0e      	ldr	r3, [pc, #56]	; (8009af8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 8009ac0:	2154      	movs	r1, #84	; 0x54
 8009ac2:	4a0e      	ldr	r2, [pc, #56]	; (8009afc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 8009ac4:	480e      	ldr	r0, [pc, #56]	; (8009b00 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 8009ac6:	f000 fb79 	bl	800a1bc <__assert_func>
 8009aca:	2902      	cmp	r1, #2
 8009acc:	d00e      	beq.n	8009aec <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 8009ace:	2903      	cmp	r1, #3
 8009ad0:	d0f2      	beq.n	8009ab8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8009ad2:	2901      	cmp	r1, #1
 8009ad4:	d1ee      	bne.n	8009ab4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 8009ad6:	4b07      	ldr	r3, [pc, #28]	; (8009af4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8009ad8:	8818      	ldrh	r0, [r3, #0]
 8009ada:	2800      	cmp	r0, #0
 8009adc:	d0ef      	beq.n	8009abe <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 8009ade:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8009ae2:	e7e8      	b.n	8009ab6 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8009ae4:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8009ae8:	4240      	negs	r0, r0
 8009aea:	e7e4      	b.n	8009ab6 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8009aec:	f04f 30ff 	mov.w	r0, #4294967295
 8009af0:	e7e1      	b.n	8009ab6 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8009af2:	bf00      	nop
 8009af4:	20001326 	.word	0x20001326
 8009af8:	0800d461 	.word	0x0800d461
 8009afc:	0800d74d 	.word	0x0800d74d
 8009b00:	0800d4a3 	.word	0x0800d4a3

08009b04 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8009b04:	b508      	push	{r3, lr}
 8009b06:	b180      	cbz	r0, 8009b2a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 8009b08:	2902      	cmp	r1, #2
 8009b0a:	d014      	beq.n	8009b36 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 8009b0c:	2903      	cmp	r1, #3
 8009b0e:	d018      	beq.n	8009b42 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 8009b10:	2901      	cmp	r1, #1
 8009b12:	d001      	beq.n	8009b18 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8009b14:	2001      	movs	r0, #1
 8009b16:	e013      	b.n	8009b40 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8009b18:	4b0e      	ldr	r3, [pc, #56]	; (8009b54 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8009b1a:	8818      	ldrh	r0, [r3, #0]
 8009b1c:	b970      	cbnz	r0, 8009b3c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 8009b1e:	4b0e      	ldr	r3, [pc, #56]	; (8009b58 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 8009b20:	2154      	movs	r1, #84	; 0x54
 8009b22:	4a0e      	ldr	r2, [pc, #56]	; (8009b5c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 8009b24:	480e      	ldr	r0, [pc, #56]	; (8009b60 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 8009b26:	f000 fb49 	bl	800a1bc <__assert_func>
 8009b2a:	2902      	cmp	r1, #2
 8009b2c:	d009      	beq.n	8009b42 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 8009b2e:	2903      	cmp	r1, #3
 8009b30:	d0f0      	beq.n	8009b14 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 8009b32:	2901      	cmp	r1, #1
 8009b34:	d1f0      	bne.n	8009b18 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8009b36:	f04f 30ff 	mov.w	r0, #4294967295
 8009b3a:	e001      	b.n	8009b40 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8009b3c:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8009b40:	bd08      	pop	{r3, pc}
 8009b42:	4b04      	ldr	r3, [pc, #16]	; (8009b54 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8009b44:	8818      	ldrh	r0, [r3, #0]
 8009b46:	2800      	cmp	r0, #0
 8009b48:	d0e9      	beq.n	8009b1e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 8009b4a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8009b4e:	4240      	negs	r0, r0
 8009b50:	e7f6      	b.n	8009b40 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8009b52:	bf00      	nop
 8009b54:	20001326 	.word	0x20001326
 8009b58:	0800d461 	.word	0x0800d461
 8009b5c:	0800d74d 	.word	0x0800d74d
 8009b60:	0800d4a3 	.word	0x0800d4a3

08009b64 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8009b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b68:	b099      	sub	sp, #100	; 0x64
 8009b6a:	910b      	str	r1, [sp, #44]	; 0x2c
 8009b6c:	a914      	add	r1, sp, #80	; 0x50
 8009b6e:	f9bd 5088 	ldrsh.w	r5, [sp, #136]	; 0x88
 8009b72:	f8bd 6090 	ldrh.w	r6, [sp, #144]	; 0x90
 8009b76:	f8bd 7094 	ldrh.w	r7, [sp, #148]	; 0x94
 8009b7a:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 8009b7e:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 8009b82:	e881 000c 	stmia.w	r1, {r2, r3}
 8009b86:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 8009b8a:	f89d 10a4 	ldrb.w	r1, [sp, #164]	; 0xa4
 8009b8e:	9308      	str	r3, [sp, #32]
 8009b90:	910c      	str	r1, [sp, #48]	; 0x30
 8009b92:	f89d 10b0 	ldrb.w	r1, [sp, #176]	; 0xb0
 8009b96:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 8009b9a:	910d      	str	r1, [sp, #52]	; 0x34
 8009b9c:	f893 b00d 	ldrb.w	fp, [r3, #13]
 8009ba0:	7998      	ldrb	r0, [r3, #6]
 8009ba2:	ea4f 114b 	mov.w	r1, fp, lsl #5
 8009ba6:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8009baa:	4301      	orrs	r1, r0
 8009bac:	9109      	str	r1, [sp, #36]	; 0x24
 8009bae:	f000 81e4 	beq.w	8009f7a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 8009bb2:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
 8009bb6:	79d9      	ldrb	r1, [r3, #7]
 8009bb8:	f40b 7b80 	and.w	fp, fp, #256	; 0x100
 8009bbc:	ea51 0b0b 	orrs.w	fp, r1, fp
 8009bc0:	f000 81db 	beq.w	8009f7a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 8009bc4:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	2e00      	cmp	r6, #0
 8009bcc:	f000 80fd 	beq.w	8009dca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x266>
 8009bd0:	1af6      	subs	r6, r6, r3
 8009bd2:	b2b6      	uxth	r6, r6
 8009bd4:	0433      	lsls	r3, r6, #16
 8009bd6:	d502      	bpl.n	8009bde <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8009bd8:	1bad      	subs	r5, r5, r6
 8009bda:	2600      	movs	r6, #0
 8009bdc:	b22d      	sxth	r5, r5
 8009bde:	f9b2 1000 	ldrsh.w	r1, [r2]
 8009be2:	a814      	add	r0, sp, #80	; 0x50
 8009be4:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8009be8:	428d      	cmp	r5, r1
 8009bea:	b28b      	uxth	r3, r1
 8009bec:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8009bf0:	bfbf      	itttt	lt
 8009bf2:	18f6      	addlt	r6, r6, r3
 8009bf4:	1b75      	sublt	r5, r6, r5
 8009bf6:	b2ae      	uxthlt	r6, r5
 8009bf8:	460d      	movlt	r5, r1
 8009bfa:	8891      	ldrh	r1, [r2, #4]
 8009bfc:	440b      	add	r3, r1
 8009bfe:	4629      	mov	r1, r5
 8009c00:	b21b      	sxth	r3, r3
 8009c02:	9311      	str	r3, [sp, #68]	; 0x44
 8009c04:	8853      	ldrh	r3, [r2, #2]
 8009c06:	88d2      	ldrh	r2, [r2, #6]
 8009c08:	4413      	add	r3, r2
 8009c0a:	9a08      	ldr	r2, [sp, #32]
 8009c0c:	b21b      	sxth	r3, r3
 8009c0e:	9310      	str	r3, [sp, #64]	; 0x40
 8009c10:	4bb1      	ldr	r3, [pc, #708]	; (8009ed8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>)
 8009c12:	f893 9000 	ldrb.w	r9, [r3]
 8009c16:	f109 3cff 	add.w	ip, r9, #4294967295
 8009c1a:	f1dc 0300 	rsbs	r3, ip, #0
 8009c1e:	eb43 030c 	adc.w	r3, r3, ip
 8009c22:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c24:	4653      	mov	r3, sl
 8009c26:	f7fd f827 	bl	8006c78 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8009c2a:	4629      	mov	r1, r5
 8009c2c:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 8009c30:	4653      	mov	r3, sl
 8009c32:	9a08      	ldr	r2, [sp, #32]
 8009c34:	a814      	add	r0, sp, #80	; 0x50
 8009c36:	f7fd f837 	bl	8006ca8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8009c3a:	a918      	add	r1, sp, #96	; 0x60
 8009c3c:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8009c40:	a817      	add	r0, sp, #92	; 0x5c
 8009c42:	f7fd f979 	bl	8006f38 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8009c46:	f1ba 0f00 	cmp.w	sl, #0
 8009c4a:	f040 80c1 	bne.w	8009dd0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x26c>
 8009c4e:	f1b9 0f01 	cmp.w	r9, #1
 8009c52:	f040 80c5 	bne.w	8009de0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x27c>
 8009c56:	2301      	movs	r3, #1
 8009c58:	f1b8 0f01 	cmp.w	r8, #1
 8009c5c:	fa03 f308 	lsl.w	r3, r3, r8
 8009c60:	f103 33ff 	add.w	r3, r3, #4294967295
 8009c64:	b2db      	uxtb	r3, r3
 8009c66:	930a      	str	r3, [sp, #40]	; 0x28
 8009c68:	f000 80e5 	beq.w	8009e36 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d2>
 8009c6c:	f1b8 0f02 	cmp.w	r8, #2
 8009c70:	f000 80e4 	beq.w	8009e3c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d8>
 8009c74:	f1b8 0f04 	cmp.w	r8, #4
 8009c78:	bf15      	itete	ne
 8009c7a:	46c1      	movne	r9, r8
 8009c7c:	f04f 0904 	moveq.w	r9, #4
 8009c80:	2301      	movne	r3, #1
 8009c82:	2311      	moveq	r3, #17
 8009c84:	9307      	str	r3, [sp, #28]
 8009c86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c88:	b153      	cbz	r3, 8009ca0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13c>
 8009c8a:	2408      	movs	r4, #8
 8009c8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c8e:	fb94 f3f9 	sdiv	r3, r4, r9
 8009c92:	1e5c      	subs	r4, r3, #1
 8009c94:	4414      	add	r4, r2
 8009c96:	fb94 f4f3 	sdiv	r4, r4, r3
 8009c9a:	fb14 f403 	smulbb	r4, r4, r3
 8009c9e:	b2a4      	uxth	r4, r4
 8009ca0:	b906      	cbnz	r6, 8009ca4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x140>
 8009ca2:	b16f      	cbz	r7, 8009cc0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x15c>
 8009ca4:	fb07 6304 	mla	r3, r7, r4, r6
 8009ca8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8009caa:	4639      	mov	r1, r7
 8009cac:	fb08 f303 	mul.w	r3, r8, r3
 8009cb0:	f003 0707 	and.w	r7, r3, #7
 8009cb4:	eb02 03d3 	add.w	r3, r2, r3, lsr #3
 8009cb8:	9328      	str	r3, [sp, #160]	; 0xa0
 8009cba:	ebab 0301 	sub.w	r3, fp, r1
 8009cbe:	930e      	str	r3, [sp, #56]	; 0x38
 8009cc0:	4651      	mov	r1, sl
 8009cc2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009cc4:	f7ff feee 	bl	8009aa4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8009cc8:	4651      	mov	r1, sl
 8009cca:	4683      	mov	fp, r0
 8009ccc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009cce:	f7ff ff19 	bl	8009b04 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8009cd2:	9a08      	ldr	r2, [sp, #32]
 8009cd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009cd6:	4682      	mov	sl, r0
 8009cd8:	1a9b      	subs	r3, r3, r2
 8009cda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	bfa8      	it	ge
 8009ce0:	461a      	movge	r2, r3
 8009ce2:	2a00      	cmp	r2, #0
 8009ce4:	9208      	str	r2, [sp, #32]
 8009ce6:	f340 8148 	ble.w	8009f7a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 8009cea:	1bad      	subs	r5, r5, r6
 8009cec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009cee:	1b5d      	subs	r5, r3, r5
 8009cf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cf2:	429d      	cmp	r5, r3
 8009cf4:	bfd4      	ite	le
 8009cf6:	ebc6 0605 	rsble	r6, r6, r5
 8009cfa:	ebc6 0603 	rsbgt	r6, r6, r3
 8009cfe:	2e00      	cmp	r6, #0
 8009d00:	f340 813b 	ble.w	8009f7a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 8009d04:	1ba4      	subs	r4, r4, r6
 8009d06:	fb09 f304 	mul.w	r3, r9, r4
 8009d0a:	930e      	str	r3, [sp, #56]	; 0x38
 8009d0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	f040 809d 	bne.w	8009e4e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ea>
 8009d14:	4b71      	ldr	r3, [pc, #452]	; (8009edc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 8009d16:	6818      	ldr	r0, [r3, #0]
 8009d18:	6803      	ldr	r3, [r0, #0]
 8009d1a:	6a1b      	ldr	r3, [r3, #32]
 8009d1c:	4798      	blx	r3
 8009d1e:	4970      	ldr	r1, [pc, #448]	; (8009ee0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 8009d20:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8009d24:	880c      	ldrh	r4, [r1, #0]
 8009d26:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 8009d2a:	fb04 1303 	mla	r3, r4, r3, r1
 8009d2e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009d32:	9309      	str	r3, [sp, #36]	; 0x24
 8009d34:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009d36:	7819      	ldrb	r1, [r3, #0]
 8009d38:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009d3a:	4139      	asrs	r1, r7
 8009d3c:	0a1b      	lsrs	r3, r3, #8
 8009d3e:	b2c9      	uxtb	r1, r1
 8009d40:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8009d44:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d46:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009d48:	08db      	lsrs	r3, r3, #3
 8009d4a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8009d4e:	9310      	str	r3, [sp, #64]	; 0x40
 8009d50:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009d52:	00db      	lsls	r3, r3, #3
 8009d54:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8009d58:	9311      	str	r3, [sp, #68]	; 0x44
 8009d5a:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8009d5e:	fb0b ab16 	mls	fp, fp, r6, sl
 8009d62:	fb03 fa06 	mul.w	sl, r3, r6
 8009d66:	930c      	str	r3, [sp, #48]	; 0x30
 8009d68:	eb0a 034b 	add.w	r3, sl, fp, lsl #1
 8009d6c:	9312      	str	r3, [sp, #72]	; 0x48
 8009d6e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	9313      	str	r3, [sp, #76]	; 0x4c
 8009d74:	9b08      	ldr	r3, [sp, #32]
 8009d76:	3b01      	subs	r3, #1
 8009d78:	9308      	str	r3, [sp, #32]
 8009d7a:	3301      	adds	r3, #1
 8009d7c:	f000 80c4 	beq.w	8009f08 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 8009d80:	46b2      	mov	sl, r6
 8009d82:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8009d86:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8009d8a:	f0c0 80ab 	bcc.w	8009ee4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 8009d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d90:	400b      	ands	r3, r1
 8009d92:	d00a      	beq.n	8009daa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x246>
 8009d94:	9807      	ldr	r0, [sp, #28]
 8009d96:	fb13 f300 	smulbb	r3, r3, r0
 8009d9a:	2bfe      	cmp	r3, #254	; 0xfe
 8009d9c:	dd59      	ble.n	8009e52 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ee>
 8009d9e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009da0:	28ff      	cmp	r0, #255	; 0xff
 8009da2:	d156      	bne.n	8009e52 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ee>
 8009da4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8009da6:	f8ae 4000 	strh.w	r4, [lr]
 8009daa:	4447      	add	r7, r8
 8009dac:	b2bf      	uxth	r7, r7
 8009dae:	2f07      	cmp	r7, #7
 8009db0:	bf89      	itett	hi
 8009db2:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 8009db4:	fa41 f109 	asrls.w	r1, r1, r9
 8009db8:	2700      	movhi	r7, #0
 8009dba:	7859      	ldrbhi	r1, [r3, #1]
 8009dbc:	bf8a      	itet	hi
 8009dbe:	3301      	addhi	r3, #1
 8009dc0:	b2c9      	uxtbls	r1, r1
 8009dc2:	9328      	strhi	r3, [sp, #160]	; 0xa0
 8009dc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009dc6:	449e      	add	lr, r3
 8009dc8:	e7dd      	b.n	8009d86 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x222>
 8009dca:	441d      	add	r5, r3
 8009dcc:	b22d      	sxth	r5, r5
 8009dce:	e706      	b.n	8009bde <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8009dd0:	f1ba 0f01 	cmp.w	sl, #1
 8009dd4:	f47f af3f 	bne.w	8009c56 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8009dd8:	f1b9 0f01 	cmp.w	r9, #1
 8009ddc:	f47f af3b 	bne.w	8009c56 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8009de0:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8009edc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 8009de4:	f8d9 0000 	ldr.w	r0, [r9]
 8009de8:	6803      	ldr	r3, [r0, #0]
 8009dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dec:	4798      	blx	r3
 8009dee:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 8009df2:	464a      	mov	r2, r9
 8009df4:	d006      	beq.n	8009e04 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 8009df6:	f1b8 0f04 	cmp.w	r8, #4
 8009dfa:	d11a      	bne.n	8009e32 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 8009dfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009dfe:	3300      	adds	r3, #0
 8009e00:	bf18      	it	ne
 8009e02:	2301      	movne	r3, #1
 8009e04:	05c0      	lsls	r0, r0, #23
 8009e06:	f140 8088 	bpl.w	8009f1a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b6>
 8009e0a:	f1b8 0f08 	cmp.w	r8, #8
 8009e0e:	f040 8084 	bne.w	8009f1a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b6>
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	bf14      	ite	ne
 8009e16:	2180      	movne	r1, #128	; 0x80
 8009e18:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8009e1c:	2e00      	cmp	r6, #0
 8009e1e:	f040 80af 	bne.w	8009f80 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x41c>
 8009e22:	2f00      	cmp	r7, #0
 8009e24:	f000 8083 	beq.w	8009f2e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 8009e28:	23ff      	movs	r3, #255	; 0xff
 8009e2a:	46c1      	mov	r9, r8
 8009e2c:	930a      	str	r3, [sp, #40]	; 0x28
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e728      	b.n	8009c84 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x120>
 8009e32:	2300      	movs	r3, #0
 8009e34:	e7e6      	b.n	8009e04 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 8009e36:	46c1      	mov	r9, r8
 8009e38:	23ff      	movs	r3, #255	; 0xff
 8009e3a:	e723      	b.n	8009c84 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x120>
 8009e3c:	46c1      	mov	r9, r8
 8009e3e:	2355      	movs	r3, #85	; 0x55
 8009e40:	e720      	b.n	8009c84 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x120>
 8009e42:	23ff      	movs	r3, #255	; 0xff
 8009e44:	46c1      	mov	r9, r8
 8009e46:	930a      	str	r3, [sp, #40]	; 0x28
 8009e48:	2301      	movs	r3, #1
 8009e4a:	9307      	str	r3, [sp, #28]
 8009e4c:	e71d      	b.n	8009c8a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x126>
 8009e4e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009e50:	e765      	b.n	8009d1e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ba>
 8009e52:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009e54:	f8be 5000 	ldrh.w	r5, [lr]
 8009e58:	fb10 f303 	smulbb	r3, r0, r3
 8009e5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009e5e:	122c      	asrs	r4, r5, #8
 8009e60:	b29b      	uxth	r3, r3
 8009e62:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8009e66:	1c58      	adds	r0, r3, #1
 8009e68:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8009e6c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009e6e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8009e72:	fa1f fc83 	uxth.w	ip, r3
 8009e76:	43db      	mvns	r3, r3
 8009e78:	fb10 f00c 	smulbb	r0, r0, ip
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	fb1c fb02 	smulbb	fp, ip, r2
 8009e82:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009e84:	fb04 0403 	mla	r4, r4, r3, r0
 8009e88:	10e8      	asrs	r0, r5, #3
 8009e8a:	fb1c fc02 	smulbb	ip, ip, r2
 8009e8e:	00ed      	lsls	r5, r5, #3
 8009e90:	b2a4      	uxth	r4, r4
 8009e92:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8009e96:	b2ed      	uxtb	r5, r5
 8009e98:	fb00 b003 	mla	r0, r0, r3, fp
 8009e9c:	fb05 cc03 	mla	ip, r5, r3, ip
 8009ea0:	1c63      	adds	r3, r4, #1
 8009ea2:	b280      	uxth	r0, r0
 8009ea4:	fa1f fc8c 	uxth.w	ip, ip
 8009ea8:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8009eac:	f10c 0b01 	add.w	fp, ip, #1
 8009eb0:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8009eb4:	eb0b 2b1c 	add.w	fp, fp, ip, lsr #8
 8009eb8:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8009ebc:	ea44 040b 	orr.w	r4, r4, fp
 8009ec0:	f100 0b01 	add.w	fp, r0, #1
 8009ec4:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 8009ec8:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8009ecc:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8009ed0:	ea44 040b 	orr.w	r4, r4, fp
 8009ed4:	e767      	b.n	8009da6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x242>
 8009ed6:	bf00      	nop
 8009ed8:	20001324 	.word	0x20001324
 8009edc:	2000132c 	.word	0x2000132c
 8009ee0:	20001326 	.word	0x20001326
 8009ee4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ee6:	b153      	cbz	r3, 8009efe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 8009ee8:	441f      	add	r7, r3
 8009eea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009eec:	b2bf      	uxth	r7, r7
 8009eee:	eb03 03d7 	add.w	r3, r3, r7, lsr #3
 8009ef2:	f007 0707 	and.w	r7, r7, #7
 8009ef6:	7819      	ldrb	r1, [r3, #0]
 8009ef8:	9328      	str	r3, [sp, #160]	; 0xa0
 8009efa:	4139      	asrs	r1, r7
 8009efc:	b2c9      	uxtb	r1, r1
 8009efe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009f02:	441a      	add	r2, r3
 8009f04:	9209      	str	r2, [sp, #36]	; 0x24
 8009f06:	e735      	b.n	8009d74 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x210>
 8009f08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d135      	bne.n	8009f7a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 8009f0e:	4b21      	ldr	r3, [pc, #132]	; (8009f94 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x430>)
 8009f10:	6818      	ldr	r0, [r3, #0]
 8009f12:	6803      	ldr	r3, [r0, #0]
 8009f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f16:	4798      	blx	r3
 8009f18:	e02f      	b.n	8009f7a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x416>
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	f43f ae9b 	beq.w	8009c56 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8009f20:	2e00      	cmp	r6, #0
 8009f22:	f47f ae98 	bne.w	8009c56 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8009f26:	2f00      	cmp	r7, #0
 8009f28:	f47f ae95 	bne.w	8009c56 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8009f2c:	2180      	movs	r1, #128	; 0x80
 8009f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f30:	9811      	ldr	r0, [sp, #68]	; 0x44
 8009f32:	18eb      	adds	r3, r5, r3
 8009f34:	4283      	cmp	r3, r0
 8009f36:	f73f ae8e 	bgt.w	8009c56 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8009f3a:	9b08      	ldr	r3, [sp, #32]
 8009f3c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009f3e:	445b      	add	r3, fp
 8009f40:	4283      	cmp	r3, r0
 8009f42:	f73f ae88 	bgt.w	8009c56 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf2>
 8009f46:	f1b8 0f08 	cmp.w	r8, #8
 8009f4a:	6810      	ldr	r0, [r2, #0]
 8009f4c:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 8009f50:	bf18      	it	ne
 8009f52:	3401      	addne	r4, #1
 8009f54:	6805      	ldr	r5, [r0, #0]
 8009f56:	9105      	str	r1, [sp, #20]
 8009f58:	bf18      	it	ne
 8009f5a:	f024 0401 	bicne.w	r4, r4, #1
 8009f5e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009f60:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8009f64:	bf18      	it	ne
 8009f66:	b2a4      	uxthne	r4, r4
 8009f68:	9104      	str	r1, [sp, #16]
 8009f6a:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8009f6c:	e9cd 4b00 	strd	r4, fp, [sp]
 8009f70:	e9cd 4102 	strd	r4, r1, [sp, #8]
 8009f74:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8009f76:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8009f78:	47a0      	blx	r4
 8009f7a:	b019      	add	sp, #100	; 0x64
 8009f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	f47f af5d 	bne.w	8009e42 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 8009f88:	23ff      	movs	r3, #255	; 0xff
 8009f8a:	46c1      	mov	r9, r8
 8009f8c:	930a      	str	r3, [sp, #40]	; 0x28
 8009f8e:	2301      	movs	r3, #1
 8009f90:	9307      	str	r3, [sp, #28]
 8009f92:	e687      	b.n	8009ca4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x140>
 8009f94:	2000132c 	.word	0x2000132c

08009f98 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8009f98:	6101      	str	r1, [r0, #16]
 8009f9a:	4770      	bx	lr

08009f9c <_ZN8touchgfx8Gestures4tickEv>:
 8009f9c:	7b83      	ldrb	r3, [r0, #14]
 8009f9e:	b14b      	cbz	r3, 8009fb4 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8009fa0:	8903      	ldrh	r3, [r0, #8]
 8009fa2:	3301      	adds	r3, #1
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	2b07      	cmp	r3, #7
 8009fa8:	8103      	strh	r3, [r0, #8]
 8009faa:	bf81      	itttt	hi
 8009fac:	2300      	movhi	r3, #0
 8009fae:	8143      	strhhi	r3, [r0, #10]
 8009fb0:	8183      	strhhi	r3, [r0, #12]
 8009fb2:	7383      	strbhi	r3, [r0, #14]
 8009fb4:	4770      	bx	lr
	...

08009fb8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8009fb8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8009fbc:	4604      	mov	r4, r0
 8009fbe:	4698      	mov	r8, r3
 8009fc0:	8880      	ldrh	r0, [r0, #4]
 8009fc2:	4617      	mov	r7, r2
 8009fc4:	4b1d      	ldr	r3, [pc, #116]	; (800a03c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8009fc6:	460e      	mov	r6, r1
 8009fc8:	f8ad 0006 	strh.w	r0, [sp, #6]
 8009fcc:	eba8 0000 	sub.w	r0, r8, r0
 8009fd0:	9300      	str	r3, [sp, #0]
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	b280      	uxth	r0, r0
 8009fd6:	8aa2      	ldrh	r2, [r4, #20]
 8009fd8:	f88d 3004 	strb.w	r3, [sp, #4]
 8009fdc:	b203      	sxth	r3, r0
 8009fde:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8009fe2:	88e1      	ldrh	r1, [r4, #6]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	f8ad 800a 	strh.w	r8, [sp, #10]
 8009fea:	f8ad 1008 	strh.w	r1, [sp, #8]
 8009fee:	bfb8      	it	lt
 8009ff0:	4240      	neglt	r0, r0
 8009ff2:	f8ad 500c 	strh.w	r5, [sp, #12]
 8009ff6:	bfb8      	it	lt
 8009ff8:	b203      	sxthlt	r3, r0
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	dc08      	bgt.n	800a010 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8009ffe:	1a69      	subs	r1, r5, r1
 800a000:	b289      	uxth	r1, r1
 800a002:	b20b      	sxth	r3, r1
 800a004:	2b00      	cmp	r3, #0
 800a006:	bfbc      	itt	lt
 800a008:	4249      	neglt	r1, r1
 800a00a:	b20b      	sxthlt	r3, r1
 800a00c:	429a      	cmp	r2, r3
 800a00e:	da13      	bge.n	800a038 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 800a010:	6920      	ldr	r0, [r4, #16]
 800a012:	4669      	mov	r1, sp
 800a014:	eba8 0606 	sub.w	r6, r8, r6
 800a018:	1bef      	subs	r7, r5, r7
 800a01a:	6803      	ldr	r3, [r0, #0]
 800a01c:	685b      	ldr	r3, [r3, #4]
 800a01e:	4798      	blx	r3
 800a020:	2300      	movs	r3, #0
 800a022:	2001      	movs	r0, #1
 800a024:	8166      	strh	r6, [r4, #10]
 800a026:	8123      	strh	r3, [r4, #8]
 800a028:	81a7      	strh	r7, [r4, #12]
 800a02a:	f8a4 8004 	strh.w	r8, [r4, #4]
 800a02e:	80e5      	strh	r5, [r4, #6]
 800a030:	73a0      	strb	r0, [r4, #14]
 800a032:	b004      	add	sp, #16
 800a034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a038:	2000      	movs	r0, #0
 800a03a:	e7fa      	b.n	800a032 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 800a03c:	0800b7d4 	.word	0x0800b7d4

0800a040 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 800a040:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a042:	461e      	mov	r6, r3
 800a044:	1e4b      	subs	r3, r1, #1
 800a046:	b085      	sub	sp, #20
 800a048:	4604      	mov	r4, r0
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	460d      	mov	r5, r1
 800a04e:	4617      	mov	r7, r2
 800a050:	d84b      	bhi.n	800a0ea <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 800a052:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800a056:	1cd3      	adds	r3, r2, #3
 800a058:	b29b      	uxth	r3, r3
 800a05a:	2b06      	cmp	r3, #6
 800a05c:	d916      	bls.n	800a08c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 800a05e:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800a100 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 800a062:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800a066:	f8cd c004 	str.w	ip, [sp, #4]
 800a06a:	f04f 0c00 	mov.w	ip, #0
 800a06e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800a072:	6900      	ldr	r0, [r0, #16]
 800a074:	f8ad 100c 	strh.w	r1, [sp, #12]
 800a078:	a901      	add	r1, sp, #4
 800a07a:	f88d c008 	strb.w	ip, [sp, #8]
 800a07e:	f8ad 200a 	strh.w	r2, [sp, #10]
 800a082:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a086:	6803      	ldr	r3, [r0, #0]
 800a088:	689b      	ldr	r3, [r3, #8]
 800a08a:	4798      	blx	r3
 800a08c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a090:	1cd3      	adds	r3, r2, #3
 800a092:	b29b      	uxth	r3, r3
 800a094:	2b06      	cmp	r3, #6
 800a096:	d916      	bls.n	800a0c6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 800a098:	f8df c064 	ldr.w	ip, [pc, #100]	; 800a100 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 800a09c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800a0a0:	f8cd c004 	str.w	ip, [sp, #4]
 800a0a4:	f04f 0c01 	mov.w	ip, #1
 800a0a8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800a0ac:	6920      	ldr	r0, [r4, #16]
 800a0ae:	f8ad 100c 	strh.w	r1, [sp, #12]
 800a0b2:	a901      	add	r1, sp, #4
 800a0b4:	f88d c008 	strb.w	ip, [sp, #8]
 800a0b8:	f8ad 200a 	strh.w	r2, [sp, #10]
 800a0bc:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a0c0:	6803      	ldr	r3, [r0, #0]
 800a0c2:	689b      	ldr	r3, [r3, #8]
 800a0c4:	4798      	blx	r3
 800a0c6:	4b0d      	ldr	r3, [pc, #52]	; (800a0fc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 800a0c8:	a901      	add	r1, sp, #4
 800a0ca:	6920      	ldr	r0, [r4, #16]
 800a0cc:	9301      	str	r3, [sp, #4]
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	f88d 5008 	strb.w	r5, [sp, #8]
 800a0d4:	f8ad 700a 	strh.w	r7, [sp, #10]
 800a0d8:	f8ad 600c 	strh.w	r6, [sp, #12]
 800a0dc:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a0e0:	6803      	ldr	r3, [r0, #0]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4798      	blx	r3
 800a0e6:	b005      	add	sp, #20
 800a0e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0ea:	2900      	cmp	r1, #0
 800a0ec:	d1eb      	bne.n	800a0c6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 800a0ee:	80a2      	strh	r2, [r4, #4]
 800a0f0:	80c6      	strh	r6, [r0, #6]
 800a0f2:	60a1      	str	r1, [r4, #8]
 800a0f4:	81a1      	strh	r1, [r4, #12]
 800a0f6:	73a1      	strb	r1, [r4, #14]
 800a0f8:	e7e5      	b.n	800a0c6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 800a0fa:	bf00      	nop
 800a0fc:	0800b7c0 	.word	0x0800b7c0
 800a100:	0800c8f4 	.word	0x0800c8f4

0800a104 <_ZdlPvj>:
 800a104:	f000 b835 	b.w	800a172 <_ZdlPv>

0800a108 <__cxa_guard_acquire>:
 800a108:	6803      	ldr	r3, [r0, #0]
 800a10a:	07db      	lsls	r3, r3, #31
 800a10c:	d406      	bmi.n	800a11c <__cxa_guard_acquire+0x14>
 800a10e:	7843      	ldrb	r3, [r0, #1]
 800a110:	b103      	cbz	r3, 800a114 <__cxa_guard_acquire+0xc>
 800a112:	deff      	udf	#255	; 0xff
 800a114:	2301      	movs	r3, #1
 800a116:	7043      	strb	r3, [r0, #1]
 800a118:	4618      	mov	r0, r3
 800a11a:	4770      	bx	lr
 800a11c:	2000      	movs	r0, #0
 800a11e:	4770      	bx	lr

0800a120 <__cxa_guard_release>:
 800a120:	2301      	movs	r3, #1
 800a122:	6003      	str	r3, [r0, #0]
 800a124:	4770      	bx	lr

0800a126 <_Znwj>:
 800a126:	2801      	cmp	r0, #1
 800a128:	bf38      	it	cc
 800a12a:	2001      	movcc	r0, #1
 800a12c:	b510      	push	{r4, lr}
 800a12e:	4604      	mov	r4, r0
 800a130:	4620      	mov	r0, r4
 800a132:	f000 f89d 	bl	800a270 <malloc>
 800a136:	b930      	cbnz	r0, 800a146 <_Znwj+0x20>
 800a138:	f000 f830 	bl	800a19c <_ZSt15get_new_handlerv>
 800a13c:	b908      	cbnz	r0, 800a142 <_Znwj+0x1c>
 800a13e:	f000 f835 	bl	800a1ac <abort>
 800a142:	4780      	blx	r0
 800a144:	e7f4      	b.n	800a130 <_Znwj+0xa>
 800a146:	bd10      	pop	{r4, pc}

0800a148 <__cxa_pure_virtual>:
 800a148:	b508      	push	{r3, lr}
 800a14a:	f000 f821 	bl	800a190 <_ZSt9terminatev>

0800a14e <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>:
 800a14e:	684b      	ldr	r3, [r1, #4]
 800a150:	6043      	str	r3, [r0, #4]
 800a152:	684b      	ldr	r3, [r1, #4]
 800a154:	6001      	str	r1, [r0, #0]
 800a156:	6018      	str	r0, [r3, #0]
 800a158:	6048      	str	r0, [r1, #4]
 800a15a:	4770      	bx	lr

0800a15c <_ZNSt8__detail15_List_node_base9_M_unhookEv>:
 800a15c:	e9d0 3200 	ldrd	r3, r2, [r0]
 800a160:	6013      	str	r3, [r2, #0]
 800a162:	605a      	str	r2, [r3, #4]
 800a164:	4770      	bx	lr

0800a166 <_ZSt17__throw_bad_allocv>:
 800a166:	b508      	push	{r3, lr}
 800a168:	f000 f820 	bl	800a1ac <abort>

0800a16c <_ZSt20__throw_length_errorPKc>:
 800a16c:	b508      	push	{r3, lr}
 800a16e:	f000 f81d 	bl	800a1ac <abort>

0800a172 <_ZdlPv>:
 800a172:	f000 b885 	b.w	800a280 <free>

0800a176 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800a176:	b508      	push	{r3, lr}
 800a178:	4780      	blx	r0
 800a17a:	f000 f817 	bl	800a1ac <abort>
	...

0800a180 <_ZSt13get_terminatev>:
 800a180:	4b02      	ldr	r3, [pc, #8]	; (800a18c <_ZSt13get_terminatev+0xc>)
 800a182:	6818      	ldr	r0, [r3, #0]
 800a184:	f3bf 8f5b 	dmb	ish
 800a188:	4770      	bx	lr
 800a18a:	bf00      	nop
 800a18c:	20000040 	.word	0x20000040

0800a190 <_ZSt9terminatev>:
 800a190:	b508      	push	{r3, lr}
 800a192:	f7ff fff5 	bl	800a180 <_ZSt13get_terminatev>
 800a196:	f7ff ffee 	bl	800a176 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800a19c <_ZSt15get_new_handlerv>:
 800a19c:	4b02      	ldr	r3, [pc, #8]	; (800a1a8 <_ZSt15get_new_handlerv+0xc>)
 800a19e:	6818      	ldr	r0, [r3, #0]
 800a1a0:	f3bf 8f5b 	dmb	ish
 800a1a4:	4770      	bx	lr
 800a1a6:	bf00      	nop
 800a1a8:	20001380 	.word	0x20001380

0800a1ac <abort>:
 800a1ac:	b508      	push	{r3, lr}
 800a1ae:	2006      	movs	r0, #6
 800a1b0:	f000 fc96 	bl	800aae0 <raise>
 800a1b4:	2001      	movs	r0, #1
 800a1b6:	f001 f8f7 	bl	800b3a8 <_exit>
	...

0800a1bc <__assert_func>:
 800a1bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a1be:	4614      	mov	r4, r2
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	4b09      	ldr	r3, [pc, #36]	; (800a1e8 <__assert_func+0x2c>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4605      	mov	r5, r0
 800a1c8:	68d8      	ldr	r0, [r3, #12]
 800a1ca:	b14c      	cbz	r4, 800a1e0 <__assert_func+0x24>
 800a1cc:	4b07      	ldr	r3, [pc, #28]	; (800a1ec <__assert_func+0x30>)
 800a1ce:	9100      	str	r1, [sp, #0]
 800a1d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a1d4:	4906      	ldr	r1, [pc, #24]	; (800a1f0 <__assert_func+0x34>)
 800a1d6:	462b      	mov	r3, r5
 800a1d8:	f000 f814 	bl	800a204 <fiprintf>
 800a1dc:	f7ff ffe6 	bl	800a1ac <abort>
 800a1e0:	4b04      	ldr	r3, [pc, #16]	; (800a1f4 <__assert_func+0x38>)
 800a1e2:	461c      	mov	r4, r3
 800a1e4:	e7f3      	b.n	800a1ce <__assert_func+0x12>
 800a1e6:	bf00      	nop
 800a1e8:	20000044 	.word	0x20000044
 800a1ec:	0800d904 	.word	0x0800d904
 800a1f0:	0800d911 	.word	0x0800d911
 800a1f4:	0800d93f 	.word	0x0800d93f

0800a1f8 <atexit>:
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	4601      	mov	r1, r0
 800a1fc:	461a      	mov	r2, r3
 800a1fe:	4618      	mov	r0, r3
 800a200:	f000 bd4a 	b.w	800ac98 <__register_exitproc>

0800a204 <fiprintf>:
 800a204:	b40e      	push	{r1, r2, r3}
 800a206:	b503      	push	{r0, r1, lr}
 800a208:	4601      	mov	r1, r0
 800a20a:	ab03      	add	r3, sp, #12
 800a20c:	4805      	ldr	r0, [pc, #20]	; (800a224 <fiprintf+0x20>)
 800a20e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a212:	6800      	ldr	r0, [r0, #0]
 800a214:	9301      	str	r3, [sp, #4]
 800a216:	f000 f967 	bl	800a4e8 <_vfiprintf_r>
 800a21a:	b002      	add	sp, #8
 800a21c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a220:	b003      	add	sp, #12
 800a222:	4770      	bx	lr
 800a224:	20000044 	.word	0x20000044

0800a228 <__libc_init_array>:
 800a228:	b570      	push	{r4, r5, r6, lr}
 800a22a:	4d0d      	ldr	r5, [pc, #52]	; (800a260 <__libc_init_array+0x38>)
 800a22c:	4c0d      	ldr	r4, [pc, #52]	; (800a264 <__libc_init_array+0x3c>)
 800a22e:	1b64      	subs	r4, r4, r5
 800a230:	10a4      	asrs	r4, r4, #2
 800a232:	2600      	movs	r6, #0
 800a234:	42a6      	cmp	r6, r4
 800a236:	d109      	bne.n	800a24c <__libc_init_array+0x24>
 800a238:	4d0b      	ldr	r5, [pc, #44]	; (800a268 <__libc_init_array+0x40>)
 800a23a:	4c0c      	ldr	r4, [pc, #48]	; (800a26c <__libc_init_array+0x44>)
 800a23c:	f001 f8b6 	bl	800b3ac <_init>
 800a240:	1b64      	subs	r4, r4, r5
 800a242:	10a4      	asrs	r4, r4, #2
 800a244:	2600      	movs	r6, #0
 800a246:	42a6      	cmp	r6, r4
 800a248:	d105      	bne.n	800a256 <__libc_init_array+0x2e>
 800a24a:	bd70      	pop	{r4, r5, r6, pc}
 800a24c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a250:	4798      	blx	r3
 800a252:	3601      	adds	r6, #1
 800a254:	e7ee      	b.n	800a234 <__libc_init_array+0xc>
 800a256:	f855 3b04 	ldr.w	r3, [r5], #4
 800a25a:	4798      	blx	r3
 800a25c:	3601      	adds	r6, #1
 800a25e:	e7f2      	b.n	800a246 <__libc_init_array+0x1e>
 800a260:	0800e564 	.word	0x0800e564
 800a264:	0800e564 	.word	0x0800e564
 800a268:	0800e564 	.word	0x0800e564
 800a26c:	0800e580 	.word	0x0800e580

0800a270 <malloc>:
 800a270:	4b02      	ldr	r3, [pc, #8]	; (800a27c <malloc+0xc>)
 800a272:	4601      	mov	r1, r0
 800a274:	6818      	ldr	r0, [r3, #0]
 800a276:	f000 b899 	b.w	800a3ac <_malloc_r>
 800a27a:	bf00      	nop
 800a27c:	20000044 	.word	0x20000044

0800a280 <free>:
 800a280:	4b02      	ldr	r3, [pc, #8]	; (800a28c <free+0xc>)
 800a282:	4601      	mov	r1, r0
 800a284:	6818      	ldr	r0, [r3, #0]
 800a286:	f000 b825 	b.w	800a2d4 <_free_r>
 800a28a:	bf00      	nop
 800a28c:	20000044 	.word	0x20000044

0800a290 <memmove>:
 800a290:	4288      	cmp	r0, r1
 800a292:	b510      	push	{r4, lr}
 800a294:	eb01 0402 	add.w	r4, r1, r2
 800a298:	d902      	bls.n	800a2a0 <memmove+0x10>
 800a29a:	4284      	cmp	r4, r0
 800a29c:	4623      	mov	r3, r4
 800a29e:	d807      	bhi.n	800a2b0 <memmove+0x20>
 800a2a0:	1e43      	subs	r3, r0, #1
 800a2a2:	42a1      	cmp	r1, r4
 800a2a4:	d008      	beq.n	800a2b8 <memmove+0x28>
 800a2a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a2ae:	e7f8      	b.n	800a2a2 <memmove+0x12>
 800a2b0:	4402      	add	r2, r0
 800a2b2:	4601      	mov	r1, r0
 800a2b4:	428a      	cmp	r2, r1
 800a2b6:	d100      	bne.n	800a2ba <memmove+0x2a>
 800a2b8:	bd10      	pop	{r4, pc}
 800a2ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a2c2:	e7f7      	b.n	800a2b4 <memmove+0x24>

0800a2c4 <memset>:
 800a2c4:	4402      	add	r2, r0
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d100      	bne.n	800a2ce <memset+0xa>
 800a2cc:	4770      	bx	lr
 800a2ce:	f803 1b01 	strb.w	r1, [r3], #1
 800a2d2:	e7f9      	b.n	800a2c8 <memset+0x4>

0800a2d4 <_free_r>:
 800a2d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2d6:	2900      	cmp	r1, #0
 800a2d8:	d044      	beq.n	800a364 <_free_r+0x90>
 800a2da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2de:	9001      	str	r0, [sp, #4]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	f1a1 0404 	sub.w	r4, r1, #4
 800a2e6:	bfb8      	it	lt
 800a2e8:	18e4      	addlt	r4, r4, r3
 800a2ea:	f000 ff57 	bl	800b19c <__malloc_lock>
 800a2ee:	4a1e      	ldr	r2, [pc, #120]	; (800a368 <_free_r+0x94>)
 800a2f0:	9801      	ldr	r0, [sp, #4]
 800a2f2:	6813      	ldr	r3, [r2, #0]
 800a2f4:	b933      	cbnz	r3, 800a304 <_free_r+0x30>
 800a2f6:	6063      	str	r3, [r4, #4]
 800a2f8:	6014      	str	r4, [r2, #0]
 800a2fa:	b003      	add	sp, #12
 800a2fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a300:	f000 bf52 	b.w	800b1a8 <__malloc_unlock>
 800a304:	42a3      	cmp	r3, r4
 800a306:	d908      	bls.n	800a31a <_free_r+0x46>
 800a308:	6825      	ldr	r5, [r4, #0]
 800a30a:	1961      	adds	r1, r4, r5
 800a30c:	428b      	cmp	r3, r1
 800a30e:	bf01      	itttt	eq
 800a310:	6819      	ldreq	r1, [r3, #0]
 800a312:	685b      	ldreq	r3, [r3, #4]
 800a314:	1949      	addeq	r1, r1, r5
 800a316:	6021      	streq	r1, [r4, #0]
 800a318:	e7ed      	b.n	800a2f6 <_free_r+0x22>
 800a31a:	461a      	mov	r2, r3
 800a31c:	685b      	ldr	r3, [r3, #4]
 800a31e:	b10b      	cbz	r3, 800a324 <_free_r+0x50>
 800a320:	42a3      	cmp	r3, r4
 800a322:	d9fa      	bls.n	800a31a <_free_r+0x46>
 800a324:	6811      	ldr	r1, [r2, #0]
 800a326:	1855      	adds	r5, r2, r1
 800a328:	42a5      	cmp	r5, r4
 800a32a:	d10b      	bne.n	800a344 <_free_r+0x70>
 800a32c:	6824      	ldr	r4, [r4, #0]
 800a32e:	4421      	add	r1, r4
 800a330:	1854      	adds	r4, r2, r1
 800a332:	42a3      	cmp	r3, r4
 800a334:	6011      	str	r1, [r2, #0]
 800a336:	d1e0      	bne.n	800a2fa <_free_r+0x26>
 800a338:	681c      	ldr	r4, [r3, #0]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	6053      	str	r3, [r2, #4]
 800a33e:	4421      	add	r1, r4
 800a340:	6011      	str	r1, [r2, #0]
 800a342:	e7da      	b.n	800a2fa <_free_r+0x26>
 800a344:	d902      	bls.n	800a34c <_free_r+0x78>
 800a346:	230c      	movs	r3, #12
 800a348:	6003      	str	r3, [r0, #0]
 800a34a:	e7d6      	b.n	800a2fa <_free_r+0x26>
 800a34c:	6825      	ldr	r5, [r4, #0]
 800a34e:	1961      	adds	r1, r4, r5
 800a350:	428b      	cmp	r3, r1
 800a352:	bf04      	itt	eq
 800a354:	6819      	ldreq	r1, [r3, #0]
 800a356:	685b      	ldreq	r3, [r3, #4]
 800a358:	6063      	str	r3, [r4, #4]
 800a35a:	bf04      	itt	eq
 800a35c:	1949      	addeq	r1, r1, r5
 800a35e:	6021      	streq	r1, [r4, #0]
 800a360:	6054      	str	r4, [r2, #4]
 800a362:	e7ca      	b.n	800a2fa <_free_r+0x26>
 800a364:	b003      	add	sp, #12
 800a366:	bd30      	pop	{r4, r5, pc}
 800a368:	20001384 	.word	0x20001384

0800a36c <sbrk_aligned>:
 800a36c:	b570      	push	{r4, r5, r6, lr}
 800a36e:	4e0e      	ldr	r6, [pc, #56]	; (800a3a8 <sbrk_aligned+0x3c>)
 800a370:	460c      	mov	r4, r1
 800a372:	6831      	ldr	r1, [r6, #0]
 800a374:	4605      	mov	r5, r0
 800a376:	b911      	cbnz	r1, 800a37e <sbrk_aligned+0x12>
 800a378:	f000 fb7a 	bl	800aa70 <_sbrk_r>
 800a37c:	6030      	str	r0, [r6, #0]
 800a37e:	4621      	mov	r1, r4
 800a380:	4628      	mov	r0, r5
 800a382:	f000 fb75 	bl	800aa70 <_sbrk_r>
 800a386:	1c43      	adds	r3, r0, #1
 800a388:	d00a      	beq.n	800a3a0 <sbrk_aligned+0x34>
 800a38a:	1cc4      	adds	r4, r0, #3
 800a38c:	f024 0403 	bic.w	r4, r4, #3
 800a390:	42a0      	cmp	r0, r4
 800a392:	d007      	beq.n	800a3a4 <sbrk_aligned+0x38>
 800a394:	1a21      	subs	r1, r4, r0
 800a396:	4628      	mov	r0, r5
 800a398:	f000 fb6a 	bl	800aa70 <_sbrk_r>
 800a39c:	3001      	adds	r0, #1
 800a39e:	d101      	bne.n	800a3a4 <sbrk_aligned+0x38>
 800a3a0:	f04f 34ff 	mov.w	r4, #4294967295
 800a3a4:	4620      	mov	r0, r4
 800a3a6:	bd70      	pop	{r4, r5, r6, pc}
 800a3a8:	20001388 	.word	0x20001388

0800a3ac <_malloc_r>:
 800a3ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3b0:	1ccd      	adds	r5, r1, #3
 800a3b2:	f025 0503 	bic.w	r5, r5, #3
 800a3b6:	3508      	adds	r5, #8
 800a3b8:	2d0c      	cmp	r5, #12
 800a3ba:	bf38      	it	cc
 800a3bc:	250c      	movcc	r5, #12
 800a3be:	2d00      	cmp	r5, #0
 800a3c0:	4607      	mov	r7, r0
 800a3c2:	db01      	blt.n	800a3c8 <_malloc_r+0x1c>
 800a3c4:	42a9      	cmp	r1, r5
 800a3c6:	d905      	bls.n	800a3d4 <_malloc_r+0x28>
 800a3c8:	230c      	movs	r3, #12
 800a3ca:	603b      	str	r3, [r7, #0]
 800a3cc:	2600      	movs	r6, #0
 800a3ce:	4630      	mov	r0, r6
 800a3d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3d4:	4e2e      	ldr	r6, [pc, #184]	; (800a490 <_malloc_r+0xe4>)
 800a3d6:	f000 fee1 	bl	800b19c <__malloc_lock>
 800a3da:	6833      	ldr	r3, [r6, #0]
 800a3dc:	461c      	mov	r4, r3
 800a3de:	bb34      	cbnz	r4, 800a42e <_malloc_r+0x82>
 800a3e0:	4629      	mov	r1, r5
 800a3e2:	4638      	mov	r0, r7
 800a3e4:	f7ff ffc2 	bl	800a36c <sbrk_aligned>
 800a3e8:	1c43      	adds	r3, r0, #1
 800a3ea:	4604      	mov	r4, r0
 800a3ec:	d14d      	bne.n	800a48a <_malloc_r+0xde>
 800a3ee:	6834      	ldr	r4, [r6, #0]
 800a3f0:	4626      	mov	r6, r4
 800a3f2:	2e00      	cmp	r6, #0
 800a3f4:	d140      	bne.n	800a478 <_malloc_r+0xcc>
 800a3f6:	6823      	ldr	r3, [r4, #0]
 800a3f8:	4631      	mov	r1, r6
 800a3fa:	4638      	mov	r0, r7
 800a3fc:	eb04 0803 	add.w	r8, r4, r3
 800a400:	f000 fb36 	bl	800aa70 <_sbrk_r>
 800a404:	4580      	cmp	r8, r0
 800a406:	d13a      	bne.n	800a47e <_malloc_r+0xd2>
 800a408:	6821      	ldr	r1, [r4, #0]
 800a40a:	3503      	adds	r5, #3
 800a40c:	1a6d      	subs	r5, r5, r1
 800a40e:	f025 0503 	bic.w	r5, r5, #3
 800a412:	3508      	adds	r5, #8
 800a414:	2d0c      	cmp	r5, #12
 800a416:	bf38      	it	cc
 800a418:	250c      	movcc	r5, #12
 800a41a:	4629      	mov	r1, r5
 800a41c:	4638      	mov	r0, r7
 800a41e:	f7ff ffa5 	bl	800a36c <sbrk_aligned>
 800a422:	3001      	adds	r0, #1
 800a424:	d02b      	beq.n	800a47e <_malloc_r+0xd2>
 800a426:	6823      	ldr	r3, [r4, #0]
 800a428:	442b      	add	r3, r5
 800a42a:	6023      	str	r3, [r4, #0]
 800a42c:	e00e      	b.n	800a44c <_malloc_r+0xa0>
 800a42e:	6822      	ldr	r2, [r4, #0]
 800a430:	1b52      	subs	r2, r2, r5
 800a432:	d41e      	bmi.n	800a472 <_malloc_r+0xc6>
 800a434:	2a0b      	cmp	r2, #11
 800a436:	d916      	bls.n	800a466 <_malloc_r+0xba>
 800a438:	1961      	adds	r1, r4, r5
 800a43a:	42a3      	cmp	r3, r4
 800a43c:	6025      	str	r5, [r4, #0]
 800a43e:	bf18      	it	ne
 800a440:	6059      	strne	r1, [r3, #4]
 800a442:	6863      	ldr	r3, [r4, #4]
 800a444:	bf08      	it	eq
 800a446:	6031      	streq	r1, [r6, #0]
 800a448:	5162      	str	r2, [r4, r5]
 800a44a:	604b      	str	r3, [r1, #4]
 800a44c:	4638      	mov	r0, r7
 800a44e:	f104 060b 	add.w	r6, r4, #11
 800a452:	f000 fea9 	bl	800b1a8 <__malloc_unlock>
 800a456:	f026 0607 	bic.w	r6, r6, #7
 800a45a:	1d23      	adds	r3, r4, #4
 800a45c:	1af2      	subs	r2, r6, r3
 800a45e:	d0b6      	beq.n	800a3ce <_malloc_r+0x22>
 800a460:	1b9b      	subs	r3, r3, r6
 800a462:	50a3      	str	r3, [r4, r2]
 800a464:	e7b3      	b.n	800a3ce <_malloc_r+0x22>
 800a466:	6862      	ldr	r2, [r4, #4]
 800a468:	42a3      	cmp	r3, r4
 800a46a:	bf0c      	ite	eq
 800a46c:	6032      	streq	r2, [r6, #0]
 800a46e:	605a      	strne	r2, [r3, #4]
 800a470:	e7ec      	b.n	800a44c <_malloc_r+0xa0>
 800a472:	4623      	mov	r3, r4
 800a474:	6864      	ldr	r4, [r4, #4]
 800a476:	e7b2      	b.n	800a3de <_malloc_r+0x32>
 800a478:	4634      	mov	r4, r6
 800a47a:	6876      	ldr	r6, [r6, #4]
 800a47c:	e7b9      	b.n	800a3f2 <_malloc_r+0x46>
 800a47e:	230c      	movs	r3, #12
 800a480:	603b      	str	r3, [r7, #0]
 800a482:	4638      	mov	r0, r7
 800a484:	f000 fe90 	bl	800b1a8 <__malloc_unlock>
 800a488:	e7a1      	b.n	800a3ce <_malloc_r+0x22>
 800a48a:	6025      	str	r5, [r4, #0]
 800a48c:	e7de      	b.n	800a44c <_malloc_r+0xa0>
 800a48e:	bf00      	nop
 800a490:	20001384 	.word	0x20001384

0800a494 <__sfputc_r>:
 800a494:	6893      	ldr	r3, [r2, #8]
 800a496:	3b01      	subs	r3, #1
 800a498:	2b00      	cmp	r3, #0
 800a49a:	b410      	push	{r4}
 800a49c:	6093      	str	r3, [r2, #8]
 800a49e:	da08      	bge.n	800a4b2 <__sfputc_r+0x1e>
 800a4a0:	6994      	ldr	r4, [r2, #24]
 800a4a2:	42a3      	cmp	r3, r4
 800a4a4:	db01      	blt.n	800a4aa <__sfputc_r+0x16>
 800a4a6:	290a      	cmp	r1, #10
 800a4a8:	d103      	bne.n	800a4b2 <__sfputc_r+0x1e>
 800a4aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4ae:	f000 bb33 	b.w	800ab18 <__swbuf_r>
 800a4b2:	6813      	ldr	r3, [r2, #0]
 800a4b4:	1c58      	adds	r0, r3, #1
 800a4b6:	6010      	str	r0, [r2, #0]
 800a4b8:	7019      	strb	r1, [r3, #0]
 800a4ba:	4608      	mov	r0, r1
 800a4bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4c0:	4770      	bx	lr

0800a4c2 <__sfputs_r>:
 800a4c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4c4:	4606      	mov	r6, r0
 800a4c6:	460f      	mov	r7, r1
 800a4c8:	4614      	mov	r4, r2
 800a4ca:	18d5      	adds	r5, r2, r3
 800a4cc:	42ac      	cmp	r4, r5
 800a4ce:	d101      	bne.n	800a4d4 <__sfputs_r+0x12>
 800a4d0:	2000      	movs	r0, #0
 800a4d2:	e007      	b.n	800a4e4 <__sfputs_r+0x22>
 800a4d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4d8:	463a      	mov	r2, r7
 800a4da:	4630      	mov	r0, r6
 800a4dc:	f7ff ffda 	bl	800a494 <__sfputc_r>
 800a4e0:	1c43      	adds	r3, r0, #1
 800a4e2:	d1f3      	bne.n	800a4cc <__sfputs_r+0xa>
 800a4e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a4e8 <_vfiprintf_r>:
 800a4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4ec:	460d      	mov	r5, r1
 800a4ee:	b09d      	sub	sp, #116	; 0x74
 800a4f0:	4614      	mov	r4, r2
 800a4f2:	4698      	mov	r8, r3
 800a4f4:	4606      	mov	r6, r0
 800a4f6:	b118      	cbz	r0, 800a500 <_vfiprintf_r+0x18>
 800a4f8:	6983      	ldr	r3, [r0, #24]
 800a4fa:	b90b      	cbnz	r3, 800a500 <_vfiprintf_r+0x18>
 800a4fc:	f000 fd48 	bl	800af90 <__sinit>
 800a500:	4b89      	ldr	r3, [pc, #548]	; (800a728 <_vfiprintf_r+0x240>)
 800a502:	429d      	cmp	r5, r3
 800a504:	d11b      	bne.n	800a53e <_vfiprintf_r+0x56>
 800a506:	6875      	ldr	r5, [r6, #4]
 800a508:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a50a:	07d9      	lsls	r1, r3, #31
 800a50c:	d405      	bmi.n	800a51a <_vfiprintf_r+0x32>
 800a50e:	89ab      	ldrh	r3, [r5, #12]
 800a510:	059a      	lsls	r2, r3, #22
 800a512:	d402      	bmi.n	800a51a <_vfiprintf_r+0x32>
 800a514:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a516:	f000 fdd9 	bl	800b0cc <__retarget_lock_acquire_recursive>
 800a51a:	89ab      	ldrh	r3, [r5, #12]
 800a51c:	071b      	lsls	r3, r3, #28
 800a51e:	d501      	bpl.n	800a524 <_vfiprintf_r+0x3c>
 800a520:	692b      	ldr	r3, [r5, #16]
 800a522:	b9eb      	cbnz	r3, 800a560 <_vfiprintf_r+0x78>
 800a524:	4629      	mov	r1, r5
 800a526:	4630      	mov	r0, r6
 800a528:	f000 fb48 	bl	800abbc <__swsetup_r>
 800a52c:	b1c0      	cbz	r0, 800a560 <_vfiprintf_r+0x78>
 800a52e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a530:	07dc      	lsls	r4, r3, #31
 800a532:	d50e      	bpl.n	800a552 <_vfiprintf_r+0x6a>
 800a534:	f04f 30ff 	mov.w	r0, #4294967295
 800a538:	b01d      	add	sp, #116	; 0x74
 800a53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a53e:	4b7b      	ldr	r3, [pc, #492]	; (800a72c <_vfiprintf_r+0x244>)
 800a540:	429d      	cmp	r5, r3
 800a542:	d101      	bne.n	800a548 <_vfiprintf_r+0x60>
 800a544:	68b5      	ldr	r5, [r6, #8]
 800a546:	e7df      	b.n	800a508 <_vfiprintf_r+0x20>
 800a548:	4b79      	ldr	r3, [pc, #484]	; (800a730 <_vfiprintf_r+0x248>)
 800a54a:	429d      	cmp	r5, r3
 800a54c:	bf08      	it	eq
 800a54e:	68f5      	ldreq	r5, [r6, #12]
 800a550:	e7da      	b.n	800a508 <_vfiprintf_r+0x20>
 800a552:	89ab      	ldrh	r3, [r5, #12]
 800a554:	0598      	lsls	r0, r3, #22
 800a556:	d4ed      	bmi.n	800a534 <_vfiprintf_r+0x4c>
 800a558:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a55a:	f000 fdb9 	bl	800b0d0 <__retarget_lock_release_recursive>
 800a55e:	e7e9      	b.n	800a534 <_vfiprintf_r+0x4c>
 800a560:	2300      	movs	r3, #0
 800a562:	9309      	str	r3, [sp, #36]	; 0x24
 800a564:	2320      	movs	r3, #32
 800a566:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a56a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a56e:	2330      	movs	r3, #48	; 0x30
 800a570:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a734 <_vfiprintf_r+0x24c>
 800a574:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a578:	f04f 0901 	mov.w	r9, #1
 800a57c:	4623      	mov	r3, r4
 800a57e:	469a      	mov	sl, r3
 800a580:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a584:	b10a      	cbz	r2, 800a58a <_vfiprintf_r+0xa2>
 800a586:	2a25      	cmp	r2, #37	; 0x25
 800a588:	d1f9      	bne.n	800a57e <_vfiprintf_r+0x96>
 800a58a:	ebba 0b04 	subs.w	fp, sl, r4
 800a58e:	d00b      	beq.n	800a5a8 <_vfiprintf_r+0xc0>
 800a590:	465b      	mov	r3, fp
 800a592:	4622      	mov	r2, r4
 800a594:	4629      	mov	r1, r5
 800a596:	4630      	mov	r0, r6
 800a598:	f7ff ff93 	bl	800a4c2 <__sfputs_r>
 800a59c:	3001      	adds	r0, #1
 800a59e:	f000 80aa 	beq.w	800a6f6 <_vfiprintf_r+0x20e>
 800a5a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5a4:	445a      	add	r2, fp
 800a5a6:	9209      	str	r2, [sp, #36]	; 0x24
 800a5a8:	f89a 3000 	ldrb.w	r3, [sl]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	f000 80a2 	beq.w	800a6f6 <_vfiprintf_r+0x20e>
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	f04f 32ff 	mov.w	r2, #4294967295
 800a5b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5bc:	f10a 0a01 	add.w	sl, sl, #1
 800a5c0:	9304      	str	r3, [sp, #16]
 800a5c2:	9307      	str	r3, [sp, #28]
 800a5c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a5c8:	931a      	str	r3, [sp, #104]	; 0x68
 800a5ca:	4654      	mov	r4, sl
 800a5cc:	2205      	movs	r2, #5
 800a5ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5d2:	4858      	ldr	r0, [pc, #352]	; (800a734 <_vfiprintf_r+0x24c>)
 800a5d4:	f7f5 fe1c 	bl	8000210 <memchr>
 800a5d8:	9a04      	ldr	r2, [sp, #16]
 800a5da:	b9d8      	cbnz	r0, 800a614 <_vfiprintf_r+0x12c>
 800a5dc:	06d1      	lsls	r1, r2, #27
 800a5de:	bf44      	itt	mi
 800a5e0:	2320      	movmi	r3, #32
 800a5e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5e6:	0713      	lsls	r3, r2, #28
 800a5e8:	bf44      	itt	mi
 800a5ea:	232b      	movmi	r3, #43	; 0x2b
 800a5ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5f0:	f89a 3000 	ldrb.w	r3, [sl]
 800a5f4:	2b2a      	cmp	r3, #42	; 0x2a
 800a5f6:	d015      	beq.n	800a624 <_vfiprintf_r+0x13c>
 800a5f8:	9a07      	ldr	r2, [sp, #28]
 800a5fa:	4654      	mov	r4, sl
 800a5fc:	2000      	movs	r0, #0
 800a5fe:	f04f 0c0a 	mov.w	ip, #10
 800a602:	4621      	mov	r1, r4
 800a604:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a608:	3b30      	subs	r3, #48	; 0x30
 800a60a:	2b09      	cmp	r3, #9
 800a60c:	d94e      	bls.n	800a6ac <_vfiprintf_r+0x1c4>
 800a60e:	b1b0      	cbz	r0, 800a63e <_vfiprintf_r+0x156>
 800a610:	9207      	str	r2, [sp, #28]
 800a612:	e014      	b.n	800a63e <_vfiprintf_r+0x156>
 800a614:	eba0 0308 	sub.w	r3, r0, r8
 800a618:	fa09 f303 	lsl.w	r3, r9, r3
 800a61c:	4313      	orrs	r3, r2
 800a61e:	9304      	str	r3, [sp, #16]
 800a620:	46a2      	mov	sl, r4
 800a622:	e7d2      	b.n	800a5ca <_vfiprintf_r+0xe2>
 800a624:	9b03      	ldr	r3, [sp, #12]
 800a626:	1d19      	adds	r1, r3, #4
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	9103      	str	r1, [sp, #12]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	bfbb      	ittet	lt
 800a630:	425b      	neglt	r3, r3
 800a632:	f042 0202 	orrlt.w	r2, r2, #2
 800a636:	9307      	strge	r3, [sp, #28]
 800a638:	9307      	strlt	r3, [sp, #28]
 800a63a:	bfb8      	it	lt
 800a63c:	9204      	strlt	r2, [sp, #16]
 800a63e:	7823      	ldrb	r3, [r4, #0]
 800a640:	2b2e      	cmp	r3, #46	; 0x2e
 800a642:	d10c      	bne.n	800a65e <_vfiprintf_r+0x176>
 800a644:	7863      	ldrb	r3, [r4, #1]
 800a646:	2b2a      	cmp	r3, #42	; 0x2a
 800a648:	d135      	bne.n	800a6b6 <_vfiprintf_r+0x1ce>
 800a64a:	9b03      	ldr	r3, [sp, #12]
 800a64c:	1d1a      	adds	r2, r3, #4
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	9203      	str	r2, [sp, #12]
 800a652:	2b00      	cmp	r3, #0
 800a654:	bfb8      	it	lt
 800a656:	f04f 33ff 	movlt.w	r3, #4294967295
 800a65a:	3402      	adds	r4, #2
 800a65c:	9305      	str	r3, [sp, #20]
 800a65e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a744 <_vfiprintf_r+0x25c>
 800a662:	7821      	ldrb	r1, [r4, #0]
 800a664:	2203      	movs	r2, #3
 800a666:	4650      	mov	r0, sl
 800a668:	f7f5 fdd2 	bl	8000210 <memchr>
 800a66c:	b140      	cbz	r0, 800a680 <_vfiprintf_r+0x198>
 800a66e:	2340      	movs	r3, #64	; 0x40
 800a670:	eba0 000a 	sub.w	r0, r0, sl
 800a674:	fa03 f000 	lsl.w	r0, r3, r0
 800a678:	9b04      	ldr	r3, [sp, #16]
 800a67a:	4303      	orrs	r3, r0
 800a67c:	3401      	adds	r4, #1
 800a67e:	9304      	str	r3, [sp, #16]
 800a680:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a684:	482c      	ldr	r0, [pc, #176]	; (800a738 <_vfiprintf_r+0x250>)
 800a686:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a68a:	2206      	movs	r2, #6
 800a68c:	f7f5 fdc0 	bl	8000210 <memchr>
 800a690:	2800      	cmp	r0, #0
 800a692:	d03f      	beq.n	800a714 <_vfiprintf_r+0x22c>
 800a694:	4b29      	ldr	r3, [pc, #164]	; (800a73c <_vfiprintf_r+0x254>)
 800a696:	bb1b      	cbnz	r3, 800a6e0 <_vfiprintf_r+0x1f8>
 800a698:	9b03      	ldr	r3, [sp, #12]
 800a69a:	3307      	adds	r3, #7
 800a69c:	f023 0307 	bic.w	r3, r3, #7
 800a6a0:	3308      	adds	r3, #8
 800a6a2:	9303      	str	r3, [sp, #12]
 800a6a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6a6:	443b      	add	r3, r7
 800a6a8:	9309      	str	r3, [sp, #36]	; 0x24
 800a6aa:	e767      	b.n	800a57c <_vfiprintf_r+0x94>
 800a6ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6b0:	460c      	mov	r4, r1
 800a6b2:	2001      	movs	r0, #1
 800a6b4:	e7a5      	b.n	800a602 <_vfiprintf_r+0x11a>
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	3401      	adds	r4, #1
 800a6ba:	9305      	str	r3, [sp, #20]
 800a6bc:	4619      	mov	r1, r3
 800a6be:	f04f 0c0a 	mov.w	ip, #10
 800a6c2:	4620      	mov	r0, r4
 800a6c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6c8:	3a30      	subs	r2, #48	; 0x30
 800a6ca:	2a09      	cmp	r2, #9
 800a6cc:	d903      	bls.n	800a6d6 <_vfiprintf_r+0x1ee>
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d0c5      	beq.n	800a65e <_vfiprintf_r+0x176>
 800a6d2:	9105      	str	r1, [sp, #20]
 800a6d4:	e7c3      	b.n	800a65e <_vfiprintf_r+0x176>
 800a6d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6da:	4604      	mov	r4, r0
 800a6dc:	2301      	movs	r3, #1
 800a6de:	e7f0      	b.n	800a6c2 <_vfiprintf_r+0x1da>
 800a6e0:	ab03      	add	r3, sp, #12
 800a6e2:	9300      	str	r3, [sp, #0]
 800a6e4:	462a      	mov	r2, r5
 800a6e6:	4b16      	ldr	r3, [pc, #88]	; (800a740 <_vfiprintf_r+0x258>)
 800a6e8:	a904      	add	r1, sp, #16
 800a6ea:	4630      	mov	r0, r6
 800a6ec:	f3af 8000 	nop.w
 800a6f0:	4607      	mov	r7, r0
 800a6f2:	1c78      	adds	r0, r7, #1
 800a6f4:	d1d6      	bne.n	800a6a4 <_vfiprintf_r+0x1bc>
 800a6f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6f8:	07d9      	lsls	r1, r3, #31
 800a6fa:	d405      	bmi.n	800a708 <_vfiprintf_r+0x220>
 800a6fc:	89ab      	ldrh	r3, [r5, #12]
 800a6fe:	059a      	lsls	r2, r3, #22
 800a700:	d402      	bmi.n	800a708 <_vfiprintf_r+0x220>
 800a702:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a704:	f000 fce4 	bl	800b0d0 <__retarget_lock_release_recursive>
 800a708:	89ab      	ldrh	r3, [r5, #12]
 800a70a:	065b      	lsls	r3, r3, #25
 800a70c:	f53f af12 	bmi.w	800a534 <_vfiprintf_r+0x4c>
 800a710:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a712:	e711      	b.n	800a538 <_vfiprintf_r+0x50>
 800a714:	ab03      	add	r3, sp, #12
 800a716:	9300      	str	r3, [sp, #0]
 800a718:	462a      	mov	r2, r5
 800a71a:	4b09      	ldr	r3, [pc, #36]	; (800a740 <_vfiprintf_r+0x258>)
 800a71c:	a904      	add	r1, sp, #16
 800a71e:	4630      	mov	r0, r6
 800a720:	f000 f880 	bl	800a824 <_printf_i>
 800a724:	e7e4      	b.n	800a6f0 <_vfiprintf_r+0x208>
 800a726:	bf00      	nop
 800a728:	0800d99c 	.word	0x0800d99c
 800a72c:	0800d9bc 	.word	0x0800d9bc
 800a730:	0800d97c 	.word	0x0800d97c
 800a734:	0800d944 	.word	0x0800d944
 800a738:	0800d94e 	.word	0x0800d94e
 800a73c:	00000000 	.word	0x00000000
 800a740:	0800a4c3 	.word	0x0800a4c3
 800a744:	0800d94a 	.word	0x0800d94a

0800a748 <_printf_common>:
 800a748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a74c:	4616      	mov	r6, r2
 800a74e:	4699      	mov	r9, r3
 800a750:	688a      	ldr	r2, [r1, #8]
 800a752:	690b      	ldr	r3, [r1, #16]
 800a754:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a758:	4293      	cmp	r3, r2
 800a75a:	bfb8      	it	lt
 800a75c:	4613      	movlt	r3, r2
 800a75e:	6033      	str	r3, [r6, #0]
 800a760:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a764:	4607      	mov	r7, r0
 800a766:	460c      	mov	r4, r1
 800a768:	b10a      	cbz	r2, 800a76e <_printf_common+0x26>
 800a76a:	3301      	adds	r3, #1
 800a76c:	6033      	str	r3, [r6, #0]
 800a76e:	6823      	ldr	r3, [r4, #0]
 800a770:	0699      	lsls	r1, r3, #26
 800a772:	bf42      	ittt	mi
 800a774:	6833      	ldrmi	r3, [r6, #0]
 800a776:	3302      	addmi	r3, #2
 800a778:	6033      	strmi	r3, [r6, #0]
 800a77a:	6825      	ldr	r5, [r4, #0]
 800a77c:	f015 0506 	ands.w	r5, r5, #6
 800a780:	d106      	bne.n	800a790 <_printf_common+0x48>
 800a782:	f104 0a19 	add.w	sl, r4, #25
 800a786:	68e3      	ldr	r3, [r4, #12]
 800a788:	6832      	ldr	r2, [r6, #0]
 800a78a:	1a9b      	subs	r3, r3, r2
 800a78c:	42ab      	cmp	r3, r5
 800a78e:	dc26      	bgt.n	800a7de <_printf_common+0x96>
 800a790:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a794:	1e13      	subs	r3, r2, #0
 800a796:	6822      	ldr	r2, [r4, #0]
 800a798:	bf18      	it	ne
 800a79a:	2301      	movne	r3, #1
 800a79c:	0692      	lsls	r2, r2, #26
 800a79e:	d42b      	bmi.n	800a7f8 <_printf_common+0xb0>
 800a7a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a7a4:	4649      	mov	r1, r9
 800a7a6:	4638      	mov	r0, r7
 800a7a8:	47c0      	blx	r8
 800a7aa:	3001      	adds	r0, #1
 800a7ac:	d01e      	beq.n	800a7ec <_printf_common+0xa4>
 800a7ae:	6823      	ldr	r3, [r4, #0]
 800a7b0:	68e5      	ldr	r5, [r4, #12]
 800a7b2:	6832      	ldr	r2, [r6, #0]
 800a7b4:	f003 0306 	and.w	r3, r3, #6
 800a7b8:	2b04      	cmp	r3, #4
 800a7ba:	bf08      	it	eq
 800a7bc:	1aad      	subeq	r5, r5, r2
 800a7be:	68a3      	ldr	r3, [r4, #8]
 800a7c0:	6922      	ldr	r2, [r4, #16]
 800a7c2:	bf0c      	ite	eq
 800a7c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a7c8:	2500      	movne	r5, #0
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	bfc4      	itt	gt
 800a7ce:	1a9b      	subgt	r3, r3, r2
 800a7d0:	18ed      	addgt	r5, r5, r3
 800a7d2:	2600      	movs	r6, #0
 800a7d4:	341a      	adds	r4, #26
 800a7d6:	42b5      	cmp	r5, r6
 800a7d8:	d11a      	bne.n	800a810 <_printf_common+0xc8>
 800a7da:	2000      	movs	r0, #0
 800a7dc:	e008      	b.n	800a7f0 <_printf_common+0xa8>
 800a7de:	2301      	movs	r3, #1
 800a7e0:	4652      	mov	r2, sl
 800a7e2:	4649      	mov	r1, r9
 800a7e4:	4638      	mov	r0, r7
 800a7e6:	47c0      	blx	r8
 800a7e8:	3001      	adds	r0, #1
 800a7ea:	d103      	bne.n	800a7f4 <_printf_common+0xac>
 800a7ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a7f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7f4:	3501      	adds	r5, #1
 800a7f6:	e7c6      	b.n	800a786 <_printf_common+0x3e>
 800a7f8:	18e1      	adds	r1, r4, r3
 800a7fa:	1c5a      	adds	r2, r3, #1
 800a7fc:	2030      	movs	r0, #48	; 0x30
 800a7fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a802:	4422      	add	r2, r4
 800a804:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a808:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a80c:	3302      	adds	r3, #2
 800a80e:	e7c7      	b.n	800a7a0 <_printf_common+0x58>
 800a810:	2301      	movs	r3, #1
 800a812:	4622      	mov	r2, r4
 800a814:	4649      	mov	r1, r9
 800a816:	4638      	mov	r0, r7
 800a818:	47c0      	blx	r8
 800a81a:	3001      	adds	r0, #1
 800a81c:	d0e6      	beq.n	800a7ec <_printf_common+0xa4>
 800a81e:	3601      	adds	r6, #1
 800a820:	e7d9      	b.n	800a7d6 <_printf_common+0x8e>
	...

0800a824 <_printf_i>:
 800a824:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a828:	7e0f      	ldrb	r7, [r1, #24]
 800a82a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a82c:	2f78      	cmp	r7, #120	; 0x78
 800a82e:	4691      	mov	r9, r2
 800a830:	4680      	mov	r8, r0
 800a832:	460c      	mov	r4, r1
 800a834:	469a      	mov	sl, r3
 800a836:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a83a:	d807      	bhi.n	800a84c <_printf_i+0x28>
 800a83c:	2f62      	cmp	r7, #98	; 0x62
 800a83e:	d80a      	bhi.n	800a856 <_printf_i+0x32>
 800a840:	2f00      	cmp	r7, #0
 800a842:	f000 80d8 	beq.w	800a9f6 <_printf_i+0x1d2>
 800a846:	2f58      	cmp	r7, #88	; 0x58
 800a848:	f000 80a3 	beq.w	800a992 <_printf_i+0x16e>
 800a84c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a850:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a854:	e03a      	b.n	800a8cc <_printf_i+0xa8>
 800a856:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a85a:	2b15      	cmp	r3, #21
 800a85c:	d8f6      	bhi.n	800a84c <_printf_i+0x28>
 800a85e:	a101      	add	r1, pc, #4	; (adr r1, 800a864 <_printf_i+0x40>)
 800a860:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a864:	0800a8bd 	.word	0x0800a8bd
 800a868:	0800a8d1 	.word	0x0800a8d1
 800a86c:	0800a84d 	.word	0x0800a84d
 800a870:	0800a84d 	.word	0x0800a84d
 800a874:	0800a84d 	.word	0x0800a84d
 800a878:	0800a84d 	.word	0x0800a84d
 800a87c:	0800a8d1 	.word	0x0800a8d1
 800a880:	0800a84d 	.word	0x0800a84d
 800a884:	0800a84d 	.word	0x0800a84d
 800a888:	0800a84d 	.word	0x0800a84d
 800a88c:	0800a84d 	.word	0x0800a84d
 800a890:	0800a9dd 	.word	0x0800a9dd
 800a894:	0800a901 	.word	0x0800a901
 800a898:	0800a9bf 	.word	0x0800a9bf
 800a89c:	0800a84d 	.word	0x0800a84d
 800a8a0:	0800a84d 	.word	0x0800a84d
 800a8a4:	0800a9ff 	.word	0x0800a9ff
 800a8a8:	0800a84d 	.word	0x0800a84d
 800a8ac:	0800a901 	.word	0x0800a901
 800a8b0:	0800a84d 	.word	0x0800a84d
 800a8b4:	0800a84d 	.word	0x0800a84d
 800a8b8:	0800a9c7 	.word	0x0800a9c7
 800a8bc:	682b      	ldr	r3, [r5, #0]
 800a8be:	1d1a      	adds	r2, r3, #4
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	602a      	str	r2, [r5, #0]
 800a8c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a8c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	e0a3      	b.n	800aa18 <_printf_i+0x1f4>
 800a8d0:	6820      	ldr	r0, [r4, #0]
 800a8d2:	6829      	ldr	r1, [r5, #0]
 800a8d4:	0606      	lsls	r6, r0, #24
 800a8d6:	f101 0304 	add.w	r3, r1, #4
 800a8da:	d50a      	bpl.n	800a8f2 <_printf_i+0xce>
 800a8dc:	680e      	ldr	r6, [r1, #0]
 800a8de:	602b      	str	r3, [r5, #0]
 800a8e0:	2e00      	cmp	r6, #0
 800a8e2:	da03      	bge.n	800a8ec <_printf_i+0xc8>
 800a8e4:	232d      	movs	r3, #45	; 0x2d
 800a8e6:	4276      	negs	r6, r6
 800a8e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8ec:	485e      	ldr	r0, [pc, #376]	; (800aa68 <_printf_i+0x244>)
 800a8ee:	230a      	movs	r3, #10
 800a8f0:	e019      	b.n	800a926 <_printf_i+0x102>
 800a8f2:	680e      	ldr	r6, [r1, #0]
 800a8f4:	602b      	str	r3, [r5, #0]
 800a8f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a8fa:	bf18      	it	ne
 800a8fc:	b236      	sxthne	r6, r6
 800a8fe:	e7ef      	b.n	800a8e0 <_printf_i+0xbc>
 800a900:	682b      	ldr	r3, [r5, #0]
 800a902:	6820      	ldr	r0, [r4, #0]
 800a904:	1d19      	adds	r1, r3, #4
 800a906:	6029      	str	r1, [r5, #0]
 800a908:	0601      	lsls	r1, r0, #24
 800a90a:	d501      	bpl.n	800a910 <_printf_i+0xec>
 800a90c:	681e      	ldr	r6, [r3, #0]
 800a90e:	e002      	b.n	800a916 <_printf_i+0xf2>
 800a910:	0646      	lsls	r6, r0, #25
 800a912:	d5fb      	bpl.n	800a90c <_printf_i+0xe8>
 800a914:	881e      	ldrh	r6, [r3, #0]
 800a916:	4854      	ldr	r0, [pc, #336]	; (800aa68 <_printf_i+0x244>)
 800a918:	2f6f      	cmp	r7, #111	; 0x6f
 800a91a:	bf0c      	ite	eq
 800a91c:	2308      	moveq	r3, #8
 800a91e:	230a      	movne	r3, #10
 800a920:	2100      	movs	r1, #0
 800a922:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a926:	6865      	ldr	r5, [r4, #4]
 800a928:	60a5      	str	r5, [r4, #8]
 800a92a:	2d00      	cmp	r5, #0
 800a92c:	bfa2      	ittt	ge
 800a92e:	6821      	ldrge	r1, [r4, #0]
 800a930:	f021 0104 	bicge.w	r1, r1, #4
 800a934:	6021      	strge	r1, [r4, #0]
 800a936:	b90e      	cbnz	r6, 800a93c <_printf_i+0x118>
 800a938:	2d00      	cmp	r5, #0
 800a93a:	d04d      	beq.n	800a9d8 <_printf_i+0x1b4>
 800a93c:	4615      	mov	r5, r2
 800a93e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a942:	fb03 6711 	mls	r7, r3, r1, r6
 800a946:	5dc7      	ldrb	r7, [r0, r7]
 800a948:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a94c:	4637      	mov	r7, r6
 800a94e:	42bb      	cmp	r3, r7
 800a950:	460e      	mov	r6, r1
 800a952:	d9f4      	bls.n	800a93e <_printf_i+0x11a>
 800a954:	2b08      	cmp	r3, #8
 800a956:	d10b      	bne.n	800a970 <_printf_i+0x14c>
 800a958:	6823      	ldr	r3, [r4, #0]
 800a95a:	07de      	lsls	r6, r3, #31
 800a95c:	d508      	bpl.n	800a970 <_printf_i+0x14c>
 800a95e:	6923      	ldr	r3, [r4, #16]
 800a960:	6861      	ldr	r1, [r4, #4]
 800a962:	4299      	cmp	r1, r3
 800a964:	bfde      	ittt	le
 800a966:	2330      	movle	r3, #48	; 0x30
 800a968:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a96c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a970:	1b52      	subs	r2, r2, r5
 800a972:	6122      	str	r2, [r4, #16]
 800a974:	f8cd a000 	str.w	sl, [sp]
 800a978:	464b      	mov	r3, r9
 800a97a:	aa03      	add	r2, sp, #12
 800a97c:	4621      	mov	r1, r4
 800a97e:	4640      	mov	r0, r8
 800a980:	f7ff fee2 	bl	800a748 <_printf_common>
 800a984:	3001      	adds	r0, #1
 800a986:	d14c      	bne.n	800aa22 <_printf_i+0x1fe>
 800a988:	f04f 30ff 	mov.w	r0, #4294967295
 800a98c:	b004      	add	sp, #16
 800a98e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a992:	4835      	ldr	r0, [pc, #212]	; (800aa68 <_printf_i+0x244>)
 800a994:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a998:	6829      	ldr	r1, [r5, #0]
 800a99a:	6823      	ldr	r3, [r4, #0]
 800a99c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a9a0:	6029      	str	r1, [r5, #0]
 800a9a2:	061d      	lsls	r5, r3, #24
 800a9a4:	d514      	bpl.n	800a9d0 <_printf_i+0x1ac>
 800a9a6:	07df      	lsls	r7, r3, #31
 800a9a8:	bf44      	itt	mi
 800a9aa:	f043 0320 	orrmi.w	r3, r3, #32
 800a9ae:	6023      	strmi	r3, [r4, #0]
 800a9b0:	b91e      	cbnz	r6, 800a9ba <_printf_i+0x196>
 800a9b2:	6823      	ldr	r3, [r4, #0]
 800a9b4:	f023 0320 	bic.w	r3, r3, #32
 800a9b8:	6023      	str	r3, [r4, #0]
 800a9ba:	2310      	movs	r3, #16
 800a9bc:	e7b0      	b.n	800a920 <_printf_i+0xfc>
 800a9be:	6823      	ldr	r3, [r4, #0]
 800a9c0:	f043 0320 	orr.w	r3, r3, #32
 800a9c4:	6023      	str	r3, [r4, #0]
 800a9c6:	2378      	movs	r3, #120	; 0x78
 800a9c8:	4828      	ldr	r0, [pc, #160]	; (800aa6c <_printf_i+0x248>)
 800a9ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a9ce:	e7e3      	b.n	800a998 <_printf_i+0x174>
 800a9d0:	0659      	lsls	r1, r3, #25
 800a9d2:	bf48      	it	mi
 800a9d4:	b2b6      	uxthmi	r6, r6
 800a9d6:	e7e6      	b.n	800a9a6 <_printf_i+0x182>
 800a9d8:	4615      	mov	r5, r2
 800a9da:	e7bb      	b.n	800a954 <_printf_i+0x130>
 800a9dc:	682b      	ldr	r3, [r5, #0]
 800a9de:	6826      	ldr	r6, [r4, #0]
 800a9e0:	6961      	ldr	r1, [r4, #20]
 800a9e2:	1d18      	adds	r0, r3, #4
 800a9e4:	6028      	str	r0, [r5, #0]
 800a9e6:	0635      	lsls	r5, r6, #24
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	d501      	bpl.n	800a9f0 <_printf_i+0x1cc>
 800a9ec:	6019      	str	r1, [r3, #0]
 800a9ee:	e002      	b.n	800a9f6 <_printf_i+0x1d2>
 800a9f0:	0670      	lsls	r0, r6, #25
 800a9f2:	d5fb      	bpl.n	800a9ec <_printf_i+0x1c8>
 800a9f4:	8019      	strh	r1, [r3, #0]
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	6123      	str	r3, [r4, #16]
 800a9fa:	4615      	mov	r5, r2
 800a9fc:	e7ba      	b.n	800a974 <_printf_i+0x150>
 800a9fe:	682b      	ldr	r3, [r5, #0]
 800aa00:	1d1a      	adds	r2, r3, #4
 800aa02:	602a      	str	r2, [r5, #0]
 800aa04:	681d      	ldr	r5, [r3, #0]
 800aa06:	6862      	ldr	r2, [r4, #4]
 800aa08:	2100      	movs	r1, #0
 800aa0a:	4628      	mov	r0, r5
 800aa0c:	f7f5 fc00 	bl	8000210 <memchr>
 800aa10:	b108      	cbz	r0, 800aa16 <_printf_i+0x1f2>
 800aa12:	1b40      	subs	r0, r0, r5
 800aa14:	6060      	str	r0, [r4, #4]
 800aa16:	6863      	ldr	r3, [r4, #4]
 800aa18:	6123      	str	r3, [r4, #16]
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa20:	e7a8      	b.n	800a974 <_printf_i+0x150>
 800aa22:	6923      	ldr	r3, [r4, #16]
 800aa24:	462a      	mov	r2, r5
 800aa26:	4649      	mov	r1, r9
 800aa28:	4640      	mov	r0, r8
 800aa2a:	47d0      	blx	sl
 800aa2c:	3001      	adds	r0, #1
 800aa2e:	d0ab      	beq.n	800a988 <_printf_i+0x164>
 800aa30:	6823      	ldr	r3, [r4, #0]
 800aa32:	079b      	lsls	r3, r3, #30
 800aa34:	d413      	bmi.n	800aa5e <_printf_i+0x23a>
 800aa36:	68e0      	ldr	r0, [r4, #12]
 800aa38:	9b03      	ldr	r3, [sp, #12]
 800aa3a:	4298      	cmp	r0, r3
 800aa3c:	bfb8      	it	lt
 800aa3e:	4618      	movlt	r0, r3
 800aa40:	e7a4      	b.n	800a98c <_printf_i+0x168>
 800aa42:	2301      	movs	r3, #1
 800aa44:	4632      	mov	r2, r6
 800aa46:	4649      	mov	r1, r9
 800aa48:	4640      	mov	r0, r8
 800aa4a:	47d0      	blx	sl
 800aa4c:	3001      	adds	r0, #1
 800aa4e:	d09b      	beq.n	800a988 <_printf_i+0x164>
 800aa50:	3501      	adds	r5, #1
 800aa52:	68e3      	ldr	r3, [r4, #12]
 800aa54:	9903      	ldr	r1, [sp, #12]
 800aa56:	1a5b      	subs	r3, r3, r1
 800aa58:	42ab      	cmp	r3, r5
 800aa5a:	dcf2      	bgt.n	800aa42 <_printf_i+0x21e>
 800aa5c:	e7eb      	b.n	800aa36 <_printf_i+0x212>
 800aa5e:	2500      	movs	r5, #0
 800aa60:	f104 0619 	add.w	r6, r4, #25
 800aa64:	e7f5      	b.n	800aa52 <_printf_i+0x22e>
 800aa66:	bf00      	nop
 800aa68:	0800d955 	.word	0x0800d955
 800aa6c:	0800d966 	.word	0x0800d966

0800aa70 <_sbrk_r>:
 800aa70:	b538      	push	{r3, r4, r5, lr}
 800aa72:	4d06      	ldr	r5, [pc, #24]	; (800aa8c <_sbrk_r+0x1c>)
 800aa74:	2300      	movs	r3, #0
 800aa76:	4604      	mov	r4, r0
 800aa78:	4608      	mov	r0, r1
 800aa7a:	602b      	str	r3, [r5, #0]
 800aa7c:	f000 fc7e 	bl	800b37c <_sbrk>
 800aa80:	1c43      	adds	r3, r0, #1
 800aa82:	d102      	bne.n	800aa8a <_sbrk_r+0x1a>
 800aa84:	682b      	ldr	r3, [r5, #0]
 800aa86:	b103      	cbz	r3, 800aa8a <_sbrk_r+0x1a>
 800aa88:	6023      	str	r3, [r4, #0]
 800aa8a:	bd38      	pop	{r3, r4, r5, pc}
 800aa8c:	20001528 	.word	0x20001528

0800aa90 <_raise_r>:
 800aa90:	291f      	cmp	r1, #31
 800aa92:	b538      	push	{r3, r4, r5, lr}
 800aa94:	4604      	mov	r4, r0
 800aa96:	460d      	mov	r5, r1
 800aa98:	d904      	bls.n	800aaa4 <_raise_r+0x14>
 800aa9a:	2316      	movs	r3, #22
 800aa9c:	6003      	str	r3, [r0, #0]
 800aa9e:	f04f 30ff 	mov.w	r0, #4294967295
 800aaa2:	bd38      	pop	{r3, r4, r5, pc}
 800aaa4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aaa6:	b112      	cbz	r2, 800aaae <_raise_r+0x1e>
 800aaa8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aaac:	b94b      	cbnz	r3, 800aac2 <_raise_r+0x32>
 800aaae:	4620      	mov	r0, r4
 800aab0:	f000 f830 	bl	800ab14 <_getpid_r>
 800aab4:	462a      	mov	r2, r5
 800aab6:	4601      	mov	r1, r0
 800aab8:	4620      	mov	r0, r4
 800aaba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aabe:	f000 b817 	b.w	800aaf0 <_kill_r>
 800aac2:	2b01      	cmp	r3, #1
 800aac4:	d00a      	beq.n	800aadc <_raise_r+0x4c>
 800aac6:	1c59      	adds	r1, r3, #1
 800aac8:	d103      	bne.n	800aad2 <_raise_r+0x42>
 800aaca:	2316      	movs	r3, #22
 800aacc:	6003      	str	r3, [r0, #0]
 800aace:	2001      	movs	r0, #1
 800aad0:	e7e7      	b.n	800aaa2 <_raise_r+0x12>
 800aad2:	2400      	movs	r4, #0
 800aad4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aad8:	4628      	mov	r0, r5
 800aada:	4798      	blx	r3
 800aadc:	2000      	movs	r0, #0
 800aade:	e7e0      	b.n	800aaa2 <_raise_r+0x12>

0800aae0 <raise>:
 800aae0:	4b02      	ldr	r3, [pc, #8]	; (800aaec <raise+0xc>)
 800aae2:	4601      	mov	r1, r0
 800aae4:	6818      	ldr	r0, [r3, #0]
 800aae6:	f7ff bfd3 	b.w	800aa90 <_raise_r>
 800aaea:	bf00      	nop
 800aaec:	20000044 	.word	0x20000044

0800aaf0 <_kill_r>:
 800aaf0:	b538      	push	{r3, r4, r5, lr}
 800aaf2:	4d07      	ldr	r5, [pc, #28]	; (800ab10 <_kill_r+0x20>)
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	4604      	mov	r4, r0
 800aaf8:	4608      	mov	r0, r1
 800aafa:	4611      	mov	r1, r2
 800aafc:	602b      	str	r3, [r5, #0]
 800aafe:	f000 fc25 	bl	800b34c <_kill>
 800ab02:	1c43      	adds	r3, r0, #1
 800ab04:	d102      	bne.n	800ab0c <_kill_r+0x1c>
 800ab06:	682b      	ldr	r3, [r5, #0]
 800ab08:	b103      	cbz	r3, 800ab0c <_kill_r+0x1c>
 800ab0a:	6023      	str	r3, [r4, #0]
 800ab0c:	bd38      	pop	{r3, r4, r5, pc}
 800ab0e:	bf00      	nop
 800ab10:	20001528 	.word	0x20001528

0800ab14 <_getpid_r>:
 800ab14:	f000 bc0a 	b.w	800b32c <_getpid>

0800ab18 <__swbuf_r>:
 800ab18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab1a:	460e      	mov	r6, r1
 800ab1c:	4614      	mov	r4, r2
 800ab1e:	4605      	mov	r5, r0
 800ab20:	b118      	cbz	r0, 800ab2a <__swbuf_r+0x12>
 800ab22:	6983      	ldr	r3, [r0, #24]
 800ab24:	b90b      	cbnz	r3, 800ab2a <__swbuf_r+0x12>
 800ab26:	f000 fa33 	bl	800af90 <__sinit>
 800ab2a:	4b21      	ldr	r3, [pc, #132]	; (800abb0 <__swbuf_r+0x98>)
 800ab2c:	429c      	cmp	r4, r3
 800ab2e:	d12b      	bne.n	800ab88 <__swbuf_r+0x70>
 800ab30:	686c      	ldr	r4, [r5, #4]
 800ab32:	69a3      	ldr	r3, [r4, #24]
 800ab34:	60a3      	str	r3, [r4, #8]
 800ab36:	89a3      	ldrh	r3, [r4, #12]
 800ab38:	071a      	lsls	r2, r3, #28
 800ab3a:	d52f      	bpl.n	800ab9c <__swbuf_r+0x84>
 800ab3c:	6923      	ldr	r3, [r4, #16]
 800ab3e:	b36b      	cbz	r3, 800ab9c <__swbuf_r+0x84>
 800ab40:	6923      	ldr	r3, [r4, #16]
 800ab42:	6820      	ldr	r0, [r4, #0]
 800ab44:	1ac0      	subs	r0, r0, r3
 800ab46:	6963      	ldr	r3, [r4, #20]
 800ab48:	b2f6      	uxtb	r6, r6
 800ab4a:	4283      	cmp	r3, r0
 800ab4c:	4637      	mov	r7, r6
 800ab4e:	dc04      	bgt.n	800ab5a <__swbuf_r+0x42>
 800ab50:	4621      	mov	r1, r4
 800ab52:	4628      	mov	r0, r5
 800ab54:	f000 f988 	bl	800ae68 <_fflush_r>
 800ab58:	bb30      	cbnz	r0, 800aba8 <__swbuf_r+0x90>
 800ab5a:	68a3      	ldr	r3, [r4, #8]
 800ab5c:	3b01      	subs	r3, #1
 800ab5e:	60a3      	str	r3, [r4, #8]
 800ab60:	6823      	ldr	r3, [r4, #0]
 800ab62:	1c5a      	adds	r2, r3, #1
 800ab64:	6022      	str	r2, [r4, #0]
 800ab66:	701e      	strb	r6, [r3, #0]
 800ab68:	6963      	ldr	r3, [r4, #20]
 800ab6a:	3001      	adds	r0, #1
 800ab6c:	4283      	cmp	r3, r0
 800ab6e:	d004      	beq.n	800ab7a <__swbuf_r+0x62>
 800ab70:	89a3      	ldrh	r3, [r4, #12]
 800ab72:	07db      	lsls	r3, r3, #31
 800ab74:	d506      	bpl.n	800ab84 <__swbuf_r+0x6c>
 800ab76:	2e0a      	cmp	r6, #10
 800ab78:	d104      	bne.n	800ab84 <__swbuf_r+0x6c>
 800ab7a:	4621      	mov	r1, r4
 800ab7c:	4628      	mov	r0, r5
 800ab7e:	f000 f973 	bl	800ae68 <_fflush_r>
 800ab82:	b988      	cbnz	r0, 800aba8 <__swbuf_r+0x90>
 800ab84:	4638      	mov	r0, r7
 800ab86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab88:	4b0a      	ldr	r3, [pc, #40]	; (800abb4 <__swbuf_r+0x9c>)
 800ab8a:	429c      	cmp	r4, r3
 800ab8c:	d101      	bne.n	800ab92 <__swbuf_r+0x7a>
 800ab8e:	68ac      	ldr	r4, [r5, #8]
 800ab90:	e7cf      	b.n	800ab32 <__swbuf_r+0x1a>
 800ab92:	4b09      	ldr	r3, [pc, #36]	; (800abb8 <__swbuf_r+0xa0>)
 800ab94:	429c      	cmp	r4, r3
 800ab96:	bf08      	it	eq
 800ab98:	68ec      	ldreq	r4, [r5, #12]
 800ab9a:	e7ca      	b.n	800ab32 <__swbuf_r+0x1a>
 800ab9c:	4621      	mov	r1, r4
 800ab9e:	4628      	mov	r0, r5
 800aba0:	f000 f80c 	bl	800abbc <__swsetup_r>
 800aba4:	2800      	cmp	r0, #0
 800aba6:	d0cb      	beq.n	800ab40 <__swbuf_r+0x28>
 800aba8:	f04f 37ff 	mov.w	r7, #4294967295
 800abac:	e7ea      	b.n	800ab84 <__swbuf_r+0x6c>
 800abae:	bf00      	nop
 800abb0:	0800d99c 	.word	0x0800d99c
 800abb4:	0800d9bc 	.word	0x0800d9bc
 800abb8:	0800d97c 	.word	0x0800d97c

0800abbc <__swsetup_r>:
 800abbc:	4b32      	ldr	r3, [pc, #200]	; (800ac88 <__swsetup_r+0xcc>)
 800abbe:	b570      	push	{r4, r5, r6, lr}
 800abc0:	681d      	ldr	r5, [r3, #0]
 800abc2:	4606      	mov	r6, r0
 800abc4:	460c      	mov	r4, r1
 800abc6:	b125      	cbz	r5, 800abd2 <__swsetup_r+0x16>
 800abc8:	69ab      	ldr	r3, [r5, #24]
 800abca:	b913      	cbnz	r3, 800abd2 <__swsetup_r+0x16>
 800abcc:	4628      	mov	r0, r5
 800abce:	f000 f9df 	bl	800af90 <__sinit>
 800abd2:	4b2e      	ldr	r3, [pc, #184]	; (800ac8c <__swsetup_r+0xd0>)
 800abd4:	429c      	cmp	r4, r3
 800abd6:	d10f      	bne.n	800abf8 <__swsetup_r+0x3c>
 800abd8:	686c      	ldr	r4, [r5, #4]
 800abda:	89a3      	ldrh	r3, [r4, #12]
 800abdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800abe0:	0719      	lsls	r1, r3, #28
 800abe2:	d42c      	bmi.n	800ac3e <__swsetup_r+0x82>
 800abe4:	06dd      	lsls	r5, r3, #27
 800abe6:	d411      	bmi.n	800ac0c <__swsetup_r+0x50>
 800abe8:	2309      	movs	r3, #9
 800abea:	6033      	str	r3, [r6, #0]
 800abec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800abf0:	81a3      	strh	r3, [r4, #12]
 800abf2:	f04f 30ff 	mov.w	r0, #4294967295
 800abf6:	e03e      	b.n	800ac76 <__swsetup_r+0xba>
 800abf8:	4b25      	ldr	r3, [pc, #148]	; (800ac90 <__swsetup_r+0xd4>)
 800abfa:	429c      	cmp	r4, r3
 800abfc:	d101      	bne.n	800ac02 <__swsetup_r+0x46>
 800abfe:	68ac      	ldr	r4, [r5, #8]
 800ac00:	e7eb      	b.n	800abda <__swsetup_r+0x1e>
 800ac02:	4b24      	ldr	r3, [pc, #144]	; (800ac94 <__swsetup_r+0xd8>)
 800ac04:	429c      	cmp	r4, r3
 800ac06:	bf08      	it	eq
 800ac08:	68ec      	ldreq	r4, [r5, #12]
 800ac0a:	e7e6      	b.n	800abda <__swsetup_r+0x1e>
 800ac0c:	0758      	lsls	r0, r3, #29
 800ac0e:	d512      	bpl.n	800ac36 <__swsetup_r+0x7a>
 800ac10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac12:	b141      	cbz	r1, 800ac26 <__swsetup_r+0x6a>
 800ac14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac18:	4299      	cmp	r1, r3
 800ac1a:	d002      	beq.n	800ac22 <__swsetup_r+0x66>
 800ac1c:	4630      	mov	r0, r6
 800ac1e:	f7ff fb59 	bl	800a2d4 <_free_r>
 800ac22:	2300      	movs	r3, #0
 800ac24:	6363      	str	r3, [r4, #52]	; 0x34
 800ac26:	89a3      	ldrh	r3, [r4, #12]
 800ac28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ac2c:	81a3      	strh	r3, [r4, #12]
 800ac2e:	2300      	movs	r3, #0
 800ac30:	6063      	str	r3, [r4, #4]
 800ac32:	6923      	ldr	r3, [r4, #16]
 800ac34:	6023      	str	r3, [r4, #0]
 800ac36:	89a3      	ldrh	r3, [r4, #12]
 800ac38:	f043 0308 	orr.w	r3, r3, #8
 800ac3c:	81a3      	strh	r3, [r4, #12]
 800ac3e:	6923      	ldr	r3, [r4, #16]
 800ac40:	b94b      	cbnz	r3, 800ac56 <__swsetup_r+0x9a>
 800ac42:	89a3      	ldrh	r3, [r4, #12]
 800ac44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ac48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac4c:	d003      	beq.n	800ac56 <__swsetup_r+0x9a>
 800ac4e:	4621      	mov	r1, r4
 800ac50:	4630      	mov	r0, r6
 800ac52:	f000 fa63 	bl	800b11c <__smakebuf_r>
 800ac56:	89a0      	ldrh	r0, [r4, #12]
 800ac58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac5c:	f010 0301 	ands.w	r3, r0, #1
 800ac60:	d00a      	beq.n	800ac78 <__swsetup_r+0xbc>
 800ac62:	2300      	movs	r3, #0
 800ac64:	60a3      	str	r3, [r4, #8]
 800ac66:	6963      	ldr	r3, [r4, #20]
 800ac68:	425b      	negs	r3, r3
 800ac6a:	61a3      	str	r3, [r4, #24]
 800ac6c:	6923      	ldr	r3, [r4, #16]
 800ac6e:	b943      	cbnz	r3, 800ac82 <__swsetup_r+0xc6>
 800ac70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ac74:	d1ba      	bne.n	800abec <__swsetup_r+0x30>
 800ac76:	bd70      	pop	{r4, r5, r6, pc}
 800ac78:	0781      	lsls	r1, r0, #30
 800ac7a:	bf58      	it	pl
 800ac7c:	6963      	ldrpl	r3, [r4, #20]
 800ac7e:	60a3      	str	r3, [r4, #8]
 800ac80:	e7f4      	b.n	800ac6c <__swsetup_r+0xb0>
 800ac82:	2000      	movs	r0, #0
 800ac84:	e7f7      	b.n	800ac76 <__swsetup_r+0xba>
 800ac86:	bf00      	nop
 800ac88:	20000044 	.word	0x20000044
 800ac8c:	0800d99c 	.word	0x0800d99c
 800ac90:	0800d9bc 	.word	0x0800d9bc
 800ac94:	0800d97c 	.word	0x0800d97c

0800ac98 <__register_exitproc>:
 800ac98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac9c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 800ad58 <__register_exitproc+0xc0>
 800aca0:	4606      	mov	r6, r0
 800aca2:	f8d8 0000 	ldr.w	r0, [r8]
 800aca6:	461f      	mov	r7, r3
 800aca8:	460d      	mov	r5, r1
 800acaa:	4691      	mov	r9, r2
 800acac:	f000 fa0e 	bl	800b0cc <__retarget_lock_acquire_recursive>
 800acb0:	4b25      	ldr	r3, [pc, #148]	; (800ad48 <__register_exitproc+0xb0>)
 800acb2:	681c      	ldr	r4, [r3, #0]
 800acb4:	b934      	cbnz	r4, 800acc4 <__register_exitproc+0x2c>
 800acb6:	4c25      	ldr	r4, [pc, #148]	; (800ad4c <__register_exitproc+0xb4>)
 800acb8:	601c      	str	r4, [r3, #0]
 800acba:	4b25      	ldr	r3, [pc, #148]	; (800ad50 <__register_exitproc+0xb8>)
 800acbc:	b113      	cbz	r3, 800acc4 <__register_exitproc+0x2c>
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800acc4:	6863      	ldr	r3, [r4, #4]
 800acc6:	2b1f      	cmp	r3, #31
 800acc8:	dd07      	ble.n	800acda <__register_exitproc+0x42>
 800acca:	f8d8 0000 	ldr.w	r0, [r8]
 800acce:	f000 f9ff 	bl	800b0d0 <__retarget_lock_release_recursive>
 800acd2:	f04f 30ff 	mov.w	r0, #4294967295
 800acd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acda:	b34e      	cbz	r6, 800ad30 <__register_exitproc+0x98>
 800acdc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800ace0:	b988      	cbnz	r0, 800ad06 <__register_exitproc+0x6e>
 800ace2:	4b1c      	ldr	r3, [pc, #112]	; (800ad54 <__register_exitproc+0xbc>)
 800ace4:	b923      	cbnz	r3, 800acf0 <__register_exitproc+0x58>
 800ace6:	f8d8 0000 	ldr.w	r0, [r8]
 800acea:	f000 f9f0 	bl	800b0ce <__retarget_lock_release>
 800acee:	e7f0      	b.n	800acd2 <__register_exitproc+0x3a>
 800acf0:	f44f 7084 	mov.w	r0, #264	; 0x108
 800acf4:	f7ff fabc 	bl	800a270 <malloc>
 800acf8:	2800      	cmp	r0, #0
 800acfa:	d0f4      	beq.n	800ace6 <__register_exitproc+0x4e>
 800acfc:	2300      	movs	r3, #0
 800acfe:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 800ad02:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800ad06:	6863      	ldr	r3, [r4, #4]
 800ad08:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 800ad0c:	2201      	movs	r2, #1
 800ad0e:	409a      	lsls	r2, r3
 800ad10:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 800ad14:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 800ad1e:	2e02      	cmp	r6, #2
 800ad20:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 800ad24:	bf02      	ittt	eq
 800ad26:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 800ad2a:	4313      	orreq	r3, r2
 800ad2c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 800ad30:	6863      	ldr	r3, [r4, #4]
 800ad32:	f8d8 0000 	ldr.w	r0, [r8]
 800ad36:	1c5a      	adds	r2, r3, #1
 800ad38:	3302      	adds	r3, #2
 800ad3a:	6062      	str	r2, [r4, #4]
 800ad3c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 800ad40:	f000 f9c6 	bl	800b0d0 <__retarget_lock_release_recursive>
 800ad44:	2000      	movs	r0, #0
 800ad46:	e7c6      	b.n	800acd6 <__register_exitproc+0x3e>
 800ad48:	20001520 	.word	0x20001520
 800ad4c:	20001494 	.word	0x20001494
 800ad50:	0800d978 	.word	0x0800d978
 800ad54:	0800a271 	.word	0x0800a271
 800ad58:	200000a8 	.word	0x200000a8

0800ad5c <__sflush_r>:
 800ad5c:	898a      	ldrh	r2, [r1, #12]
 800ad5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad62:	4605      	mov	r5, r0
 800ad64:	0710      	lsls	r0, r2, #28
 800ad66:	460c      	mov	r4, r1
 800ad68:	d458      	bmi.n	800ae1c <__sflush_r+0xc0>
 800ad6a:	684b      	ldr	r3, [r1, #4]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	dc05      	bgt.n	800ad7c <__sflush_r+0x20>
 800ad70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	dc02      	bgt.n	800ad7c <__sflush_r+0x20>
 800ad76:	2000      	movs	r0, #0
 800ad78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad7e:	2e00      	cmp	r6, #0
 800ad80:	d0f9      	beq.n	800ad76 <__sflush_r+0x1a>
 800ad82:	2300      	movs	r3, #0
 800ad84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ad88:	682f      	ldr	r7, [r5, #0]
 800ad8a:	602b      	str	r3, [r5, #0]
 800ad8c:	d032      	beq.n	800adf4 <__sflush_r+0x98>
 800ad8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad90:	89a3      	ldrh	r3, [r4, #12]
 800ad92:	075a      	lsls	r2, r3, #29
 800ad94:	d505      	bpl.n	800ada2 <__sflush_r+0x46>
 800ad96:	6863      	ldr	r3, [r4, #4]
 800ad98:	1ac0      	subs	r0, r0, r3
 800ad9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad9c:	b10b      	cbz	r3, 800ada2 <__sflush_r+0x46>
 800ad9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ada0:	1ac0      	subs	r0, r0, r3
 800ada2:	2300      	movs	r3, #0
 800ada4:	4602      	mov	r2, r0
 800ada6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ada8:	6a21      	ldr	r1, [r4, #32]
 800adaa:	4628      	mov	r0, r5
 800adac:	47b0      	blx	r6
 800adae:	1c43      	adds	r3, r0, #1
 800adb0:	89a3      	ldrh	r3, [r4, #12]
 800adb2:	d106      	bne.n	800adc2 <__sflush_r+0x66>
 800adb4:	6829      	ldr	r1, [r5, #0]
 800adb6:	291d      	cmp	r1, #29
 800adb8:	d82c      	bhi.n	800ae14 <__sflush_r+0xb8>
 800adba:	4a2a      	ldr	r2, [pc, #168]	; (800ae64 <__sflush_r+0x108>)
 800adbc:	40ca      	lsrs	r2, r1
 800adbe:	07d6      	lsls	r6, r2, #31
 800adc0:	d528      	bpl.n	800ae14 <__sflush_r+0xb8>
 800adc2:	2200      	movs	r2, #0
 800adc4:	6062      	str	r2, [r4, #4]
 800adc6:	04d9      	lsls	r1, r3, #19
 800adc8:	6922      	ldr	r2, [r4, #16]
 800adca:	6022      	str	r2, [r4, #0]
 800adcc:	d504      	bpl.n	800add8 <__sflush_r+0x7c>
 800adce:	1c42      	adds	r2, r0, #1
 800add0:	d101      	bne.n	800add6 <__sflush_r+0x7a>
 800add2:	682b      	ldr	r3, [r5, #0]
 800add4:	b903      	cbnz	r3, 800add8 <__sflush_r+0x7c>
 800add6:	6560      	str	r0, [r4, #84]	; 0x54
 800add8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800adda:	602f      	str	r7, [r5, #0]
 800addc:	2900      	cmp	r1, #0
 800adde:	d0ca      	beq.n	800ad76 <__sflush_r+0x1a>
 800ade0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ade4:	4299      	cmp	r1, r3
 800ade6:	d002      	beq.n	800adee <__sflush_r+0x92>
 800ade8:	4628      	mov	r0, r5
 800adea:	f7ff fa73 	bl	800a2d4 <_free_r>
 800adee:	2000      	movs	r0, #0
 800adf0:	6360      	str	r0, [r4, #52]	; 0x34
 800adf2:	e7c1      	b.n	800ad78 <__sflush_r+0x1c>
 800adf4:	6a21      	ldr	r1, [r4, #32]
 800adf6:	2301      	movs	r3, #1
 800adf8:	4628      	mov	r0, r5
 800adfa:	47b0      	blx	r6
 800adfc:	1c41      	adds	r1, r0, #1
 800adfe:	d1c7      	bne.n	800ad90 <__sflush_r+0x34>
 800ae00:	682b      	ldr	r3, [r5, #0]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d0c4      	beq.n	800ad90 <__sflush_r+0x34>
 800ae06:	2b1d      	cmp	r3, #29
 800ae08:	d001      	beq.n	800ae0e <__sflush_r+0xb2>
 800ae0a:	2b16      	cmp	r3, #22
 800ae0c:	d101      	bne.n	800ae12 <__sflush_r+0xb6>
 800ae0e:	602f      	str	r7, [r5, #0]
 800ae10:	e7b1      	b.n	800ad76 <__sflush_r+0x1a>
 800ae12:	89a3      	ldrh	r3, [r4, #12]
 800ae14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae18:	81a3      	strh	r3, [r4, #12]
 800ae1a:	e7ad      	b.n	800ad78 <__sflush_r+0x1c>
 800ae1c:	690f      	ldr	r7, [r1, #16]
 800ae1e:	2f00      	cmp	r7, #0
 800ae20:	d0a9      	beq.n	800ad76 <__sflush_r+0x1a>
 800ae22:	0793      	lsls	r3, r2, #30
 800ae24:	680e      	ldr	r6, [r1, #0]
 800ae26:	bf08      	it	eq
 800ae28:	694b      	ldreq	r3, [r1, #20]
 800ae2a:	600f      	str	r7, [r1, #0]
 800ae2c:	bf18      	it	ne
 800ae2e:	2300      	movne	r3, #0
 800ae30:	eba6 0807 	sub.w	r8, r6, r7
 800ae34:	608b      	str	r3, [r1, #8]
 800ae36:	f1b8 0f00 	cmp.w	r8, #0
 800ae3a:	dd9c      	ble.n	800ad76 <__sflush_r+0x1a>
 800ae3c:	6a21      	ldr	r1, [r4, #32]
 800ae3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae40:	4643      	mov	r3, r8
 800ae42:	463a      	mov	r2, r7
 800ae44:	4628      	mov	r0, r5
 800ae46:	47b0      	blx	r6
 800ae48:	2800      	cmp	r0, #0
 800ae4a:	dc06      	bgt.n	800ae5a <__sflush_r+0xfe>
 800ae4c:	89a3      	ldrh	r3, [r4, #12]
 800ae4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae52:	81a3      	strh	r3, [r4, #12]
 800ae54:	f04f 30ff 	mov.w	r0, #4294967295
 800ae58:	e78e      	b.n	800ad78 <__sflush_r+0x1c>
 800ae5a:	4407      	add	r7, r0
 800ae5c:	eba8 0800 	sub.w	r8, r8, r0
 800ae60:	e7e9      	b.n	800ae36 <__sflush_r+0xda>
 800ae62:	bf00      	nop
 800ae64:	20400001 	.word	0x20400001

0800ae68 <_fflush_r>:
 800ae68:	b538      	push	{r3, r4, r5, lr}
 800ae6a:	690b      	ldr	r3, [r1, #16]
 800ae6c:	4605      	mov	r5, r0
 800ae6e:	460c      	mov	r4, r1
 800ae70:	b913      	cbnz	r3, 800ae78 <_fflush_r+0x10>
 800ae72:	2500      	movs	r5, #0
 800ae74:	4628      	mov	r0, r5
 800ae76:	bd38      	pop	{r3, r4, r5, pc}
 800ae78:	b118      	cbz	r0, 800ae82 <_fflush_r+0x1a>
 800ae7a:	6983      	ldr	r3, [r0, #24]
 800ae7c:	b90b      	cbnz	r3, 800ae82 <_fflush_r+0x1a>
 800ae7e:	f000 f887 	bl	800af90 <__sinit>
 800ae82:	4b14      	ldr	r3, [pc, #80]	; (800aed4 <_fflush_r+0x6c>)
 800ae84:	429c      	cmp	r4, r3
 800ae86:	d11b      	bne.n	800aec0 <_fflush_r+0x58>
 800ae88:	686c      	ldr	r4, [r5, #4]
 800ae8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d0ef      	beq.n	800ae72 <_fflush_r+0xa>
 800ae92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae94:	07d0      	lsls	r0, r2, #31
 800ae96:	d404      	bmi.n	800aea2 <_fflush_r+0x3a>
 800ae98:	0599      	lsls	r1, r3, #22
 800ae9a:	d402      	bmi.n	800aea2 <_fflush_r+0x3a>
 800ae9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae9e:	f000 f915 	bl	800b0cc <__retarget_lock_acquire_recursive>
 800aea2:	4628      	mov	r0, r5
 800aea4:	4621      	mov	r1, r4
 800aea6:	f7ff ff59 	bl	800ad5c <__sflush_r>
 800aeaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aeac:	07da      	lsls	r2, r3, #31
 800aeae:	4605      	mov	r5, r0
 800aeb0:	d4e0      	bmi.n	800ae74 <_fflush_r+0xc>
 800aeb2:	89a3      	ldrh	r3, [r4, #12]
 800aeb4:	059b      	lsls	r3, r3, #22
 800aeb6:	d4dd      	bmi.n	800ae74 <_fflush_r+0xc>
 800aeb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aeba:	f000 f909 	bl	800b0d0 <__retarget_lock_release_recursive>
 800aebe:	e7d9      	b.n	800ae74 <_fflush_r+0xc>
 800aec0:	4b05      	ldr	r3, [pc, #20]	; (800aed8 <_fflush_r+0x70>)
 800aec2:	429c      	cmp	r4, r3
 800aec4:	d101      	bne.n	800aeca <_fflush_r+0x62>
 800aec6:	68ac      	ldr	r4, [r5, #8]
 800aec8:	e7df      	b.n	800ae8a <_fflush_r+0x22>
 800aeca:	4b04      	ldr	r3, [pc, #16]	; (800aedc <_fflush_r+0x74>)
 800aecc:	429c      	cmp	r4, r3
 800aece:	bf08      	it	eq
 800aed0:	68ec      	ldreq	r4, [r5, #12]
 800aed2:	e7da      	b.n	800ae8a <_fflush_r+0x22>
 800aed4:	0800d99c 	.word	0x0800d99c
 800aed8:	0800d9bc 	.word	0x0800d9bc
 800aedc:	0800d97c 	.word	0x0800d97c

0800aee0 <std>:
 800aee0:	2300      	movs	r3, #0
 800aee2:	b510      	push	{r4, lr}
 800aee4:	4604      	mov	r4, r0
 800aee6:	e9c0 3300 	strd	r3, r3, [r0]
 800aeea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aeee:	6083      	str	r3, [r0, #8]
 800aef0:	8181      	strh	r1, [r0, #12]
 800aef2:	6643      	str	r3, [r0, #100]	; 0x64
 800aef4:	81c2      	strh	r2, [r0, #14]
 800aef6:	6183      	str	r3, [r0, #24]
 800aef8:	4619      	mov	r1, r3
 800aefa:	2208      	movs	r2, #8
 800aefc:	305c      	adds	r0, #92	; 0x5c
 800aefe:	f7ff f9e1 	bl	800a2c4 <memset>
 800af02:	4b05      	ldr	r3, [pc, #20]	; (800af18 <std+0x38>)
 800af04:	6263      	str	r3, [r4, #36]	; 0x24
 800af06:	4b05      	ldr	r3, [pc, #20]	; (800af1c <std+0x3c>)
 800af08:	62a3      	str	r3, [r4, #40]	; 0x28
 800af0a:	4b05      	ldr	r3, [pc, #20]	; (800af20 <std+0x40>)
 800af0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af0e:	4b05      	ldr	r3, [pc, #20]	; (800af24 <std+0x44>)
 800af10:	6224      	str	r4, [r4, #32]
 800af12:	6323      	str	r3, [r4, #48]	; 0x30
 800af14:	bd10      	pop	{r4, pc}
 800af16:	bf00      	nop
 800af18:	0800b1b5 	.word	0x0800b1b5
 800af1c:	0800b1d7 	.word	0x0800b1d7
 800af20:	0800b20f 	.word	0x0800b20f
 800af24:	0800b233 	.word	0x0800b233

0800af28 <_cleanup_r>:
 800af28:	4901      	ldr	r1, [pc, #4]	; (800af30 <_cleanup_r+0x8>)
 800af2a:	f000 b8af 	b.w	800b08c <_fwalk_reent>
 800af2e:	bf00      	nop
 800af30:	0800ae69 	.word	0x0800ae69

0800af34 <__sfmoreglue>:
 800af34:	b570      	push	{r4, r5, r6, lr}
 800af36:	2268      	movs	r2, #104	; 0x68
 800af38:	1e4d      	subs	r5, r1, #1
 800af3a:	4355      	muls	r5, r2
 800af3c:	460e      	mov	r6, r1
 800af3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800af42:	f7ff fa33 	bl	800a3ac <_malloc_r>
 800af46:	4604      	mov	r4, r0
 800af48:	b140      	cbz	r0, 800af5c <__sfmoreglue+0x28>
 800af4a:	2100      	movs	r1, #0
 800af4c:	e9c0 1600 	strd	r1, r6, [r0]
 800af50:	300c      	adds	r0, #12
 800af52:	60a0      	str	r0, [r4, #8]
 800af54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800af58:	f7ff f9b4 	bl	800a2c4 <memset>
 800af5c:	4620      	mov	r0, r4
 800af5e:	bd70      	pop	{r4, r5, r6, pc}

0800af60 <__sfp_lock_acquire>:
 800af60:	4801      	ldr	r0, [pc, #4]	; (800af68 <__sfp_lock_acquire+0x8>)
 800af62:	f000 b8b3 	b.w	800b0cc <__retarget_lock_acquire_recursive>
 800af66:	bf00      	nop
 800af68:	20001526 	.word	0x20001526

0800af6c <__sfp_lock_release>:
 800af6c:	4801      	ldr	r0, [pc, #4]	; (800af74 <__sfp_lock_release+0x8>)
 800af6e:	f000 b8af 	b.w	800b0d0 <__retarget_lock_release_recursive>
 800af72:	bf00      	nop
 800af74:	20001526 	.word	0x20001526

0800af78 <__sinit_lock_acquire>:
 800af78:	4801      	ldr	r0, [pc, #4]	; (800af80 <__sinit_lock_acquire+0x8>)
 800af7a:	f000 b8a7 	b.w	800b0cc <__retarget_lock_acquire_recursive>
 800af7e:	bf00      	nop
 800af80:	20001527 	.word	0x20001527

0800af84 <__sinit_lock_release>:
 800af84:	4801      	ldr	r0, [pc, #4]	; (800af8c <__sinit_lock_release+0x8>)
 800af86:	f000 b8a3 	b.w	800b0d0 <__retarget_lock_release_recursive>
 800af8a:	bf00      	nop
 800af8c:	20001527 	.word	0x20001527

0800af90 <__sinit>:
 800af90:	b510      	push	{r4, lr}
 800af92:	4604      	mov	r4, r0
 800af94:	f7ff fff0 	bl	800af78 <__sinit_lock_acquire>
 800af98:	69a3      	ldr	r3, [r4, #24]
 800af9a:	b11b      	cbz	r3, 800afa4 <__sinit+0x14>
 800af9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afa0:	f7ff bff0 	b.w	800af84 <__sinit_lock_release>
 800afa4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800afa8:	6523      	str	r3, [r4, #80]	; 0x50
 800afaa:	4b13      	ldr	r3, [pc, #76]	; (800aff8 <__sinit+0x68>)
 800afac:	4a13      	ldr	r2, [pc, #76]	; (800affc <__sinit+0x6c>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	62a2      	str	r2, [r4, #40]	; 0x28
 800afb2:	42a3      	cmp	r3, r4
 800afb4:	bf04      	itt	eq
 800afb6:	2301      	moveq	r3, #1
 800afb8:	61a3      	streq	r3, [r4, #24]
 800afba:	4620      	mov	r0, r4
 800afbc:	f000 f820 	bl	800b000 <__sfp>
 800afc0:	6060      	str	r0, [r4, #4]
 800afc2:	4620      	mov	r0, r4
 800afc4:	f000 f81c 	bl	800b000 <__sfp>
 800afc8:	60a0      	str	r0, [r4, #8]
 800afca:	4620      	mov	r0, r4
 800afcc:	f000 f818 	bl	800b000 <__sfp>
 800afd0:	2200      	movs	r2, #0
 800afd2:	60e0      	str	r0, [r4, #12]
 800afd4:	2104      	movs	r1, #4
 800afd6:	6860      	ldr	r0, [r4, #4]
 800afd8:	f7ff ff82 	bl	800aee0 <std>
 800afdc:	68a0      	ldr	r0, [r4, #8]
 800afde:	2201      	movs	r2, #1
 800afe0:	2109      	movs	r1, #9
 800afe2:	f7ff ff7d 	bl	800aee0 <std>
 800afe6:	68e0      	ldr	r0, [r4, #12]
 800afe8:	2202      	movs	r2, #2
 800afea:	2112      	movs	r1, #18
 800afec:	f7ff ff78 	bl	800aee0 <std>
 800aff0:	2301      	movs	r3, #1
 800aff2:	61a3      	str	r3, [r4, #24]
 800aff4:	e7d2      	b.n	800af9c <__sinit+0xc>
 800aff6:	bf00      	nop
 800aff8:	0800d940 	.word	0x0800d940
 800affc:	0800af29 	.word	0x0800af29

0800b000 <__sfp>:
 800b000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b002:	4607      	mov	r7, r0
 800b004:	f7ff ffac 	bl	800af60 <__sfp_lock_acquire>
 800b008:	4b1e      	ldr	r3, [pc, #120]	; (800b084 <__sfp+0x84>)
 800b00a:	681e      	ldr	r6, [r3, #0]
 800b00c:	69b3      	ldr	r3, [r6, #24]
 800b00e:	b913      	cbnz	r3, 800b016 <__sfp+0x16>
 800b010:	4630      	mov	r0, r6
 800b012:	f7ff ffbd 	bl	800af90 <__sinit>
 800b016:	3648      	adds	r6, #72	; 0x48
 800b018:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b01c:	3b01      	subs	r3, #1
 800b01e:	d503      	bpl.n	800b028 <__sfp+0x28>
 800b020:	6833      	ldr	r3, [r6, #0]
 800b022:	b30b      	cbz	r3, 800b068 <__sfp+0x68>
 800b024:	6836      	ldr	r6, [r6, #0]
 800b026:	e7f7      	b.n	800b018 <__sfp+0x18>
 800b028:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b02c:	b9d5      	cbnz	r5, 800b064 <__sfp+0x64>
 800b02e:	4b16      	ldr	r3, [pc, #88]	; (800b088 <__sfp+0x88>)
 800b030:	60e3      	str	r3, [r4, #12]
 800b032:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b036:	6665      	str	r5, [r4, #100]	; 0x64
 800b038:	f000 f847 	bl	800b0ca <__retarget_lock_init_recursive>
 800b03c:	f7ff ff96 	bl	800af6c <__sfp_lock_release>
 800b040:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b044:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b048:	6025      	str	r5, [r4, #0]
 800b04a:	61a5      	str	r5, [r4, #24]
 800b04c:	2208      	movs	r2, #8
 800b04e:	4629      	mov	r1, r5
 800b050:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b054:	f7ff f936 	bl	800a2c4 <memset>
 800b058:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b05c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b060:	4620      	mov	r0, r4
 800b062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b064:	3468      	adds	r4, #104	; 0x68
 800b066:	e7d9      	b.n	800b01c <__sfp+0x1c>
 800b068:	2104      	movs	r1, #4
 800b06a:	4638      	mov	r0, r7
 800b06c:	f7ff ff62 	bl	800af34 <__sfmoreglue>
 800b070:	4604      	mov	r4, r0
 800b072:	6030      	str	r0, [r6, #0]
 800b074:	2800      	cmp	r0, #0
 800b076:	d1d5      	bne.n	800b024 <__sfp+0x24>
 800b078:	f7ff ff78 	bl	800af6c <__sfp_lock_release>
 800b07c:	230c      	movs	r3, #12
 800b07e:	603b      	str	r3, [r7, #0]
 800b080:	e7ee      	b.n	800b060 <__sfp+0x60>
 800b082:	bf00      	nop
 800b084:	0800d940 	.word	0x0800d940
 800b088:	ffff0001 	.word	0xffff0001

0800b08c <_fwalk_reent>:
 800b08c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b090:	4606      	mov	r6, r0
 800b092:	4688      	mov	r8, r1
 800b094:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b098:	2700      	movs	r7, #0
 800b09a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b09e:	f1b9 0901 	subs.w	r9, r9, #1
 800b0a2:	d505      	bpl.n	800b0b0 <_fwalk_reent+0x24>
 800b0a4:	6824      	ldr	r4, [r4, #0]
 800b0a6:	2c00      	cmp	r4, #0
 800b0a8:	d1f7      	bne.n	800b09a <_fwalk_reent+0xe>
 800b0aa:	4638      	mov	r0, r7
 800b0ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0b0:	89ab      	ldrh	r3, [r5, #12]
 800b0b2:	2b01      	cmp	r3, #1
 800b0b4:	d907      	bls.n	800b0c6 <_fwalk_reent+0x3a>
 800b0b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	d003      	beq.n	800b0c6 <_fwalk_reent+0x3a>
 800b0be:	4629      	mov	r1, r5
 800b0c0:	4630      	mov	r0, r6
 800b0c2:	47c0      	blx	r8
 800b0c4:	4307      	orrs	r7, r0
 800b0c6:	3568      	adds	r5, #104	; 0x68
 800b0c8:	e7e9      	b.n	800b09e <_fwalk_reent+0x12>

0800b0ca <__retarget_lock_init_recursive>:
 800b0ca:	4770      	bx	lr

0800b0cc <__retarget_lock_acquire_recursive>:
 800b0cc:	4770      	bx	lr

0800b0ce <__retarget_lock_release>:
 800b0ce:	4770      	bx	lr

0800b0d0 <__retarget_lock_release_recursive>:
 800b0d0:	4770      	bx	lr

0800b0d2 <__swhatbuf_r>:
 800b0d2:	b570      	push	{r4, r5, r6, lr}
 800b0d4:	460e      	mov	r6, r1
 800b0d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0da:	2900      	cmp	r1, #0
 800b0dc:	b096      	sub	sp, #88	; 0x58
 800b0de:	4614      	mov	r4, r2
 800b0e0:	461d      	mov	r5, r3
 800b0e2:	da08      	bge.n	800b0f6 <__swhatbuf_r+0x24>
 800b0e4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	602a      	str	r2, [r5, #0]
 800b0ec:	061a      	lsls	r2, r3, #24
 800b0ee:	d410      	bmi.n	800b112 <__swhatbuf_r+0x40>
 800b0f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0f4:	e00e      	b.n	800b114 <__swhatbuf_r+0x42>
 800b0f6:	466a      	mov	r2, sp
 800b0f8:	f000 f8c2 	bl	800b280 <_fstat_r>
 800b0fc:	2800      	cmp	r0, #0
 800b0fe:	dbf1      	blt.n	800b0e4 <__swhatbuf_r+0x12>
 800b100:	9a01      	ldr	r2, [sp, #4]
 800b102:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b106:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b10a:	425a      	negs	r2, r3
 800b10c:	415a      	adcs	r2, r3
 800b10e:	602a      	str	r2, [r5, #0]
 800b110:	e7ee      	b.n	800b0f0 <__swhatbuf_r+0x1e>
 800b112:	2340      	movs	r3, #64	; 0x40
 800b114:	2000      	movs	r0, #0
 800b116:	6023      	str	r3, [r4, #0]
 800b118:	b016      	add	sp, #88	; 0x58
 800b11a:	bd70      	pop	{r4, r5, r6, pc}

0800b11c <__smakebuf_r>:
 800b11c:	898b      	ldrh	r3, [r1, #12]
 800b11e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b120:	079d      	lsls	r5, r3, #30
 800b122:	4606      	mov	r6, r0
 800b124:	460c      	mov	r4, r1
 800b126:	d507      	bpl.n	800b138 <__smakebuf_r+0x1c>
 800b128:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b12c:	6023      	str	r3, [r4, #0]
 800b12e:	6123      	str	r3, [r4, #16]
 800b130:	2301      	movs	r3, #1
 800b132:	6163      	str	r3, [r4, #20]
 800b134:	b002      	add	sp, #8
 800b136:	bd70      	pop	{r4, r5, r6, pc}
 800b138:	ab01      	add	r3, sp, #4
 800b13a:	466a      	mov	r2, sp
 800b13c:	f7ff ffc9 	bl	800b0d2 <__swhatbuf_r>
 800b140:	9900      	ldr	r1, [sp, #0]
 800b142:	4605      	mov	r5, r0
 800b144:	4630      	mov	r0, r6
 800b146:	f7ff f931 	bl	800a3ac <_malloc_r>
 800b14a:	b948      	cbnz	r0, 800b160 <__smakebuf_r+0x44>
 800b14c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b150:	059a      	lsls	r2, r3, #22
 800b152:	d4ef      	bmi.n	800b134 <__smakebuf_r+0x18>
 800b154:	f023 0303 	bic.w	r3, r3, #3
 800b158:	f043 0302 	orr.w	r3, r3, #2
 800b15c:	81a3      	strh	r3, [r4, #12]
 800b15e:	e7e3      	b.n	800b128 <__smakebuf_r+0xc>
 800b160:	4b0d      	ldr	r3, [pc, #52]	; (800b198 <__smakebuf_r+0x7c>)
 800b162:	62b3      	str	r3, [r6, #40]	; 0x28
 800b164:	89a3      	ldrh	r3, [r4, #12]
 800b166:	6020      	str	r0, [r4, #0]
 800b168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b16c:	81a3      	strh	r3, [r4, #12]
 800b16e:	9b00      	ldr	r3, [sp, #0]
 800b170:	6163      	str	r3, [r4, #20]
 800b172:	9b01      	ldr	r3, [sp, #4]
 800b174:	6120      	str	r0, [r4, #16]
 800b176:	b15b      	cbz	r3, 800b190 <__smakebuf_r+0x74>
 800b178:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b17c:	4630      	mov	r0, r6
 800b17e:	f000 f891 	bl	800b2a4 <_isatty_r>
 800b182:	b128      	cbz	r0, 800b190 <__smakebuf_r+0x74>
 800b184:	89a3      	ldrh	r3, [r4, #12]
 800b186:	f023 0303 	bic.w	r3, r3, #3
 800b18a:	f043 0301 	orr.w	r3, r3, #1
 800b18e:	81a3      	strh	r3, [r4, #12]
 800b190:	89a0      	ldrh	r0, [r4, #12]
 800b192:	4305      	orrs	r5, r0
 800b194:	81a5      	strh	r5, [r4, #12]
 800b196:	e7cd      	b.n	800b134 <__smakebuf_r+0x18>
 800b198:	0800af29 	.word	0x0800af29

0800b19c <__malloc_lock>:
 800b19c:	4801      	ldr	r0, [pc, #4]	; (800b1a4 <__malloc_lock+0x8>)
 800b19e:	f7ff bf95 	b.w	800b0cc <__retarget_lock_acquire_recursive>
 800b1a2:	bf00      	nop
 800b1a4:	20001525 	.word	0x20001525

0800b1a8 <__malloc_unlock>:
 800b1a8:	4801      	ldr	r0, [pc, #4]	; (800b1b0 <__malloc_unlock+0x8>)
 800b1aa:	f7ff bf91 	b.w	800b0d0 <__retarget_lock_release_recursive>
 800b1ae:	bf00      	nop
 800b1b0:	20001525 	.word	0x20001525

0800b1b4 <__sread>:
 800b1b4:	b510      	push	{r4, lr}
 800b1b6:	460c      	mov	r4, r1
 800b1b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1bc:	f000 f894 	bl	800b2e8 <_read_r>
 800b1c0:	2800      	cmp	r0, #0
 800b1c2:	bfab      	itete	ge
 800b1c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b1c6:	89a3      	ldrhlt	r3, [r4, #12]
 800b1c8:	181b      	addge	r3, r3, r0
 800b1ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b1ce:	bfac      	ite	ge
 800b1d0:	6563      	strge	r3, [r4, #84]	; 0x54
 800b1d2:	81a3      	strhlt	r3, [r4, #12]
 800b1d4:	bd10      	pop	{r4, pc}

0800b1d6 <__swrite>:
 800b1d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1da:	461f      	mov	r7, r3
 800b1dc:	898b      	ldrh	r3, [r1, #12]
 800b1de:	05db      	lsls	r3, r3, #23
 800b1e0:	4605      	mov	r5, r0
 800b1e2:	460c      	mov	r4, r1
 800b1e4:	4616      	mov	r6, r2
 800b1e6:	d505      	bpl.n	800b1f4 <__swrite+0x1e>
 800b1e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1ec:	2302      	movs	r3, #2
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	f000 f868 	bl	800b2c4 <_lseek_r>
 800b1f4:	89a3      	ldrh	r3, [r4, #12]
 800b1f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b1fe:	81a3      	strh	r3, [r4, #12]
 800b200:	4632      	mov	r2, r6
 800b202:	463b      	mov	r3, r7
 800b204:	4628      	mov	r0, r5
 800b206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b20a:	f000 b817 	b.w	800b23c <_write_r>

0800b20e <__sseek>:
 800b20e:	b510      	push	{r4, lr}
 800b210:	460c      	mov	r4, r1
 800b212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b216:	f000 f855 	bl	800b2c4 <_lseek_r>
 800b21a:	1c43      	adds	r3, r0, #1
 800b21c:	89a3      	ldrh	r3, [r4, #12]
 800b21e:	bf15      	itete	ne
 800b220:	6560      	strne	r0, [r4, #84]	; 0x54
 800b222:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b226:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b22a:	81a3      	strheq	r3, [r4, #12]
 800b22c:	bf18      	it	ne
 800b22e:	81a3      	strhne	r3, [r4, #12]
 800b230:	bd10      	pop	{r4, pc}

0800b232 <__sclose>:
 800b232:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b236:	f000 b813 	b.w	800b260 <_close_r>
	...

0800b23c <_write_r>:
 800b23c:	b538      	push	{r3, r4, r5, lr}
 800b23e:	4d07      	ldr	r5, [pc, #28]	; (800b25c <_write_r+0x20>)
 800b240:	4604      	mov	r4, r0
 800b242:	4608      	mov	r0, r1
 800b244:	4611      	mov	r1, r2
 800b246:	2200      	movs	r2, #0
 800b248:	602a      	str	r2, [r5, #0]
 800b24a:	461a      	mov	r2, r3
 800b24c:	f000 f8a4 	bl	800b398 <_write>
 800b250:	1c43      	adds	r3, r0, #1
 800b252:	d102      	bne.n	800b25a <_write_r+0x1e>
 800b254:	682b      	ldr	r3, [r5, #0]
 800b256:	b103      	cbz	r3, 800b25a <_write_r+0x1e>
 800b258:	6023      	str	r3, [r4, #0]
 800b25a:	bd38      	pop	{r3, r4, r5, pc}
 800b25c:	20001528 	.word	0x20001528

0800b260 <_close_r>:
 800b260:	b538      	push	{r3, r4, r5, lr}
 800b262:	4d06      	ldr	r5, [pc, #24]	; (800b27c <_close_r+0x1c>)
 800b264:	2300      	movs	r3, #0
 800b266:	4604      	mov	r4, r0
 800b268:	4608      	mov	r0, r1
 800b26a:	602b      	str	r3, [r5, #0]
 800b26c:	f000 f84e 	bl	800b30c <_close>
 800b270:	1c43      	adds	r3, r0, #1
 800b272:	d102      	bne.n	800b27a <_close_r+0x1a>
 800b274:	682b      	ldr	r3, [r5, #0]
 800b276:	b103      	cbz	r3, 800b27a <_close_r+0x1a>
 800b278:	6023      	str	r3, [r4, #0]
 800b27a:	bd38      	pop	{r3, r4, r5, pc}
 800b27c:	20001528 	.word	0x20001528

0800b280 <_fstat_r>:
 800b280:	b538      	push	{r3, r4, r5, lr}
 800b282:	4d07      	ldr	r5, [pc, #28]	; (800b2a0 <_fstat_r+0x20>)
 800b284:	2300      	movs	r3, #0
 800b286:	4604      	mov	r4, r0
 800b288:	4608      	mov	r0, r1
 800b28a:	4611      	mov	r1, r2
 800b28c:	602b      	str	r3, [r5, #0]
 800b28e:	f000 f845 	bl	800b31c <_fstat>
 800b292:	1c43      	adds	r3, r0, #1
 800b294:	d102      	bne.n	800b29c <_fstat_r+0x1c>
 800b296:	682b      	ldr	r3, [r5, #0]
 800b298:	b103      	cbz	r3, 800b29c <_fstat_r+0x1c>
 800b29a:	6023      	str	r3, [r4, #0]
 800b29c:	bd38      	pop	{r3, r4, r5, pc}
 800b29e:	bf00      	nop
 800b2a0:	20001528 	.word	0x20001528

0800b2a4 <_isatty_r>:
 800b2a4:	b538      	push	{r3, r4, r5, lr}
 800b2a6:	4d06      	ldr	r5, [pc, #24]	; (800b2c0 <_isatty_r+0x1c>)
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	4604      	mov	r4, r0
 800b2ac:	4608      	mov	r0, r1
 800b2ae:	602b      	str	r3, [r5, #0]
 800b2b0:	f000 f844 	bl	800b33c <_isatty>
 800b2b4:	1c43      	adds	r3, r0, #1
 800b2b6:	d102      	bne.n	800b2be <_isatty_r+0x1a>
 800b2b8:	682b      	ldr	r3, [r5, #0]
 800b2ba:	b103      	cbz	r3, 800b2be <_isatty_r+0x1a>
 800b2bc:	6023      	str	r3, [r4, #0]
 800b2be:	bd38      	pop	{r3, r4, r5, pc}
 800b2c0:	20001528 	.word	0x20001528

0800b2c4 <_lseek_r>:
 800b2c4:	b538      	push	{r3, r4, r5, lr}
 800b2c6:	4d07      	ldr	r5, [pc, #28]	; (800b2e4 <_lseek_r+0x20>)
 800b2c8:	4604      	mov	r4, r0
 800b2ca:	4608      	mov	r0, r1
 800b2cc:	4611      	mov	r1, r2
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	602a      	str	r2, [r5, #0]
 800b2d2:	461a      	mov	r2, r3
 800b2d4:	f000 f842 	bl	800b35c <_lseek>
 800b2d8:	1c43      	adds	r3, r0, #1
 800b2da:	d102      	bne.n	800b2e2 <_lseek_r+0x1e>
 800b2dc:	682b      	ldr	r3, [r5, #0]
 800b2de:	b103      	cbz	r3, 800b2e2 <_lseek_r+0x1e>
 800b2e0:	6023      	str	r3, [r4, #0]
 800b2e2:	bd38      	pop	{r3, r4, r5, pc}
 800b2e4:	20001528 	.word	0x20001528

0800b2e8 <_read_r>:
 800b2e8:	b538      	push	{r3, r4, r5, lr}
 800b2ea:	4d07      	ldr	r5, [pc, #28]	; (800b308 <_read_r+0x20>)
 800b2ec:	4604      	mov	r4, r0
 800b2ee:	4608      	mov	r0, r1
 800b2f0:	4611      	mov	r1, r2
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	602a      	str	r2, [r5, #0]
 800b2f6:	461a      	mov	r2, r3
 800b2f8:	f000 f838 	bl	800b36c <_read>
 800b2fc:	1c43      	adds	r3, r0, #1
 800b2fe:	d102      	bne.n	800b306 <_read_r+0x1e>
 800b300:	682b      	ldr	r3, [r5, #0]
 800b302:	b103      	cbz	r3, 800b306 <_read_r+0x1e>
 800b304:	6023      	str	r3, [r4, #0]
 800b306:	bd38      	pop	{r3, r4, r5, pc}
 800b308:	20001528 	.word	0x20001528

0800b30c <_close>:
 800b30c:	4b02      	ldr	r3, [pc, #8]	; (800b318 <_close+0xc>)
 800b30e:	2258      	movs	r2, #88	; 0x58
 800b310:	601a      	str	r2, [r3, #0]
 800b312:	f04f 30ff 	mov.w	r0, #4294967295
 800b316:	4770      	bx	lr
 800b318:	20001528 	.word	0x20001528

0800b31c <_fstat>:
 800b31c:	4b02      	ldr	r3, [pc, #8]	; (800b328 <_fstat+0xc>)
 800b31e:	2258      	movs	r2, #88	; 0x58
 800b320:	601a      	str	r2, [r3, #0]
 800b322:	f04f 30ff 	mov.w	r0, #4294967295
 800b326:	4770      	bx	lr
 800b328:	20001528 	.word	0x20001528

0800b32c <_getpid>:
 800b32c:	4b02      	ldr	r3, [pc, #8]	; (800b338 <_getpid+0xc>)
 800b32e:	2258      	movs	r2, #88	; 0x58
 800b330:	601a      	str	r2, [r3, #0]
 800b332:	f04f 30ff 	mov.w	r0, #4294967295
 800b336:	4770      	bx	lr
 800b338:	20001528 	.word	0x20001528

0800b33c <_isatty>:
 800b33c:	4b02      	ldr	r3, [pc, #8]	; (800b348 <_isatty+0xc>)
 800b33e:	2258      	movs	r2, #88	; 0x58
 800b340:	601a      	str	r2, [r3, #0]
 800b342:	2000      	movs	r0, #0
 800b344:	4770      	bx	lr
 800b346:	bf00      	nop
 800b348:	20001528 	.word	0x20001528

0800b34c <_kill>:
 800b34c:	4b02      	ldr	r3, [pc, #8]	; (800b358 <_kill+0xc>)
 800b34e:	2258      	movs	r2, #88	; 0x58
 800b350:	601a      	str	r2, [r3, #0]
 800b352:	f04f 30ff 	mov.w	r0, #4294967295
 800b356:	4770      	bx	lr
 800b358:	20001528 	.word	0x20001528

0800b35c <_lseek>:
 800b35c:	4b02      	ldr	r3, [pc, #8]	; (800b368 <_lseek+0xc>)
 800b35e:	2258      	movs	r2, #88	; 0x58
 800b360:	601a      	str	r2, [r3, #0]
 800b362:	f04f 30ff 	mov.w	r0, #4294967295
 800b366:	4770      	bx	lr
 800b368:	20001528 	.word	0x20001528

0800b36c <_read>:
 800b36c:	4b02      	ldr	r3, [pc, #8]	; (800b378 <_read+0xc>)
 800b36e:	2258      	movs	r2, #88	; 0x58
 800b370:	601a      	str	r2, [r3, #0]
 800b372:	f04f 30ff 	mov.w	r0, #4294967295
 800b376:	4770      	bx	lr
 800b378:	20001528 	.word	0x20001528

0800b37c <_sbrk>:
 800b37c:	4a04      	ldr	r2, [pc, #16]	; (800b390 <_sbrk+0x14>)
 800b37e:	6811      	ldr	r1, [r2, #0]
 800b380:	4603      	mov	r3, r0
 800b382:	b909      	cbnz	r1, 800b388 <_sbrk+0xc>
 800b384:	4903      	ldr	r1, [pc, #12]	; (800b394 <_sbrk+0x18>)
 800b386:	6011      	str	r1, [r2, #0]
 800b388:	6810      	ldr	r0, [r2, #0]
 800b38a:	4403      	add	r3, r0
 800b38c:	6013      	str	r3, [r2, #0]
 800b38e:	4770      	bx	lr
 800b390:	2000152c 	.word	0x2000152c
 800b394:	20001530 	.word	0x20001530

0800b398 <_write>:
 800b398:	4b02      	ldr	r3, [pc, #8]	; (800b3a4 <_write+0xc>)
 800b39a:	2258      	movs	r2, #88	; 0x58
 800b39c:	601a      	str	r2, [r3, #0]
 800b39e:	f04f 30ff 	mov.w	r0, #4294967295
 800b3a2:	4770      	bx	lr
 800b3a4:	20001528 	.word	0x20001528

0800b3a8 <_exit>:
 800b3a8:	e7fe      	b.n	800b3a8 <_exit>
	...

0800b3ac <_init>:
 800b3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ae:	bf00      	nop
 800b3b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3b2:	bc08      	pop	{r3}
 800b3b4:	469e      	mov	lr, r3
 800b3b6:	4770      	bx	lr

0800b3b8 <_fini>:
 800b3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ba:	bf00      	nop
 800b3bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3be:	bc08      	pop	{r3}
 800b3c0:	469e      	mov	lr, r3
 800b3c2:	4770      	bx	lr
